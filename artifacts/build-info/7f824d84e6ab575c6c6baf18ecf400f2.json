{"id":"7f824d84e6ab575c6c6baf18ecf400f2","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"contracts/IDO.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8;\r\npragma experimental ABIEncoderV2;\r\n// import \"hardhat/console.sol\";\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/* --------- Access Control --------- */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n    bool isclaimable = false;\r\n\r\n    function startClaim() external onlyOwner {\r\n        isclaimable = true;\r\n    }\r\n\r\n    function stopClaim() external onlyOwner {\r\n        isclaimable = false;\r\n    }\r\n\r\n    function getClaimStatus() external view returns (bool) {\r\n        return isclaimable;\r\n    }\r\n\r\n    modifier isClaim() {\r\n        require(isclaimable, \"Claim is not available now.\");\r\n        _;\r\n    }\r\n\r\n    function claimToken(\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(owner(), amount);\r\n    }\r\n\r\n    function claimETH(uint256 amount) external onlyOwner {\r\n        (bool sent, ) = owner().call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}\r\n\r\ncontract IDO is Claimable {\r\n    using SafeMath for uint256;\r\n    event Buy(address to, uint256 amount);\r\n    event Claim(address to, uint256 amount);\r\n    uint256 hadcapUsd = 200000;\r\n    uint256 rewardAllocation = 100000000;\r\n    uint256 minUsdtAmount = 100;\r\n    uint256 maxUsdtAmount = 1000;\r\n\r\n    uint256 price;\r\n    uint256 public startTime;\r\n    uint256 public totalSaled;\r\n    uint256 public usdtTotalSaled;\r\n\r\n    uint256 public baseDecimal = 1000000;\r\n    address rewardAddress;\r\n    address usdtAddress;\r\n\r\n    mapping(address => uint256) public userRewards;\r\n    mapping(address => uint256) public userDeposited;\r\n    constructor(address _rewardAddress, address _usdtAddress) {\r\n        startTime = block.timestamp;\r\n        totalSaled = 0;\r\n        price = (hadcapUsd * baseDecimal).div(rewardAllocation);\r\n        rewardAddress = _rewardAddress;\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n\r\n    function resetPrice(uint256 _price) private {\r\n        price = _price;\r\n    }\r\n\r\n    function resetStartTime() public onlyOwner {\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function calcTokenAmount(\r\n        uint256 usdAmount\r\n    ) public returns (uint256 amount) {\r\n        // calculate price again.\r\n        if (usdtTotalSaled > hadcapUsd * baseDecimal) {\r\n            price = (usdtTotalSaled).div(rewardAllocation);\r\n            resetPrice(price);\r\n        }\r\n        amount = (usdAmount * baseDecimal).div(price) * 10 ** 12;\r\n    }\r\n\r\n    function buyWithUSDT(uint256 usdtAmount) external returns (bool) {\r\n        require(\r\n            maxUsdtAmount >= (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) &&\r\n                (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) >= minUsdtAmount,\r\n            \"Amount is allowed 100 - 1000.\"\r\n        );\r\n        uint256 amount = calcTokenAmount(usdtAmount);\r\n        totalSaled += amount;\r\n        usdtTotalSaled += usdtAmount;\r\n        require(\r\n            IERC20(usdtAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                usdtAmount\r\n            ),\r\n            \"deposit failed\"\r\n        );\r\n        userRewards[_msgSender()] += amount;\r\n        userDeposited[_msgSender()] += usdtAmount;\r\n        IERC20(usdtAddress).transfer(owner(), usdtAmount);\r\n        return true;\r\n    }\r\n\r\n    function claimRewardToken() public {\r\n        require(userRewards[_msgSender()] >= 0, \"Please buy token.\");\r\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\r\n        userRewards[_msgSender()] = 0;\r\n        emit Claim(msg.sender, userRewards[_msgSender()]);\r\n    }\r\n\r\n    function getClaimAmount(\r\n        address userAddress\r\n    ) public view returns (uint256 claimAmount) {\r\n        claimAmount = userRewards[userAddress];\r\n    }\r\n\r\n    function getPrice() public view returns (uint256 tokenPrice) {\r\n        tokenPrice = price;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/IDO.sol":{"ast":{"absolutePath":"contracts/IDO.sol","exportedSymbols":{"Claimable":[609],"Context":[105],"IDO":[925],"IERC20":[84],"Ownable":[524],"SafeMath":[414]},"id":926,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8"],"nodeType":"PragmaDirective","src":"39:21:0"},{"id":2,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"62:33:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":84,"linearizedBaseContracts":[84],"name":"IERC20","nameLocation":"143:6:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":10,"name":"Approval","nameLocation":"163:8:0","nodeType":"EventDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"198:5:0","nodeType":"VariableDeclaration","scope":10,"src":"182:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"182:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"230:7:0","nodeType":"VariableDeclaration","scope":10,"src":"214:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"214:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"256:5:0","nodeType":"VariableDeclaration","scope":10,"src":"248:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7,"name":"uint256","nodeType":"ElementaryTypeName","src":"248:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"171:97:0"},"src":"157:112:0"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":18,"name":"Transfer","nameLocation":"281:8:0","nodeType":"EventDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"306:4:0","nodeType":"VariableDeclaration","scope":18,"src":"290:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"290:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"328:2:0","nodeType":"VariableDeclaration","scope":18,"src":"312:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"312:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"340:5:0","nodeType":"VariableDeclaration","scope":18,"src":"332:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint256","nodeType":"ElementaryTypeName","src":"332:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"289:57:0"},"src":"275:72:0"},{"functionSelector":"06fdde03","id":23,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"364:4:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"368:2:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":23,"src":"394:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":20,"name":"string","nodeType":"ElementaryTypeName","src":"394:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"393:15:0"},"scope":84,"src":"355:54:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":28,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"426:6:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[],"src":"432:2:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":28,"src":"458:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":25,"name":"string","nodeType":"ElementaryTypeName","src":"458:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"457:15:0"},"scope":84,"src":"417:56:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":33,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"490:8:0","nodeType":"FunctionDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"498:2:0"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":33,"src":"524:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":30,"name":"uint8","nodeType":"ElementaryTypeName","src":"524:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"523:7:0"},"scope":84,"src":"481:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":38,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"548:11:0","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[],"src":"559:2:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":38,"src":"585:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":35,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"584:9:0"},"scope":84,"src":"539:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":45,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"611:9:0","nodeType":"FunctionDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"owner","nameLocation":"629:5:0","nodeType":"VariableDeclaration","scope":45,"src":"621:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"620:15:0"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":45,"src":"659:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"658:9:0"},"scope":84,"src":"602:66:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":54,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"685:9:0","nodeType":"FunctionDefinition","parameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"owner","nameLocation":"713:5:0","nodeType":"VariableDeclaration","scope":54,"src":"705:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":46,"name":"address","nodeType":"ElementaryTypeName","src":"705:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49,"mutability":"mutable","name":"spender","nameLocation":"737:7:0","nodeType":"VariableDeclaration","scope":54,"src":"729:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"729:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"694:57:0"},"returnParameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"775:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51,"name":"uint256","nodeType":"ElementaryTypeName","src":"775:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"774:9:0"},"scope":84,"src":"676:108:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":63,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"801:7:0","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"spender","nameLocation":"817:7:0","nodeType":"VariableDeclaration","scope":63,"src":"809:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"value","nameLocation":"834:5:0","nodeType":"VariableDeclaration","scope":63,"src":"826:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57,"name":"uint256","nodeType":"ElementaryTypeName","src":"826:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"808:32:0"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63,"src":"859:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":60,"name":"bool","nodeType":"ElementaryTypeName","src":"859:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"858:6:0"},"scope":84,"src":"792:73:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":72,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"882:8:0","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"to","nameLocation":"899:2:0","nodeType":"VariableDeclaration","scope":72,"src":"891:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"value","nameLocation":"911:5:0","nodeType":"VariableDeclaration","scope":72,"src":"903:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"890:27:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":72,"src":"936:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69,"name":"bool","nodeType":"ElementaryTypeName","src":"936:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"935:6:0"},"scope":84,"src":"873:69:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":83,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"959:12:0","nodeType":"FunctionDefinition","parameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"from","nameLocation":"990:4:0","nodeType":"VariableDeclaration","scope":83,"src":"982:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"982:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"to","nameLocation":"1013:2:0","nodeType":"VariableDeclaration","scope":83,"src":"1005:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"1005:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":78,"mutability":"mutable","name":"value","nameLocation":"1034:5:0","nodeType":"VariableDeclaration","scope":83,"src":"1026:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"1026:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"971:75:0"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":83,"src":"1065:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80,"name":"bool","nodeType":"ElementaryTypeName","src":"1065:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1064:6:0"},"scope":84,"src":"950:121:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":926,"src":"133:941:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":105,"linearizedBaseContracts":[105],"name":"Context","nameLocation":"1087:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":92,"nodeType":"Block","src":"1312:36:0","statements":[{"expression":{"expression":{"id":89,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1330:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1334:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1330:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":88,"id":91,"nodeType":"Return","src":"1323:17:0"}]},"id":93,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"1267:10:0","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"1277:2:0"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":87,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"1303:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":86,"name":"address","nodeType":"ElementaryTypeName","src":"1303:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1302:9:0"},"scope":105,"src":"1258:90:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":103,"nodeType":"Block","src":"1413:168:0","statements":[{"expression":{"id":98,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1424:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$105","typeString":"contract Context"}},"id":99,"nodeType":"ExpressionStatement","src":"1424:4:0"},{"expression":{"expression":{"id":100,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1565:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1569:4:0","memberName":"data","nodeType":"MemberAccess","src":"1565:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":97,"id":102,"nodeType":"Return","src":"1558:15:0"}]},"id":104,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1365:8:0","nodeType":"FunctionDefinition","parameters":{"id":94,"nodeType":"ParameterList","parameters":[],"src":"1373:2:0"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":104,"src":"1399:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95,"name":"bytes","nodeType":"ElementaryTypeName","src":"1399:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1398:14:0"},"scope":105,"src":"1356:225:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":926,"src":"1078:506:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":414,"linearizedBaseContracts":[414],"name":"SafeMath","nameLocation":"1596:8:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":136,"nodeType":"Block","src":"1854:146:0","statements":[{"id":135,"nodeType":"UncheckedBlock","src":"1865:128:0","statements":[{"assignments":[118],"declarations":[{"constant":false,"id":118,"mutability":"mutable","name":"c","nameLocation":"1898:1:0","nodeType":"VariableDeclaration","scope":135,"src":"1890:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1890:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":122,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":119,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"1902:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":120,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1906:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1902:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1890:17:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":123,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1926:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":124,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"1930:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1926:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":130,"nodeType":"IfStatement","src":"1922:28:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":128,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":116,"id":129,"nodeType":"Return","src":"1933:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1973:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":132,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1979:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1972:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":116,"id":134,"nodeType":"Return","src":"1965:16:0"}]}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"1612:135:0","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":137,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"1762:6:0","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"a","nameLocation":"1787:1:0","nodeType":"VariableDeclaration","scope":137,"src":"1779:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":110,"mutability":"mutable","name":"b","nameLocation":"1807:1:0","nodeType":"VariableDeclaration","scope":137,"src":"1799:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":109,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1768:47:0"},"returnParameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":137,"src":"1839:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":112,"name":"bool","nodeType":"ElementaryTypeName","src":"1839:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":137,"src":"1845:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1845:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:15:0"},"scope":414,"src":"1753:247:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":164,"nodeType":"Block","src":"2253:118:0","statements":[{"id":163,"nodeType":"UncheckedBlock","src":"2264:100:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":149,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"2293:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":150,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2297:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2293:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":156,"nodeType":"IfStatement","src":"2289:28:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2308:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2315:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":154,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2307:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":148,"id":155,"nodeType":"Return","src":"2300:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2340:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":158,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2346:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":159,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"2350:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2346:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":161,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2339:13:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":148,"id":162,"nodeType":"Return","src":"2332:20:0"}]}]},"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"2008:138:0","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":165,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"2161:6:0","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"a","nameLocation":"2186:1:0","nodeType":"VariableDeclaration","scope":165,"src":"2178:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"2178:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"b","nameLocation":"2206:1:0","nodeType":"VariableDeclaration","scope":165,"src":"2198:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2167:47:0"},"returnParameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":165,"src":"2238:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":144,"name":"bool","nodeType":"ElementaryTypeName","src":"2238:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":165,"src":"2244:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2244:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2237:15:0"},"scope":414,"src":"2152:219:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":206,"nodeType":"Block","src":"2627:427:0","statements":[{"id":205,"nodeType":"UncheckedBlock","src":"2638:409:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":177,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"2900:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2905:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2900:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":184,"nodeType":"IfStatement","src":"2896:28:0","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2916:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":182,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2915:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":176,"id":183,"nodeType":"Return","src":"2908:16:0"}},{"assignments":[186],"declarations":[{"constant":false,"id":186,"mutability":"mutable","name":"c","nameLocation":"2947:1:0","nodeType":"VariableDeclaration","scope":205,"src":"2939:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2939:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":190,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":187,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"2951:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":188,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"2955:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2951:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2939:17:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":191,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"2975:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"2979:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2975:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":194,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"2984:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2975:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":200,"nodeType":"IfStatement","src":"2971:33:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2995:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3002:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2994:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":176,"id":199,"nodeType":"Return","src":"2987:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3027:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":202,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"3033:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3026:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":176,"id":204,"nodeType":"Return","src":"3019:16:0"}]}]},"documentation":{"id":166,"nodeType":"StructuredDocumentation","src":"2379:141:0","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":207,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"2535:6:0","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":168,"mutability":"mutable","name":"a","nameLocation":"2560:1:0","nodeType":"VariableDeclaration","scope":207,"src":"2552:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"2552:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"b","nameLocation":"2580:1:0","nodeType":"VariableDeclaration","scope":207,"src":"2572:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"2572:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2541:47:0"},"returnParameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":207,"src":"2612:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"2612:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":207,"src":"2618:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"2618:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2611:15:0"},"scope":414,"src":"2526:528:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"3311:119:0","statements":[{"id":233,"nodeType":"UncheckedBlock","src":"3322:101:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":219,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"3351:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3356:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3351:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":226,"nodeType":"IfStatement","src":"3347:29:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3367:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3374:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3366:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":218,"id":225,"nodeType":"Return","src":"3359:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3399:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"3405:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":229,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"3409:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3405:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":231,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3398:13:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":218,"id":232,"nodeType":"Return","src":"3391:20:0"}]}]},"documentation":{"id":208,"nodeType":"StructuredDocumentation","src":"3062:142:0","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":235,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"3219:6:0","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"a","nameLocation":"3244:1:0","nodeType":"VariableDeclaration","scope":235,"src":"3236:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":209,"name":"uint256","nodeType":"ElementaryTypeName","src":"3236:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":212,"mutability":"mutable","name":"b","nameLocation":"3264:1:0","nodeType":"VariableDeclaration","scope":235,"src":"3256:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"3256:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3225:47:0"},"returnParameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"3296:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":214,"name":"bool","nodeType":"ElementaryTypeName","src":"3296:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"3302:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":216,"name":"uint256","nodeType":"ElementaryTypeName","src":"3302:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3295:15:0"},"scope":414,"src":"3210:220:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":262,"nodeType":"Block","src":"3697:119:0","statements":[{"id":261,"nodeType":"UncheckedBlock","src":"3708:101:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":247,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"3737:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3742:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3737:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":254,"nodeType":"IfStatement","src":"3733:29:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3753:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3760:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":252,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3752:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":246,"id":253,"nodeType":"Return","src":"3745:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3785:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":256,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"3791:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":257,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"3795:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3791:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3784:13:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":246,"id":260,"nodeType":"Return","src":"3777:20:0"}]}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"3438:152:0","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":263,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"3605:6:0","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"a","nameLocation":"3630:1:0","nodeType":"VariableDeclaration","scope":263,"src":"3622:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":237,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"b","nameLocation":"3650:1:0","nodeType":"VariableDeclaration","scope":263,"src":"3642:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":239,"name":"uint256","nodeType":"ElementaryTypeName","src":"3642:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3611:47:0"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":263,"src":"3682:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":242,"name":"bool","nodeType":"ElementaryTypeName","src":"3682:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":263,"src":"3688:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"3688:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3681:15:0"},"scope":414,"src":"3596:220:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":277,"nodeType":"Block","src":"4130:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"4148:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"4152:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4148:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":272,"id":276,"nodeType":"Return","src":"4141:12:0"}]},"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"3824:233:0","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":278,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"4072:3:0","nodeType":"FunctionDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"a","nameLocation":"4084:1:0","nodeType":"VariableDeclaration","scope":278,"src":"4076:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"4076:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":268,"mutability":"mutable","name":"b","nameLocation":"4095:1:0","nodeType":"VariableDeclaration","scope":278,"src":"4087:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":267,"name":"uint256","nodeType":"ElementaryTypeName","src":"4087:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4075:22:0"},"returnParameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":278,"src":"4121:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint256","nodeType":"ElementaryTypeName","src":"4121:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4120:9:0"},"scope":414,"src":"4063:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":292,"nodeType":"Block","src":"4511:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":288,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"4529:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":289,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4533:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4529:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":287,"id":291,"nodeType":"Return","src":"4522:12:0"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"4169:269:0","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":293,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4453:3:0","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"a","nameLocation":"4465:1:0","nodeType":"VariableDeclaration","scope":293,"src":"4457:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"b","nameLocation":"4476:1:0","nodeType":"VariableDeclaration","scope":293,"src":"4468:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"4468:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:22:0"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"4502:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"4502:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4501:9:0"},"scope":414,"src":"4444:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":307,"nodeType":"Block","src":"4868:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":303,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"4886:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":304,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"4890:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4886:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":302,"id":306,"nodeType":"Return","src":"4879:12:0"}]},"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"4550:245:0","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":308,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"4810:3:0","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"a","nameLocation":"4822:1:0","nodeType":"VariableDeclaration","scope":308,"src":"4814:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"4814:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":298,"mutability":"mutable","name":"b","nameLocation":"4833:1:0","nodeType":"VariableDeclaration","scope":308,"src":"4825:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"4825:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4813:22:0"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":308,"src":"4859:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"4859:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4858:9:0"},"scope":414,"src":"4801:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":322,"nodeType":"Block","src":"5267:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"5285:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":319,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"5289:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5285:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":317,"id":321,"nodeType":"Return","src":"5278:12:0"}]},"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"4907:287:0","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":323,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5209:3:0","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"a","nameLocation":"5221:1:0","nodeType":"VariableDeclaration","scope":323,"src":"5213:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"5213:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"b","nameLocation":"5232:1:0","nodeType":"VariableDeclaration","scope":323,"src":"5224:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":312,"name":"uint256","nodeType":"ElementaryTypeName","src":"5224:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5212:22:0"},"returnParameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":323,"src":"5258:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":315,"name":"uint256","nodeType":"ElementaryTypeName","src":"5258:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5257:9:0"},"scope":414,"src":"5200:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":337,"nodeType":"Block","src":"5832:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":333,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"5850:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":334,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"5854:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5850:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":332,"id":336,"nodeType":"Return","src":"5843:12:0"}]},"documentation":{"id":324,"nodeType":"StructuredDocumentation","src":"5306:453:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":338,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"5774:3:0","nodeType":"FunctionDefinition","parameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"a","nameLocation":"5786:1:0","nodeType":"VariableDeclaration","scope":338,"src":"5778:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"5778:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":328,"mutability":"mutable","name":"b","nameLocation":"5797:1:0","nodeType":"VariableDeclaration","scope":338,"src":"5789:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":327,"name":"uint256","nodeType":"ElementaryTypeName","src":"5789:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5777:22:0"},"returnParameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":338,"src":"5823:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"5823:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5822:9:0"},"scope":414,"src":"5765:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":362,"nodeType":"Block","src":"6471:111:0","statements":[{"id":361,"nodeType":"UncheckedBlock","src":"6482:93:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":351,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"6515:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":352,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"6520:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6515:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":354,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"6523:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6507:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6507:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":356,"nodeType":"ExpressionStatement","src":"6507:29:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":357,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"6558:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"6562:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6558:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":349,"id":360,"nodeType":"Return","src":"6551:12:0"}]}]},"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"5871:465:0","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":363,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"6351:3:0","nodeType":"FunctionDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"a","nameLocation":"6373:1:0","nodeType":"VariableDeclaration","scope":363,"src":"6365:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":340,"name":"uint256","nodeType":"ElementaryTypeName","src":"6365:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":343,"mutability":"mutable","name":"b","nameLocation":"6393:1:0","nodeType":"VariableDeclaration","scope":363,"src":"6385:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":342,"name":"uint256","nodeType":"ElementaryTypeName","src":"6385:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"errorMessage","nameLocation":"6419:12:0","nodeType":"VariableDeclaration","scope":363,"src":"6405:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":344,"name":"string","nodeType":"ElementaryTypeName","src":"6405:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6354:84:0"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":363,"src":"6462:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":347,"name":"uint256","nodeType":"ElementaryTypeName","src":"6462:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6461:9:0"},"scope":414,"src":"6342:240:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":387,"nodeType":"Block","src":"7209:110:0","statements":[{"id":386,"nodeType":"UncheckedBlock","src":"7220:92:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":376,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"7253:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7257:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7253:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":379,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"7260:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7245:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7245:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"7245:28:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":382,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"7295:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":383,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"7299:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7295:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":374,"id":385,"nodeType":"Return","src":"7288:12:0"}]}]},"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"6590:484:0","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":388,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"7089:3:0","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"a","nameLocation":"7111:1:0","nodeType":"VariableDeclaration","scope":388,"src":"7103:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":365,"name":"uint256","nodeType":"ElementaryTypeName","src":"7103:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"b","nameLocation":"7131:1:0","nodeType":"VariableDeclaration","scope":388,"src":"7123:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":367,"name":"uint256","nodeType":"ElementaryTypeName","src":"7123:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"errorMessage","nameLocation":"7157:12:0","nodeType":"VariableDeclaration","scope":388,"src":"7143:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":369,"name":"string","nodeType":"ElementaryTypeName","src":"7143:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7092:84:0"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":388,"src":"7200:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint256","nodeType":"ElementaryTypeName","src":"7200:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7199:9:0"},"scope":414,"src":"7080:239:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":412,"nodeType":"Block","src":"8111:110:0","statements":[{"id":411,"nodeType":"UncheckedBlock","src":"8122:92:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":401,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"8155:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8159:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8155:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":404,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"8162:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":400,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8147:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8147:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":406,"nodeType":"ExpressionStatement","src":"8147:28:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":407,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"8197:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":408,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"8201:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8197:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":399,"id":410,"nodeType":"Return","src":"8190:12:0"}]}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"7327:649:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":413,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"7991:3:0","nodeType":"FunctionDefinition","parameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"a","nameLocation":"8013:1:0","nodeType":"VariableDeclaration","scope":413,"src":"8005:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":390,"name":"uint256","nodeType":"ElementaryTypeName","src":"8005:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":393,"mutability":"mutable","name":"b","nameLocation":"8033:1:0","nodeType":"VariableDeclaration","scope":413,"src":"8025:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"8025:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":395,"mutability":"mutable","name":"errorMessage","nameLocation":"8059:12:0","nodeType":"VariableDeclaration","scope":413,"src":"8045:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":394,"name":"string","nodeType":"ElementaryTypeName","src":"8045:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7994:84:0"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"8102:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":397,"name":"uint256","nodeType":"ElementaryTypeName","src":"8102:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8101:9:0"},"scope":414,"src":"7982:239:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":926,"src":"1588:6636:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":415,"name":"Context","nameLocations":["8290:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"8290:7:0"},"id":416,"nodeType":"InheritanceSpecifier","src":"8290:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":524,"linearizedBaseContracts":[524,105],"name":"Ownable","nameLocation":"8279:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":418,"mutability":"mutable","name":"_owner","nameLocation":"8321:6:0","nodeType":"VariableDeclaration","scope":524,"src":"8305:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":417,"name":"address","nodeType":"ElementaryTypeName","src":"8305:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":424,"name":"OwnershipTransferred","nameLocation":"8342:20:0","nodeType":"EventDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"8389:13:0","nodeType":"VariableDeclaration","scope":424,"src":"8373:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"8373:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":422,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"8429:8:0","nodeType":"VariableDeclaration","scope":424,"src":"8413:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"8413:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8362:82:0"},"src":"8336:109:0"},{"body":{"id":444,"nodeType":"Block","src":"8467:139:0","statements":[{"assignments":[428],"declarations":[{"constant":false,"id":428,"mutability":"mutable","name":"msgSender","nameLocation":"8486:9:0","nodeType":"VariableDeclaration","scope":444,"src":"8478:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"8478:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":431,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":429,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"8498:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8498:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8478:32:0"},{"expression":{"id":434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":432,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8521:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":433,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"8530:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8521:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":435,"nodeType":"ExpressionStatement","src":"8521:18:0"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8584:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8576:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":437,"name":"address","nodeType":"ElementaryTypeName","src":"8576:7:0","typeDescriptions":{}}},"id":440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8576:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":441,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"8588:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":436,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"8555:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8555:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":443,"nodeType":"EmitStatement","src":"8550:48:0"}]},"id":445,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[],"src":"8464:2:0"},"returnParameters":{"id":426,"nodeType":"ParameterList","parameters":[],"src":"8467:0:0"},"scope":524,"src":"8453:153:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":452,"nodeType":"Block","src":"8661:32:0","statements":[{"expression":{"id":450,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8679:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":449,"id":451,"nodeType":"Return","src":"8672:13:0"}]},"functionSelector":"8da5cb5b","id":453,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"8623:5:0","nodeType":"FunctionDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[],"src":"8628:2:0"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":453,"src":"8652:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"8652:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8651:9:0"},"scope":524,"src":"8614:79:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":464,"nodeType":"Block","src":"8722:98:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":456,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8741:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":457,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"8751:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8751:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8741:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8765:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":455,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8733:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8733:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":462,"nodeType":"ExpressionStatement","src":"8733:67:0"},{"id":463,"nodeType":"PlaceholderStatement","src":"8811:1:0"}]},"id":465,"name":"onlyOwner","nameLocation":"8710:9:0","nodeType":"ModifierDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[],"src":"8719:2:0"},"src":"8701:119:0","virtual":false,"visibility":"internal"},{"body":{"id":485,"nodeType":"Block","src":"8874:94:0","statements":[{"eventCall":{"arguments":[{"id":471,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8911:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8927:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8919:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"8919:7:0","typeDescriptions":{}}},"id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8919:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":470,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"8890:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8890:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":477,"nodeType":"EmitStatement","src":"8885:45:0"},{"expression":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":478,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8941:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8950:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"8950:7:0","typeDescriptions":{}}},"id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8950:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8941:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":484,"nodeType":"ExpressionStatement","src":"8941:19:0"}]},"functionSelector":"715018a6","id":486,"implemented":true,"kind":"function","modifiers":[{"id":468,"kind":"modifierInvocation","modifierName":{"id":467,"name":"onlyOwner","nameLocations":["8864:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"8864:9:0"},"nodeType":"ModifierInvocation","src":"8864:9:0"}],"name":"renounceOwnership","nameLocation":"8837:17:0","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"8854:2:0"},"returnParameters":{"id":469,"nodeType":"ParameterList","parameters":[],"src":"8874:0:0"},"scope":524,"src":"8828:140:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":497,"nodeType":"Block","src":"9038:47:0","statements":[{"expression":{"arguments":[{"id":494,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"9068:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":493,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"9049:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9049:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"9049:28:0"}]},"functionSelector":"f2fde38b","id":498,"implemented":true,"kind":"function","modifiers":[{"id":491,"kind":"modifierInvocation","modifierName":{"id":490,"name":"onlyOwner","nameLocations":["9028:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9028:9:0"},"nodeType":"ModifierInvocation","src":"9028:9:0"}],"name":"transferOwnership","nameLocation":"8985:17:0","nodeType":"FunctionDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"newOwner","nameLocation":"9011:8:0","nodeType":"VariableDeclaration","scope":498,"src":"9003:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"9003:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9002:18:0"},"returnParameters":{"id":492,"nodeType":"ParameterList","parameters":[],"src":"9038:0:0"},"scope":524,"src":"8976:109:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":522,"nodeType":"Block","src":"9148:211:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":504,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"9181:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9201:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9193:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"9193:7:0","typeDescriptions":{}}},"id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9193:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9181:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9218:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9159:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9159:110:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":512,"nodeType":"ExpressionStatement","src":"9159:110:0"},{"eventCall":{"arguments":[{"id":514,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"9306:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":515,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"9314:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":513,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"9285:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9285:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":517,"nodeType":"EmitStatement","src":"9280:43:0"},{"expression":{"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":518,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"9334:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":519,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"9343:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9334:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":521,"nodeType":"ExpressionStatement","src":"9334:17:0"}]},"id":523,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"9102:18:0","nodeType":"FunctionDefinition","parameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"newOwner","nameLocation":"9129:8:0","nodeType":"VariableDeclaration","scope":523,"src":"9121:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":499,"name":"address","nodeType":"ElementaryTypeName","src":"9121:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9120:18:0"},"returnParameters":{"id":502,"nodeType":"ParameterList","parameters":[],"src":"9148:0:0"},"scope":524,"src":"9093:266:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":926,"src":"8270:1092:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":525,"name":"Ownable","nameLocations":["9388:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":524,"src":"9388:7:0"},"id":526,"nodeType":"InheritanceSpecifier","src":"9388:7:0"}],"canonicalName":"Claimable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":609,"linearizedBaseContracts":[609,524,105],"name":"Claimable","nameLocation":"9375:9:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":529,"mutability":"mutable","name":"isclaimable","nameLocation":"9408:11:0","nodeType":"VariableDeclaration","scope":609,"src":"9403:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":527,"name":"bool","nodeType":"ElementaryTypeName","src":"9403:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"66616c7365","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9422:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"visibility":"internal"},{"body":{"id":538,"nodeType":"Block","src":"9477:37:0","statements":[{"expression":{"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":534,"name":"isclaimable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9488:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9502:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"9488:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":537,"nodeType":"ExpressionStatement","src":"9488:18:0"}]},"functionSelector":"ecbfc077","id":539,"implemented":true,"kind":"function","modifiers":[{"id":532,"kind":"modifierInvocation","modifierName":{"id":531,"name":"onlyOwner","nameLocations":["9467:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9467:9:0"},"nodeType":"ModifierInvocation","src":"9467:9:0"}],"name":"startClaim","nameLocation":"9445:10:0","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[],"src":"9455:2:0"},"returnParameters":{"id":533,"nodeType":"ParameterList","parameters":[],"src":"9477:0:0"},"scope":609,"src":"9436:78:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":548,"nodeType":"Block","src":"9562:38:0","statements":[{"expression":{"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":544,"name":"isclaimable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9573:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9587:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"9573:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":547,"nodeType":"ExpressionStatement","src":"9573:19:0"}]},"functionSelector":"ff6c9bc9","id":549,"implemented":true,"kind":"function","modifiers":[{"id":542,"kind":"modifierInvocation","modifierName":{"id":541,"name":"onlyOwner","nameLocations":["9552:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9552:9:0"},"nodeType":"ModifierInvocation","src":"9552:9:0"}],"name":"stopClaim","nameLocation":"9531:9:0","nodeType":"FunctionDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[],"src":"9540:2:0"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"9562:0:0"},"scope":609,"src":"9522:78:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":556,"nodeType":"Block","src":"9663:37:0","statements":[{"expression":{"id":554,"name":"isclaimable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9681:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":553,"id":555,"nodeType":"Return","src":"9674:18:0"}]},"functionSelector":"9b77c21a","id":557,"implemented":true,"kind":"function","modifiers":[],"name":"getClaimStatus","nameLocation":"9617:14:0","nodeType":"FunctionDefinition","parameters":{"id":550,"nodeType":"ParameterList","parameters":[],"src":"9631:2:0"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":557,"src":"9657:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":551,"name":"bool","nodeType":"ElementaryTypeName","src":"9657:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9656:6:0"},"scope":609,"src":"9608:92:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":565,"nodeType":"Block","src":"9727:82:0","statements":[{"expression":{"arguments":[{"id":560,"name":"isclaimable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9746:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436c61696d206973206e6f7420617661696c61626c65206e6f772e","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9759:29:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_e610dacd1fbbf576b3fc77c42d481597c238598abb3d788de1a30a482def37c7","typeString":"literal_string \"Claim is not available now.\""},"value":"Claim is not available now."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e610dacd1fbbf576b3fc77c42d481597c238598abb3d788de1a30a482def37c7","typeString":"literal_string \"Claim is not available now.\""}],"id":559,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9738:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9738:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":563,"nodeType":"ExpressionStatement","src":"9738:51:0"},{"id":564,"nodeType":"PlaceholderStatement","src":"9800:1:0"}]},"id":566,"name":"isClaim","nameLocation":"9717:7:0","nodeType":"ModifierDefinition","parameters":{"id":558,"nodeType":"ParameterList","parameters":[],"src":"9724:2:0"},"src":"9708:101:0","virtual":false,"visibility":"internal"},{"body":{"id":584,"nodeType":"Block","src":"9919:65:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":579,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"9960:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9960:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":581,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"9969:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":576,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"9937:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":575,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"9930:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$84_$","typeString":"type(contract IERC20)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9930:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$84","typeString":"contract IERC20"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9951:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":72,"src":"9930:29:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9930:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":583,"nodeType":"ExpressionStatement","src":"9930:46:0"}]},"functionSelector":"1698755f","id":585,"implemented":true,"kind":"function","modifiers":[{"id":573,"kind":"modifierInvocation","modifierName":{"id":572,"name":"onlyOwner","nameLocations":["9909:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9909:9:0"},"nodeType":"ModifierInvocation","src":"9909:9:0"}],"name":"claimToken","nameLocation":"9826:10:0","nodeType":"FunctionDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"tokenAddress","nameLocation":"9855:12:0","nodeType":"VariableDeclaration","scope":585,"src":"9847:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"9847:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"amount","nameLocation":"9886:6:0","nodeType":"VariableDeclaration","scope":585,"src":"9878:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"9878:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9836:63:0"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"9919:0:0"},"scope":609,"src":"9817:167:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":607,"nodeType":"Block","src":"10045:114:0","statements":[{"assignments":[593,null],"declarations":[{"constant":false,"id":593,"mutability":"mutable","name":"sent","nameLocation":"10062:4:0","nodeType":"VariableDeclaration","scope":607,"src":"10057:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":592,"name":"bool","nodeType":"ElementaryTypeName","src":"10057:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":601,"initialValue":{"arguments":[{"hexValue":"","id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10100:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":594,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"10072:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10072:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10080:4:0","memberName":"call","nodeType":"MemberAccess","src":"10072:12:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":597,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"10092:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"10072:27:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10072:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"10056:47:0"},{"expression":{"arguments":[{"id":603,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10122:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f2073656e64204574686572","id":604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10128:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""},"value":"Failed to send Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""}],"id":602,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10114:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10114:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":606,"nodeType":"ExpressionStatement","src":"10114:37:0"}]},"functionSelector":"fe96973a","id":608,"implemented":true,"kind":"function","modifiers":[{"id":590,"kind":"modifierInvocation","modifierName":{"id":589,"name":"onlyOwner","nameLocations":["10035:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"10035:9:0"},"nodeType":"ModifierInvocation","src":"10035:9:0"}],"name":"claimETH","nameLocation":"10001:8:0","nodeType":"FunctionDefinition","parameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"amount","nameLocation":"10018:6:0","nodeType":"VariableDeclaration","scope":608,"src":"10010:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":586,"name":"uint256","nodeType":"ElementaryTypeName","src":"10010:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10009:16:0"},"returnParameters":{"id":591,"nodeType":"ParameterList","parameters":[],"src":"10045:0:0"},"scope":609,"src":"9992:167:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":926,"src":"9366:796:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":610,"name":"Claimable","nameLocations":["10182:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":609,"src":"10182:9:0"},"id":611,"nodeType":"InheritanceSpecifier","src":"10182:9:0"}],"canonicalName":"IDO","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":925,"linearizedBaseContracts":[925,609,524,105],"name":"IDO","nameLocation":"10175:3:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":614,"libraryName":{"id":612,"name":"SafeMath","nameLocations":["10205:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"10205:8:0"},"nodeType":"UsingForDirective","src":"10199:27:0","typeName":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"10218:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"anonymous":false,"eventSelector":"e3d4187f6ca4248660cc0ac8b8056515bac4a8132be2eca31d6d0cc170722a7e","id":620,"name":"Buy","nameLocation":"10238:3:0","nodeType":"EventDefinition","parameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"10250:2:0","nodeType":"VariableDeclaration","scope":620,"src":"10242:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"10242:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":618,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"10262:6:0","nodeType":"VariableDeclaration","scope":620,"src":"10254:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":617,"name":"uint256","nodeType":"ElementaryTypeName","src":"10254:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10241:28:0"},"src":"10232:38:0"},{"anonymous":false,"eventSelector":"47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4","id":626,"name":"Claim","nameLocation":"10282:5:0","nodeType":"EventDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"10296:2:0","nodeType":"VariableDeclaration","scope":626,"src":"10288:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":621,"name":"address","nodeType":"ElementaryTypeName","src":"10288:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":624,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"10308:6:0","nodeType":"VariableDeclaration","scope":626,"src":"10300:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":623,"name":"uint256","nodeType":"ElementaryTypeName","src":"10300:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10287:28:0"},"src":"10276:40:0"},{"constant":false,"id":629,"mutability":"mutable","name":"hadcapUsd","nameLocation":"10330:9:0","nodeType":"VariableDeclaration","scope":925,"src":"10322:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"10322:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323030303030","id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10342:6:0","typeDescriptions":{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},"value":"200000"},"visibility":"internal"},{"constant":false,"id":632,"mutability":"mutable","name":"rewardAllocation","nameLocation":"10363:16:0","nodeType":"VariableDeclaration","scope":925,"src":"10355:36:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":630,"name":"uint256","nodeType":"ElementaryTypeName","src":"10355:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030303030303030","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10382:9:0","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"value":"100000000"},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"minUsdtAmount","nameLocation":"10406:13:0","nodeType":"VariableDeclaration","scope":925,"src":"10398:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":633,"name":"uint256","nodeType":"ElementaryTypeName","src":"10398:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10422:3:0","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"maxUsdtAmount","nameLocation":"10440:13:0","nodeType":"VariableDeclaration","scope":925,"src":"10432:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":636,"name":"uint256","nodeType":"ElementaryTypeName","src":"10432:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303030","id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10456:4:0","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"price","nameLocation":"10477:5:0","nodeType":"VariableDeclaration","scope":925,"src":"10469:13:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"10469:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"functionSelector":"78e97925","id":642,"mutability":"mutable","name":"startTime","nameLocation":"10504:9:0","nodeType":"VariableDeclaration","scope":925,"src":"10489:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"10489:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"68e453ed","id":644,"mutability":"mutable","name":"totalSaled","nameLocation":"10535:10:0","nodeType":"VariableDeclaration","scope":925,"src":"10520:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":643,"name":"uint256","nodeType":"ElementaryTypeName","src":"10520:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"dc13f7b5","id":646,"mutability":"mutable","name":"usdtTotalSaled","nameLocation":"10567:14:0","nodeType":"VariableDeclaration","scope":925,"src":"10552:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":645,"name":"uint256","nodeType":"ElementaryTypeName","src":"10552:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"db7b373e","id":649,"mutability":"mutable","name":"baseDecimal","nameLocation":"10605:11:0","nodeType":"VariableDeclaration","scope":925,"src":"10590:36:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"10590:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303030303030","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10619:7:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1000000"},"visibility":"public"},{"constant":false,"id":651,"mutability":"mutable","name":"rewardAddress","nameLocation":"10641:13:0","nodeType":"VariableDeclaration","scope":925,"src":"10633:21:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"10633:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"usdtAddress","nameLocation":"10669:11:0","nodeType":"VariableDeclaration","scope":925,"src":"10661:19:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"10661:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"functionSelector":"0660f1e8","id":657,"mutability":"mutable","name":"userRewards","nameLocation":"10724:11:0","nodeType":"VariableDeclaration","scope":925,"src":"10689:46:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":656,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"10697:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"10689:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":655,"name":"uint256","nodeType":"ElementaryTypeName","src":"10708:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"8092be4a","id":661,"mutability":"mutable","name":"userDeposited","nameLocation":"10777:13:0","nodeType":"VariableDeclaration","scope":925,"src":"10742:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":660,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":658,"name":"address","nodeType":"ElementaryTypeName","src":"10750:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"10742:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":659,"name":"uint256","nodeType":"ElementaryTypeName","src":"10761:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":695,"nodeType":"Block","src":"10855:215:0","statements":[{"expression":{"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":668,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"10866:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":669,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10878:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10884:9:0","memberName":"timestamp","nodeType":"MemberAccess","src":"10878:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10866:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":672,"nodeType":"ExpressionStatement","src":"10866:27:0"},{"expression":{"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":673,"name":"totalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"10904:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10917:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10904:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":676,"nodeType":"ExpressionStatement","src":"10904:14:0"},{"expression":{"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":677,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"10929:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":683,"name":"rewardAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"10967:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":678,"name":"hadcapUsd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"10938:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":679,"name":"baseDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"10950:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10938:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10937:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10963:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"10937:29:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10937:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10929:55:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":686,"nodeType":"ExpressionStatement","src":"10929:55:0"},{"expression":{"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":687,"name":"rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"10995:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":688,"name":"_rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"11011:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10995:30:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":690,"nodeType":"ExpressionStatement","src":"10995:30:0"},{"expression":{"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":691,"name":"usdtAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"11036:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":692,"name":"_usdtAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"11050:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11036:26:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":694,"nodeType":"ExpressionStatement","src":"11036:26:0"}]},"id":696,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"_rewardAddress","nameLocation":"10817:14:0","nodeType":"VariableDeclaration","scope":696,"src":"10809:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":662,"name":"address","nodeType":"ElementaryTypeName","src":"10809:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"_usdtAddress","nameLocation":"10841:12:0","nodeType":"VariableDeclaration","scope":696,"src":"10833:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":664,"name":"address","nodeType":"ElementaryTypeName","src":"10833:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10808:46:0"},"returnParameters":{"id":667,"nodeType":"ParameterList","parameters":[],"src":"10855:0:0"},"scope":925,"src":"10797:273:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":705,"nodeType":"Block","src":"11122:33:0","statements":[{"expression":{"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":701,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11133:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":702,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"11141:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11133:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":704,"nodeType":"ExpressionStatement","src":"11133:14:0"}]},"id":706,"implemented":true,"kind":"function","modifiers":[],"name":"resetPrice","nameLocation":"11087:10:0","nodeType":"FunctionDefinition","parameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"_price","nameLocation":"11106:6:0","nodeType":"VariableDeclaration","scope":706,"src":"11098:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":697,"name":"uint256","nodeType":"ElementaryTypeName","src":"11098:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11097:16:0"},"returnParameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"11122:0:0"},"scope":925,"src":"11078:77:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":716,"nodeType":"Block","src":"11206:46:0","statements":[{"expression":{"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":711,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"11217:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":712,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"11229:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11235:9:0","memberName":"timestamp","nodeType":"MemberAccess","src":"11229:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11217:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":715,"nodeType":"ExpressionStatement","src":"11217:27:0"}]},"functionSelector":"f42958be","id":717,"implemented":true,"kind":"function","modifiers":[{"id":709,"kind":"modifierInvocation","modifierName":{"id":708,"name":"onlyOwner","nameLocations":["11196:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"11196:9:0"},"nodeType":"ModifierInvocation","src":"11196:9:0"}],"name":"resetStartTime","nameLocation":"11172:14:0","nodeType":"FunctionDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[],"src":"11186:2:0"},"returnParameters":{"id":710,"nodeType":"ParameterList","parameters":[],"src":"11206:0:0"},"scope":925,"src":"11163:89:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":757,"nodeType":"Block","src":"11352:271:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":724,"name":"usdtTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"11402:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":725,"name":"hadcapUsd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"11419:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":726,"name":"baseDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"11431:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11419:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11402:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":742,"nodeType":"IfStatement","src":"11398:151:0","trueBody":{"id":741,"nodeType":"Block","src":"11444:105:0","statements":[{"expression":{"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":729,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11459:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":733,"name":"rewardAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"11488:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"id":730,"name":"usdtTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"11468:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":731,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11467:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11484:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"11467:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11467:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11459:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":736,"nodeType":"ExpressionStatement","src":"11459:46:0"},{"expression":{"arguments":[{"id":738,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11531:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":737,"name":"resetPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"11520:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11520:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":740,"nodeType":"ExpressionStatement","src":"11520:17:0"}]}},{"expression":{"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":743,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"11559:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":749,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11598:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":744,"name":"usdAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"11569:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":745,"name":"baseDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"11581:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11569:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":747,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11568:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11594:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"11568:29:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11568:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000000000_by_1","typeString":"int_const 1000000000000"},"id":753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11607:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3132","id":752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11613:2:0","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"11607:8:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000_by_1","typeString":"int_const 1000000000000"}},"src":"11568:47:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11559:56:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":756,"nodeType":"ExpressionStatement","src":"11559:56:0"}]},"functionSelector":"7b7902dd","id":758,"implemented":true,"kind":"function","modifiers":[],"name":"calcTokenAmount","nameLocation":"11269:15:0","nodeType":"FunctionDefinition","parameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"usdAmount","nameLocation":"11303:9:0","nodeType":"VariableDeclaration","scope":758,"src":"11295:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":718,"name":"uint256","nodeType":"ElementaryTypeName","src":"11295:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11284:35:0"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"amount","nameLocation":"11344:6:0","nodeType":"VariableDeclaration","scope":758,"src":"11336:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":721,"name":"uint256","nodeType":"ElementaryTypeName","src":"11336:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11335:16:0"},"scope":925,"src":"11260:363:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":849,"nodeType":"Block","src":"11696:784:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":766,"name":"maxUsdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"11729:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[{"id":775,"name":"baseDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"11791:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":767,"name":"userDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"11747:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":770,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":768,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"11761:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11761:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11747:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":771,"name":"usdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"11775:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11747:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":773,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11746:40:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11787:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"11746:44:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11746:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11729:74:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":786,"name":"baseDecimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"11869:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":778,"name":"userDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"11825:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":781,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":779,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"11839:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11839:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11825:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":782,"name":"usdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"11853:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11825:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":784,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11824:40:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11865:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"11824:44:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11824:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":788,"name":"minUsdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"11885:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11824:74:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11729:169:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7420697320616c6c6f77656420313030202d20313030302e","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11913:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_40dc50c84cbcc844454a966387aeed5c2a9d5bde5e4a7d21e64905464a44d2f7","typeString":"literal_string \"Amount is allowed 100 - 1000.\""},"value":"Amount is allowed 100 - 1000."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_40dc50c84cbcc844454a966387aeed5c2a9d5bde5e4a7d21e64905464a44d2f7","typeString":"literal_string \"Amount is allowed 100 - 1000.\""}],"id":765,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11707:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11707:248:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":793,"nodeType":"ExpressionStatement","src":"11707:248:0"},{"assignments":[795],"declarations":[{"constant":false,"id":795,"mutability":"mutable","name":"amount","nameLocation":"11974:6:0","nodeType":"VariableDeclaration","scope":849,"src":"11966:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"11966:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":799,"initialValue":{"arguments":[{"id":797,"name":"usdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"11999:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":796,"name":"calcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"11983:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) returns (uint256)"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11983:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11966:44:0"},{"expression":{"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":800,"name":"totalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"12021:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":801,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"12035:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12021:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":803,"nodeType":"ExpressionStatement","src":"12021:20:0"},{"expression":{"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":804,"name":"usdtTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"12052:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":805,"name":"usdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"12070:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12052:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":807,"nodeType":"ExpressionStatement","src":"12052:28:0"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":813,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12164:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12168:6:0","memberName":"sender","nodeType":"MemberAccess","src":"12164:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":817,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12201:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_IDO_$925","typeString":"contract IDO"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IDO_$925","typeString":"contract IDO"}],"id":816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12193:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":815,"name":"address","nodeType":"ElementaryTypeName","src":"12193:7:0","typeDescriptions":{}}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12193:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":819,"name":"usdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"12225:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":810,"name":"usdtAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"12120:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":809,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"12113:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$84_$","typeString":"type(contract IERC20)"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12113:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$84","typeString":"contract IERC20"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12133:12:0","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":83,"src":"12113:32:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12113:137:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6465706f736974206661696c6564","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12265:16:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_d6eafbe654279d4729befe2ed94b8be6d498d06d80c9f7a172c2be9df9d977ef","typeString":"literal_string \"deposit failed\""},"value":"deposit failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d6eafbe654279d4729befe2ed94b8be6d498d06d80c9f7a172c2be9df9d977ef","typeString":"literal_string \"deposit failed\""}],"id":808,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12091:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12091:201:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":823,"nodeType":"ExpressionStatement","src":"12091:201:0"},{"expression":{"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":824,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"12303:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":827,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":825,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"12315:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12315:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12303:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":828,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"12332:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12303:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":830,"nodeType":"ExpressionStatement","src":"12303:35:0"},{"expression":{"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":831,"name":"userDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"12349:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":834,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":832,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"12363:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12363:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12349:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":835,"name":"usdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"12380:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12349:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ExpressionStatement","src":"12349:41:0"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":842,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"12430:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12430:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":844,"name":"usdtAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"12439:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":839,"name":"usdtAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"12408:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":838,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"12401:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$84_$","typeString":"type(contract IERC20)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12401:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$84","typeString":"contract IERC20"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12421:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":72,"src":"12401:28:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12401:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":846,"nodeType":"ExpressionStatement","src":"12401:49:0"},{"expression":{"hexValue":"74727565","id":847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12468:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":764,"id":848,"nodeType":"Return","src":"12461:11:0"}]},"functionSelector":"a7c60160","id":850,"implemented":true,"kind":"function","modifiers":[],"name":"buyWithUSDT","nameLocation":"11640:11:0","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"usdtAmount","nameLocation":"11660:10:0","nodeType":"VariableDeclaration","scope":850,"src":"11652:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"11652:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11651:20:0"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":850,"src":"11690:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":762,"name":"bool","nodeType":"ElementaryTypeName","src":"11690:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11689:6:0"},"scope":925,"src":"11631:849:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":891,"nodeType":"Block","src":"12523:259:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":854,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"12542:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":857,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":855,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"12554:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12554:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12542:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12571:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12542:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c656173652062757920746f6b656e2e","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12574:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908","typeString":"literal_string \"Please buy token.\""},"value":"Please buy token."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908","typeString":"literal_string \"Please buy token.\""}],"id":853,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12534:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12534:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":862,"nodeType":"ExpressionStatement","src":"12534:60:0"},{"expression":{"arguments":[{"expression":{"id":867,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12636:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12640:6:0","memberName":"sender","nodeType":"MemberAccess","src":"12636:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":869,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"12648:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":872,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":870,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"12660:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12660:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12648:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":864,"name":"rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"12612:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":863,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"12605:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$84_$","typeString":"type(contract IERC20)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12605:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$84","typeString":"contract IERC20"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12627:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":72,"src":"12605:30:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12605:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":874,"nodeType":"ExpressionStatement","src":"12605:69:0"},{"expression":{"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":875,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"12685:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":878,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":876,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"12697:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12697:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12685:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12713:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12685:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":881,"nodeType":"ExpressionStatement","src":"12685:29:0"},{"eventCall":{"arguments":[{"expression":{"id":883,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12736:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12740:6:0","memberName":"sender","nodeType":"MemberAccess","src":"12736:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":885,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"12748:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":888,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":886,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"12760:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12760:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12748:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":882,"name":"Claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"12730:5:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12730:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":890,"nodeType":"EmitStatement","src":"12725:49:0"}]},"functionSelector":"afd18916","id":892,"implemented":true,"kind":"function","modifiers":[],"name":"claimRewardToken","nameLocation":"12497:16:0","nodeType":"FunctionDefinition","parameters":{"id":851,"nodeType":"ParameterList","parameters":[],"src":"12513:2:0"},"returnParameters":{"id":852,"nodeType":"ParameterList","parameters":[],"src":"12523:0:0"},"scope":925,"src":"12488:294:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":905,"nodeType":"Block","src":"12893:57:0","statements":[{"expression":{"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":899,"name":"claimAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"12904:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":900,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"12918:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":902,"indexExpression":{"id":901,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"12930:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12918:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12904:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":904,"nodeType":"ExpressionStatement","src":"12904:38:0"}]},"functionSelector":"dde070e8","id":906,"implemented":true,"kind":"function","modifiers":[],"name":"getClaimAmount","nameLocation":"12799:14:0","nodeType":"FunctionDefinition","parameters":{"id":895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":894,"mutability":"mutable","name":"userAddress","nameLocation":"12832:11:0","nodeType":"VariableDeclaration","scope":906,"src":"12824:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":893,"name":"address","nodeType":"ElementaryTypeName","src":"12824:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12813:37:0"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"claimAmount","nameLocation":"12880:11:0","nodeType":"VariableDeclaration","scope":906,"src":"12872:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"12872:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12871:21:0"},"scope":925,"src":"12790:160:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":915,"nodeType":"Block","src":"13019:37:0","statements":[{"expression":{"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":911,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"13030:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":912,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"13043:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13030:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":914,"nodeType":"ExpressionStatement","src":"13030:18:0"}]},"functionSelector":"98d5fdca","id":916,"implemented":true,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"12967:8:0","nodeType":"FunctionDefinition","parameters":{"id":907,"nodeType":"ParameterList","parameters":[],"src":"12975:2:0"},"returnParameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"tokenPrice","nameLocation":"13007:10:0","nodeType":"VariableDeclaration","scope":916,"src":"12999:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":908,"name":"uint256","nodeType":"ElementaryTypeName","src":"12999:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12998:20:0"},"scope":925,"src":"12958:98:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":919,"nodeType":"Block","src":"13091:2:0","statements":[]},"id":920,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[],"src":"13071:2:0"},"returnParameters":{"id":918,"nodeType":"ParameterList","parameters":[],"src":"13091:0:0"},"scope":925,"src":"13064:29:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":923,"nodeType":"Block","src":"13129:2:0","statements":[]},"id":924,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":921,"nodeType":"ParameterList","parameters":[],"src":"13109:2:0"},"returnParameters":{"id":922,"nodeType":"ParameterList","parameters":[],"src":"13129:0:0"},"scope":925,"src":"13101:30:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":926,"src":"10166:2968:0","usedErrors":[]}],"src":"39:13097:0"},"id":0}},"contracts":{"contracts/IDO.sol":{"Claimable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stopClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_445":{"entryPoint":null,"id":445,"parameterSlots":0,"returnSlots":0},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60806040526000805460ff60a01b1916905534801561001d57600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061059f8061006e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ecbfc0771161005b578063ecbfc077146100e7578063f2fde38b146100ef578063fe96973a14610102578063ff6c9bc91461011557600080fd5b80631698755f1461008d578063715018a6146100a25780638da5cb5b146100aa5780639b77c21a146100ca575b600080fd5b6100a061009b3660046104ad565b61011d565b005b6100a06101e7565b6000546040516001600160a01b0390911681526020015b60405180910390f35b600054600160a01b900460ff1660405190151581526020016100c1565b6100a061025b565b6100a06100fd3660046104d7565b61029a565b6100a06101103660046104f9565b6102d0565b6100a0610398565b6000546001600160a01b031633146101505760405162461bcd60e51b815260040161014790610512565b60405180910390fd5b816001600160a01b031663a9059cbb6101716000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156101be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e29190610547565b505050565b6000546001600160a01b031633146102115760405162461bcd60e51b815260040161014790610512565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102855760405162461bcd60e51b815260040161014790610512565b6000805460ff60a01b1916600160a01b179055565b6000546001600160a01b031633146102c45760405162461bcd60e51b815260040161014790610512565b6102cd816103d1565b50565b6000546001600160a01b031633146102fa5760405162461bcd60e51b815260040161014790610512565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610347576040519150601f19603f3d011682016040523d82523d6000602084013e61034c565b606091505b50509050806103945760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610147565b5050565b6000546001600160a01b031633146103c25760405162461bcd60e51b815260040161014790610512565b6000805460ff60a01b19169055565b6001600160a01b0381166104365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610147565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b03811681146104a857600080fd5b919050565b600080604083850312156104c057600080fd5b6104c983610491565b946020939093013593505050565b6000602082840312156104e957600080fd5b6104f282610491565b9392505050565b60006020828403121561050b57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561055957600080fd5b815180151581146104f257600080fdfea26469706673582212203c22d9825d64acb1ed48ca79f5737b1b79df005793520793fb492824d09907ef64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0x59F DUP1 PUSH2 0x6E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xECBFC077 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xECBFC077 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xFF6C9BC9 EQ PUSH2 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1698755F EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x9B77C21A EQ PUSH2 0xCA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x4AD JUMP JUMPDEST PUSH2 0x11D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC1 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x25B JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x29A JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x110 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F9 JUMP JUMPDEST PUSH2 0x2D0 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x398 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x171 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x547 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH2 0x2CD DUP2 PUSH2 0x3D1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x347 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x34C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x394 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x147 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x436 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x147 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C9 DUP4 PUSH2 0x491 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F2 DUP3 PUSH2 0x491 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY 0x22 0xD9 DUP3 0x5D PUSH5 0xACB1ED48CA PUSH26 0xF5737B1B79DF005793520793FB492824D09907EF64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"9366:796:0:-:0;;;9422:5;9403:24;;-1:-1:-1;;;;9403:24:0;;;9366:796;;;;;;;;;-1:-1:-1;8478:17:0;8521:18;;-1:-1:-1;;;;;;8521:18:0;1330:10;8521:18;;;;;8555:43;;1330:10;;;;8555:43;;8478:17;;8555:43;8467:139;9366:796;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_523":{"entryPoint":977,"id":523,"parameterSlots":1,"returnSlots":0},"@claimETH_608":{"entryPoint":720,"id":608,"parameterSlots":1,"returnSlots":0},"@claimToken_585":{"entryPoint":285,"id":585,"parameterSlots":2,"returnSlots":0},"@getClaimStatus_557":{"entryPoint":null,"id":557,"parameterSlots":0,"returnSlots":1},"@owner_453":{"entryPoint":null,"id":453,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_486":{"entryPoint":487,"id":486,"parameterSlots":0,"returnSlots":0},"@startClaim_539":{"entryPoint":603,"id":539,"parameterSlots":0,"returnSlots":0},"@stopClaim_549":{"entryPoint":920,"id":549,"parameterSlots":0,"returnSlots":0},"@transferOwnership_498":{"entryPoint":666,"id":498,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":1169,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1239,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1197,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1351,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1273,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1298,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3112:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:1","statements":[{"nodeType":"YulAssignment","src":"73:29:1","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:1"},"nodeType":"YulFunctionCall","src":"82:20:1"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:1"}]},{"body":{"nodeType":"YulBlock","src":"165:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:1"},"nodeType":"YulFunctionCall","src":"167:12:1"},"nodeType":"YulExpressionStatement","src":"167:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:1"},"nodeType":"YulFunctionCall","src":"146:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:1"},"nodeType":"YulFunctionCall","src":"142:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:1"},"nodeType":"YulFunctionCall","src":"131:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:1"},"nodeType":"YulFunctionCall","src":"121:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:1"},"nodeType":"YulFunctionCall","src":"114:50:1"},"nodeType":"YulIf","src":"111:70:1"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:1","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:1","type":""}],"src":"14:173:1"},{"body":{"nodeType":"YulBlock","src":"279:167:1","statements":[{"body":{"nodeType":"YulBlock","src":"325:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:1"},"nodeType":"YulFunctionCall","src":"327:12:1"},"nodeType":"YulExpressionStatement","src":"327:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:1"},"nodeType":"YulFunctionCall","src":"296:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:1"},"nodeType":"YulFunctionCall","src":"292:32:1"},"nodeType":"YulIf","src":"289:52:1"},{"nodeType":"YulAssignment","src":"350:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"360:18:1"},"nodeType":"YulFunctionCall","src":"360:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"350:6:1"}]},{"nodeType":"YulAssignment","src":"398:42:1","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:1"},"nodeType":"YulFunctionCall","src":"421:18:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:1"},"nodeType":"YulFunctionCall","src":"408:32:1"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"398:6:1"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"237:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"248:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"260:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"268:6:1","type":""}],"src":"192:254:1"},{"body":{"nodeType":"YulBlock","src":"552:102:1","statements":[{"nodeType":"YulAssignment","src":"562:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"574:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"585:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"570:3:1"},"nodeType":"YulFunctionCall","src":"570:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"562:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"604:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"619:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"635:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"640:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"631:3:1"},"nodeType":"YulFunctionCall","src":"631:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"644:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"627:3:1"},"nodeType":"YulFunctionCall","src":"627:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"615:3:1"},"nodeType":"YulFunctionCall","src":"615:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:1"},"nodeType":"YulFunctionCall","src":"597:51:1"},"nodeType":"YulExpressionStatement","src":"597:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"521:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"532:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"543:4:1","type":""}],"src":"451:203:1"},{"body":{"nodeType":"YulBlock","src":"754:92:1","statements":[{"nodeType":"YulAssignment","src":"764:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"776:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"787:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"772:3:1"},"nodeType":"YulFunctionCall","src":"772:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"764:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"806:9:1"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"831:6:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"824:6:1"},"nodeType":"YulFunctionCall","src":"824:14:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"817:6:1"},"nodeType":"YulFunctionCall","src":"817:22:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"799:6:1"},"nodeType":"YulFunctionCall","src":"799:41:1"},"nodeType":"YulExpressionStatement","src":"799:41:1"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"723:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"734:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"745:4:1","type":""}],"src":"659:187:1"},{"body":{"nodeType":"YulBlock","src":"921:116:1","statements":[{"body":{"nodeType":"YulBlock","src":"967:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"976:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"979:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"969:6:1"},"nodeType":"YulFunctionCall","src":"969:12:1"},"nodeType":"YulExpressionStatement","src":"969:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"942:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"951:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"938:3:1"},"nodeType":"YulFunctionCall","src":"938:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"963:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"934:3:1"},"nodeType":"YulFunctionCall","src":"934:32:1"},"nodeType":"YulIf","src":"931:52:1"},{"nodeType":"YulAssignment","src":"992:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1021:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1002:18:1"},"nodeType":"YulFunctionCall","src":"1002:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"992:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"887:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"898:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"910:6:1","type":""}],"src":"851:186:1"},{"body":{"nodeType":"YulBlock","src":"1112:110:1","statements":[{"body":{"nodeType":"YulBlock","src":"1158:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1167:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1170:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1160:6:1"},"nodeType":"YulFunctionCall","src":"1160:12:1"},"nodeType":"YulExpressionStatement","src":"1160:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1133:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"1142:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1129:3:1"},"nodeType":"YulFunctionCall","src":"1129:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"1154:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1125:3:1"},"nodeType":"YulFunctionCall","src":"1125:32:1"},"nodeType":"YulIf","src":"1122:52:1"},{"nodeType":"YulAssignment","src":"1183:33:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1206:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1193:12:1"},"nodeType":"YulFunctionCall","src":"1193:23:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1183:6:1"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1078:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1089:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1101:6:1","type":""}],"src":"1042:180:1"},{"body":{"nodeType":"YulBlock","src":"1401:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1418:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1429:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1411:6:1"},"nodeType":"YulFunctionCall","src":"1411:21:1"},"nodeType":"YulExpressionStatement","src":"1411:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1452:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1463:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1448:3:1"},"nodeType":"YulFunctionCall","src":"1448:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"1468:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1441:6:1"},"nodeType":"YulFunctionCall","src":"1441:30:1"},"nodeType":"YulExpressionStatement","src":"1441:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1502:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:1"},"nodeType":"YulFunctionCall","src":"1487:18:1"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1507:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1480:6:1"},"nodeType":"YulFunctionCall","src":"1480:62:1"},"nodeType":"YulExpressionStatement","src":"1480:62:1"},{"nodeType":"YulAssignment","src":"1551:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1563:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1574:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1559:3:1"},"nodeType":"YulFunctionCall","src":"1559:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1551:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1378:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1392:4:1","type":""}],"src":"1227:356:1"},{"body":{"nodeType":"YulBlock","src":"1717:145:1","statements":[{"nodeType":"YulAssignment","src":"1727:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1739:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1750:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1735:3:1"},"nodeType":"YulFunctionCall","src":"1735:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1727:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1769:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1784:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1800:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1805:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1796:3:1"},"nodeType":"YulFunctionCall","src":"1796:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"1809:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1792:3:1"},"nodeType":"YulFunctionCall","src":"1792:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1780:3:1"},"nodeType":"YulFunctionCall","src":"1780:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1762:6:1"},"nodeType":"YulFunctionCall","src":"1762:51:1"},"nodeType":"YulExpressionStatement","src":"1762:51:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1833:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1844:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1829:3:1"},"nodeType":"YulFunctionCall","src":"1829:18:1"},{"name":"value1","nodeType":"YulIdentifier","src":"1849:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1822:6:1"},"nodeType":"YulFunctionCall","src":"1822:34:1"},"nodeType":"YulExpressionStatement","src":"1822:34:1"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1678:9:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1689:6:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1697:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1708:4:1","type":""}],"src":"1588:274:1"},{"body":{"nodeType":"YulBlock","src":"1945:199:1","statements":[{"body":{"nodeType":"YulBlock","src":"1991:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2000:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2003:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1993:6:1"},"nodeType":"YulFunctionCall","src":"1993:12:1"},"nodeType":"YulExpressionStatement","src":"1993:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1966:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"1975:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1962:3:1"},"nodeType":"YulFunctionCall","src":"1962:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"1987:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1958:3:1"},"nodeType":"YulFunctionCall","src":"1958:32:1"},"nodeType":"YulIf","src":"1955:52:1"},{"nodeType":"YulVariableDeclaration","src":"2016:29:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2035:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2029:5:1"},"nodeType":"YulFunctionCall","src":"2029:16:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2020:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"2098:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2107:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2110:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2100:6:1"},"nodeType":"YulFunctionCall","src":"2100:12:1"},"nodeType":"YulExpressionStatement","src":"2100:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2067:5:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2088:5:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2081:6:1"},"nodeType":"YulFunctionCall","src":"2081:13:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2074:6:1"},"nodeType":"YulFunctionCall","src":"2074:21:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2064:2:1"},"nodeType":"YulFunctionCall","src":"2064:32:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2057:6:1"},"nodeType":"YulFunctionCall","src":"2057:40:1"},"nodeType":"YulIf","src":"2054:60:1"},{"nodeType":"YulAssignment","src":"2123:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"2133:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:1"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1911:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1922:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1934:6:1","type":""}],"src":"1867:277:1"},{"body":{"nodeType":"YulBlock","src":"2340:14:1","statements":[{"nodeType":"YulAssignment","src":"2342:10:1","value":{"name":"pos","nodeType":"YulIdentifier","src":"2349:3:1"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2342:3:1"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2324:3:1","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2332:3:1","type":""}],"src":"2149:205:1"},{"body":{"nodeType":"YulBlock","src":"2533:170:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2550:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2561:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2543:6:1"},"nodeType":"YulFunctionCall","src":"2543:21:1"},"nodeType":"YulExpressionStatement","src":"2543:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2584:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2595:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2580:3:1"},"nodeType":"YulFunctionCall","src":"2580:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2600:2:1","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2573:6:1"},"nodeType":"YulFunctionCall","src":"2573:30:1"},"nodeType":"YulExpressionStatement","src":"2573:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2623:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2634:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2619:3:1"},"nodeType":"YulFunctionCall","src":"2619:18:1"},{"hexValue":"4661696c656420746f2073656e64204574686572","kind":"string","nodeType":"YulLiteral","src":"2639:22:1","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2612:6:1"},"nodeType":"YulFunctionCall","src":"2612:50:1"},"nodeType":"YulExpressionStatement","src":"2612:50:1"},{"nodeType":"YulAssignment","src":"2671:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2683:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2694:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2679:3:1"},"nodeType":"YulFunctionCall","src":"2679:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2671:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2510:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2524:4:1","type":""}],"src":"2359:344:1"},{"body":{"nodeType":"YulBlock","src":"2882:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2899:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2910:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2892:6:1"},"nodeType":"YulFunctionCall","src":"2892:21:1"},"nodeType":"YulExpressionStatement","src":"2892:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2933:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2944:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2929:3:1"},"nodeType":"YulFunctionCall","src":"2929:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2949:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2922:6:1"},"nodeType":"YulFunctionCall","src":"2922:30:1"},"nodeType":"YulExpressionStatement","src":"2922:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2972:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2983:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2968:3:1"},"nodeType":"YulFunctionCall","src":"2968:18:1"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"2988:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2961:6:1"},"nodeType":"YulFunctionCall","src":"2961:62:1"},"nodeType":"YulExpressionStatement","src":"2961:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3043:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3054:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3039:3:1"},"nodeType":"YulFunctionCall","src":"3039:18:1"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"3059:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3032:6:1"},"nodeType":"YulFunctionCall","src":"3032:36:1"},"nodeType":"YulExpressionStatement","src":"3032:36:1"},{"nodeType":"YulAssignment","src":"3077:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3089:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3100:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3085:3:1"},"nodeType":"YulFunctionCall","src":"3085:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3077:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2859:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2873:4:1","type":""}],"src":"2708:402:1"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c8063ecbfc0771161005b578063ecbfc077146100e7578063f2fde38b146100ef578063fe96973a14610102578063ff6c9bc91461011557600080fd5b80631698755f1461008d578063715018a6146100a25780638da5cb5b146100aa5780639b77c21a146100ca575b600080fd5b6100a061009b3660046104ad565b61011d565b005b6100a06101e7565b6000546040516001600160a01b0390911681526020015b60405180910390f35b600054600160a01b900460ff1660405190151581526020016100c1565b6100a061025b565b6100a06100fd3660046104d7565b61029a565b6100a06101103660046104f9565b6102d0565b6100a0610398565b6000546001600160a01b031633146101505760405162461bcd60e51b815260040161014790610512565b60405180910390fd5b816001600160a01b031663a9059cbb6101716000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156101be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e29190610547565b505050565b6000546001600160a01b031633146102115760405162461bcd60e51b815260040161014790610512565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102855760405162461bcd60e51b815260040161014790610512565b6000805460ff60a01b1916600160a01b179055565b6000546001600160a01b031633146102c45760405162461bcd60e51b815260040161014790610512565b6102cd816103d1565b50565b6000546001600160a01b031633146102fa5760405162461bcd60e51b815260040161014790610512565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610347576040519150601f19603f3d011682016040523d82523d6000602084013e61034c565b606091505b50509050806103945760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610147565b5050565b6000546001600160a01b031633146103c25760405162461bcd60e51b815260040161014790610512565b6000805460ff60a01b19169055565b6001600160a01b0381166104365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610147565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b03811681146104a857600080fd5b919050565b600080604083850312156104c057600080fd5b6104c983610491565b946020939093013593505050565b6000602082840312156104e957600080fd5b6104f282610491565b9392505050565b60006020828403121561050b57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561055957600080fd5b815180151581146104f257600080fdfea26469706673582212203c22d9825d64acb1ed48ca79f5737b1b79df005793520793fb492824d09907ef64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xECBFC077 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xECBFC077 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xFF6C9BC9 EQ PUSH2 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1698755F EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x9B77C21A EQ PUSH2 0xCA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x4AD JUMP JUMPDEST PUSH2 0x11D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC1 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x25B JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x29A JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x110 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F9 JUMP JUMPDEST PUSH2 0x2D0 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x398 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x171 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x547 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH2 0x2CD DUP2 PUSH2 0x3D1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x347 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x34C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x394 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x147 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x147 SWAP1 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x436 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x147 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C9 DUP4 PUSH2 0x491 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F2 DUP3 PUSH2 0x491 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY 0x22 0xD9 DUP3 0x5D PUSH5 0xACB1ED48CA PUSH26 0xF5737B1B79DF005793520793FB492824D09907EF64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"9366:796:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9817:167;;;;;;:::i;:::-;;:::i;:::-;;8828:140;;;:::i;8614:79::-;8652:7;8679:6;8614:79;;-1:-1:-1;;;;;8679:6:0;;;597:51:1;;585:2;570:18;8614:79:0;;;;;;;;9608:92;9657:4;9681:11;-1:-1:-1;;;9681:11:0;;;;9608:92;;824:14:1;;817:22;799:41;;787:2;772:18;9608:92:0;659:187:1;9436:78:0;;;:::i;8976:109::-;;;;;;:::i;:::-;;:::i;9992:167::-;;;;;;:::i;:::-;;:::i;9522:78::-;;;:::i;9817:167::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;;;;;;;;;9937:12:::1;-1:-1:-1::0;;;;;9930:29:0::1;;9960:7;8652::::0;8679:6;-1:-1:-1;;;;;8679:6:0;;8614:79;9960:7:::1;9930:46;::::0;-1:-1:-1;;;;;;9930:46:0::1;::::0;;;;;;-1:-1:-1;;;;;1780:32:1;;;9930:46:0::1;::::0;::::1;1762:51:1::0;1829:18;;;1822:34;;;1735:18;;9930:46:0::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9817:167:::0;;:::o;8828:140::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;8927:1:::1;8911:6:::0;;8890:40:::1;::::0;-1:-1:-1;;;;;8911:6:0;;::::1;::::0;8890:40:::1;::::0;8927:1;;8890:40:::1;8958:1;8941:19:::0;;-1:-1:-1;;;;;;8941:19:0::1;::::0;;8828:140::o;9436:78::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;9488:11:::1;:18:::0;;-1:-1:-1;;;;9488:18:0::1;-1:-1:-1::0;;;9488:18:0::1;::::0;;9436:78::o;8976:109::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;9049:28:::1;9068:8;9049:18;:28::i;:::-;8976:109:::0;:::o;9992:167::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;10057:9:::1;8679:6:::0;;10072:31:::1;::::0;-1:-1:-1;;;;;8679:6:0;;;;10092;;10057:9;10072:31;10057:9;10072:31;10092:6;8679;10072:31:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10056:47;;;10122:4;10114:37;;;::::0;-1:-1:-1;;;10114:37:0;;2561:2:1;10114:37:0::1;::::0;::::1;2543:21:1::0;2600:2;2580:18;;;2573:30;-1:-1:-1;;;2619:18:1;;;2612:50;2679:18;;10114:37:0::1;2359:344:1::0;10114:37:0::1;10045:114;9992:167:::0;:::o;9522:78::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;9587:5:::1;9573:19:::0;;-1:-1:-1;;;;9573:19:0::1;::::0;;9522:78::o;9093:266::-;-1:-1:-1;;;;;9181:22:0;;9159:110;;;;-1:-1:-1;;;9159:110:0;;2910:2:1;9159:110:0;;;2892:21:1;2949:2;2929:18;;;2922:30;2988:34;2968:18;;;2961:62;-1:-1:-1;;;3039:18:1;;;3032:36;3085:19;;9159:110:0;2708:402:1;9159:110:0;9306:6;;;9285:38;;-1:-1:-1;;;;;9285:38:0;;;;9306:6;;;9285:38;;;9334:6;:17;;-1:-1:-1;;;;;;9334:17:0;-1:-1:-1;;;;;9334:17:0;;;;;;;;;;9093:266::o;14:173:1:-;82:20;;-1:-1:-1;;;;;131:31:1;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:1:o;851:186::-;910:6;963:2;951:9;942:7;938:23;934:32;931:52;;;979:1;976;969:12;931:52;1002:29;1021:9;1002:29;:::i;:::-;992:39;851:186;-1:-1:-1;;;851:186:1:o;1042:180::-;1101:6;1154:2;1142:9;1133:7;1129:23;1125:32;1122:52;;;1170:1;1167;1160:12;1122:52;-1:-1:-1;1193:23:1;;1042:180;-1:-1:-1;1042:180:1:o;1227:356::-;1429:2;1411:21;;;1448:18;;;1441:30;1507:34;1502:2;1487:18;;1480:62;1574:2;1559:18;;1227:356::o;1867:277::-;1934:6;1987:2;1975:9;1966:7;1962:23;1958:32;1955:52;;;2003:1;2000;1993:12;1955:52;2035:9;2029:16;2088:5;2081:13;2074:21;2067:5;2064:32;2054:60;;2110:1;2107;2100:12"},"gasEstimates":{"creation":{"codeDepositCost":"287800","executionCost":"50321","totalCost":"338121"},"external":{"claimETH(uint256)":"infinite","claimToken(address,uint256)":"infinite","getClaimStatus()":"2376","owner()":"2335","renounceOwnership()":"30188","startClaim()":"26520","stopClaim()":"26574","transferOwnership(address)":"30451"}},"methodIdentifiers":{"claimETH(uint256)":"fe96973a","claimToken(address,uint256)":"1698755f","getClaimStatus()":"9b77c21a","owner()":"8da5cb5b","renounceOwnership()":"715018a6","startClaim()":"ecbfc077","stopClaim()":"ff6c9bc9","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"Claimable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    bool isclaimable = false;\\r\\n\\r\\n    function startClaim() external onlyOwner {\\r\\n        isclaimable = true;\\r\\n    }\\r\\n\\r\\n    function stopClaim() external onlyOwner {\\r\\n        isclaimable = false;\\r\\n    }\\r\\n\\r\\n    function getClaimStatus() external view returns (bool) {\\r\\n        return isclaimable;\\r\\n    }\\r\\n\\r\\n    modifier isClaim() {\\r\\n        require(isclaimable, \\\"Claim is not available now.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    uint256 hadcapUsd = 200000;\\r\\n    uint256 rewardAllocation = 100000000;\\r\\n    uint256 minUsdtAmount = 100;\\r\\n    uint256 maxUsdtAmount = 1000;\\r\\n\\r\\n    uint256 price;\\r\\n    uint256 public startTime;\\r\\n    uint256 public totalSaled;\\r\\n    uint256 public usdtTotalSaled;\\r\\n\\r\\n    uint256 public baseDecimal = 1000000;\\r\\n    address rewardAddress;\\r\\n    address usdtAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n    constructor(address _rewardAddress, address _usdtAddress) {\\r\\n        startTime = block.timestamp;\\r\\n        totalSaled = 0;\\r\\n        price = (hadcapUsd * baseDecimal).div(rewardAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        usdtAddress = _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function resetPrice(uint256 _price) private {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function resetStartTime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function calcTokenAmount(\\r\\n        uint256 usdAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price again.\\r\\n        if (usdtTotalSaled > hadcapUsd * baseDecimal) {\\r\\n            price = (usdtTotalSaled).div(rewardAllocation);\\r\\n            resetPrice(price);\\r\\n        }\\r\\n        amount = (usdAmount * baseDecimal).div(price) * 10 ** 12;\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint256 usdtAmount) external returns (bool) {\\r\\n        require(\\r\\n            maxUsdtAmount >= (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) &&\\r\\n                (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) >= minUsdtAmount,\\r\\n            \\\"Amount is allowed 100 - 1000.\\\"\\r\\n        );\\r\\n        uint256 amount = calcTokenAmount(usdtAmount);\\r\\n        totalSaled += amount;\\r\\n        usdtTotalSaled += usdtAmount;\\r\\n        require(\\r\\n            IERC20(usdtAddress).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                usdtAmount\\r\\n            ),\\r\\n            \\\"deposit failed\\\"\\r\\n        );\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += usdtAmount;\\r\\n        IERC20(usdtAddress).transfer(owner(), usdtAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 tokenPrice) {\\r\\n        tokenPrice = price;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xa84776e8cfb8258bb4b5f650febf1f29d18a615a37383a5c301b1fae1b9fc037\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/IDO.sol:Claimable","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":529,"contract":"contracts/IDO.sol:Claimable","label":"isclaimable","offset":20,"slot":"0","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"Context":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220259efd5d60425a3fccd1360f18e7c7007cd6f775414f47b321ea8fb473e8c22764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 SWAP15 REVERT 0x5D PUSH1 0x42 GAS EXTCODEHASH 0xCC 0xD1 CALLDATASIZE 0xF XOR 0xE7 0xC7 STOP PUSH29 0xD6F775414F47B321EA8FB473E8C22764736F6C63430008120033000000 ","sourceMap":"1078:506:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220259efd5d60425a3fccd1360f18e7c7007cd6f775414f47b321ea8fb473e8c22764736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 SWAP15 REVERT 0x5D PUSH1 0x42 GAS EXTCODEHASH 0xCC 0xD1 CALLDATASIZE 0xF XOR 0xE7 0xC7 STOP PUSH29 0xD6F775414F47B321EA8FB473E8C22764736F6C63430008120033000000 ","sourceMap":"1078:506:0:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    bool isclaimable = false;\\r\\n\\r\\n    function startClaim() external onlyOwner {\\r\\n        isclaimable = true;\\r\\n    }\\r\\n\\r\\n    function stopClaim() external onlyOwner {\\r\\n        isclaimable = false;\\r\\n    }\\r\\n\\r\\n    function getClaimStatus() external view returns (bool) {\\r\\n        return isclaimable;\\r\\n    }\\r\\n\\r\\n    modifier isClaim() {\\r\\n        require(isclaimable, \\\"Claim is not available now.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    uint256 hadcapUsd = 200000;\\r\\n    uint256 rewardAllocation = 100000000;\\r\\n    uint256 minUsdtAmount = 100;\\r\\n    uint256 maxUsdtAmount = 1000;\\r\\n\\r\\n    uint256 price;\\r\\n    uint256 public startTime;\\r\\n    uint256 public totalSaled;\\r\\n    uint256 public usdtTotalSaled;\\r\\n\\r\\n    uint256 public baseDecimal = 1000000;\\r\\n    address rewardAddress;\\r\\n    address usdtAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n    constructor(address _rewardAddress, address _usdtAddress) {\\r\\n        startTime = block.timestamp;\\r\\n        totalSaled = 0;\\r\\n        price = (hadcapUsd * baseDecimal).div(rewardAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        usdtAddress = _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function resetPrice(uint256 _price) private {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function resetStartTime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function calcTokenAmount(\\r\\n        uint256 usdAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price again.\\r\\n        if (usdtTotalSaled > hadcapUsd * baseDecimal) {\\r\\n            price = (usdtTotalSaled).div(rewardAllocation);\\r\\n            resetPrice(price);\\r\\n        }\\r\\n        amount = (usdAmount * baseDecimal).div(price) * 10 ** 12;\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint256 usdtAmount) external returns (bool) {\\r\\n        require(\\r\\n            maxUsdtAmount >= (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) &&\\r\\n                (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) >= minUsdtAmount,\\r\\n            \\\"Amount is allowed 100 - 1000.\\\"\\r\\n        );\\r\\n        uint256 amount = calcTokenAmount(usdtAmount);\\r\\n        totalSaled += amount;\\r\\n        usdtTotalSaled += usdtAmount;\\r\\n        require(\\r\\n            IERC20(usdtAddress).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                usdtAmount\\r\\n            ),\\r\\n            \\\"deposit failed\\\"\\r\\n        );\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += usdtAmount;\\r\\n        IERC20(usdtAddress).transfer(owner(), usdtAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 tokenPrice) {\\r\\n        tokenPrice = price;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xa84776e8cfb8258bb4b5f650febf1f29d18a615a37383a5c301b1fae1b9fc037\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IDO":{"abi":[{"inputs":[{"internalType":"address","name":"_rewardAddress","type":"address"},{"internalType":"address","name":"_usdtAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Buy","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"baseDecimal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"usdtAmount","type":"uint256"}],"name":"buyWithUSDT","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"usdAmount","type":"uint256"}],"name":"calcTokenAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimRewardToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getClaimAmount","outputs":[{"internalType":"uint256","name":"claimAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"tokenPrice","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"resetStartTime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stopClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSaled","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"usdtTotalSaled","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userDeposited","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_445":{"entryPoint":null,"id":445,"parameterSlots":0,"returnSlots":0},"@_696":{"entryPoint":null,"id":696,"parameterSlots":2,"returnSlots":0},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@div_323":{"entryPoint":262,"id":323,"parameterSlots":2,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":283,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":311,"id":null,"parameterSlots":2,"returnSlots":2},"checked_div_t_uint256":{"entryPoint":399,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":362,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:983:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:1","statements":[{"nodeType":"YulAssignment","src":"84:22:1","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:1"},"nodeType":"YulFunctionCall","src":"93:13:1"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:1"}]},{"body":{"nodeType":"YulBlock","src":"169:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:1"},"nodeType":"YulFunctionCall","src":"171:12:1"},"nodeType":"YulExpressionStatement","src":"171:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:1"},"nodeType":"YulFunctionCall","src":"150:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:1"},"nodeType":"YulFunctionCall","src":"146:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:1"},"nodeType":"YulFunctionCall","src":"135:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:1"},"nodeType":"YulFunctionCall","src":"125:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:1"},"nodeType":"YulFunctionCall","src":"118:50:1"},"nodeType":"YulIf","src":"115:70:1"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:1","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:1","type":""}],"src":"14:177:1"},{"body":{"nodeType":"YulBlock","src":"294:195:1","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:1"},"nodeType":"YulFunctionCall","src":"342:12:1"},"nodeType":"YulExpressionStatement","src":"342:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:1"},"nodeType":"YulFunctionCall","src":"311:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:1"},"nodeType":"YulFunctionCall","src":"307:32:1"},"nodeType":"YulIf","src":"304:52:1"},{"nodeType":"YulAssignment","src":"365:50:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:1"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:1"},"nodeType":"YulFunctionCall","src":"375:40:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:1"}]},{"nodeType":"YulAssignment","src":"424:59:1","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:1"},"nodeType":"YulFunctionCall","src":"464:18:1"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:1"},"nodeType":"YulFunctionCall","src":"434:49:1"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:1"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:1","type":""}],"src":"196:293:1"},{"body":{"nodeType":"YulBlock","src":"546:213:1","statements":[{"nodeType":"YulAssignment","src":"556:20:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"571:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"574:1:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"567:3:1"},"nodeType":"YulFunctionCall","src":"567:9:1"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"556:7:1"}]},{"body":{"nodeType":"YulBlock","src":"642:111:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"663:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"670:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"675:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"666:3:1"},"nodeType":"YulFunctionCall","src":"666:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"656:6:1"},"nodeType":"YulFunctionCall","src":"656:31:1"},"nodeType":"YulExpressionStatement","src":"656:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"707:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"710:4:1","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"700:6:1"},"nodeType":"YulFunctionCall","src":"700:15:1"},"nodeType":"YulExpressionStatement","src":"700:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"735:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"738:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"728:6:1"},"nodeType":"YulFunctionCall","src":"728:15:1"},"nodeType":"YulExpressionStatement","src":"728:15:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"605:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"598:6:1"},"nodeType":"YulFunctionCall","src":"598:9:1"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"612:1:1"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"619:7:1"},{"name":"x","nodeType":"YulIdentifier","src":"628:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"615:3:1"},"nodeType":"YulFunctionCall","src":"615:15:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"609:2:1"},"nodeType":"YulFunctionCall","src":"609:22:1"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"595:2:1"},"nodeType":"YulFunctionCall","src":"595:37:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"588:6:1"},"nodeType":"YulFunctionCall","src":"588:45:1"},"nodeType":"YulIf","src":"585:168:1"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"525:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"528:1:1","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"534:7:1","type":""}],"src":"494:265:1"},{"body":{"nodeType":"YulBlock","src":"810:171:1","statements":[{"body":{"nodeType":"YulBlock","src":"841:111:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"862:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"869:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"874:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"865:3:1"},"nodeType":"YulFunctionCall","src":"865:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"855:6:1"},"nodeType":"YulFunctionCall","src":"855:31:1"},"nodeType":"YulExpressionStatement","src":"855:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"906:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"909:4:1","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"899:6:1"},"nodeType":"YulFunctionCall","src":"899:15:1"},"nodeType":"YulExpressionStatement","src":"899:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"934:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"937:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"927:6:1"},"nodeType":"YulFunctionCall","src":"927:15:1"},"nodeType":"YulExpressionStatement","src":"927:15:1"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"830:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"823:6:1"},"nodeType":"YulFunctionCall","src":"823:9:1"},"nodeType":"YulIf","src":"820:132:1"},{"nodeType":"YulAssignment","src":"961:14:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"970:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"973:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"966:3:1"},"nodeType":"YulFunctionCall","src":"966:9:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"961:1:1"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"795:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"798:1:1","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"804:1:1","type":""}],"src":"764:217:1"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x))))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040526000805460ff60a01b1916905562030d406001556305f5e10060025560646003556103e8600455620f424060095534801561003e57600080fd5b5060405162000e3238038062000e3283398101604081905261005f91610137565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3504260065560006007556002546009546001546100d292916100c09161016a565b61010660201b610a351790919060201c565b600555600a80546001600160a01b039384166001600160a01b031991821617909155600b80549290931691161790556101b1565b6000610112828461018f565b90505b92915050565b80516001600160a01b038116811461013257600080fd5b919050565b6000806040838503121561014a57600080fd5b6101538361011b565b91506101616020840161011b565b90509250929050565b808202811582820484141761011557634e487b7160e01b600052601160045260246000fd5b6000826101ac57634e487b7160e01b600052601260045260246000fd5b500490565b610c7180620001c16000396000f3fe6080604052600436106101175760003560e01c8063a7c601601161009a578063ecbfc07711610061578063ecbfc0771461030d578063f2fde38b14610322578063f42958be14610342578063fe96973a14610357578063ff6c9bc91461037757005b8063a7c6016014610276578063afd1891614610296578063db7b373e146102ab578063dc13f7b5146102c1578063dde070e8146102d757005b80637b7902dd116100de5780637b7902dd146101c15780638092be4a146101e15780638da5cb5b1461020e57806398d5fdca146102365780639b77c21a1461024b57005b80630660f1e8146101205780631698755f1461016057806368e453ed14610180578063715018a61461019657806378e97925146101ab57005b3661011e57005b005b34801561012c57600080fd5b5061014d61013b366004610b24565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561016c57600080fd5b5061011e61017b366004610b3f565b61038c565b34801561018c57600080fd5b5061014d60075481565b3480156101a257600080fd5b5061011e610456565b3480156101b757600080fd5b5061014d60065481565b3480156101cd57600080fd5b5061014d6101dc366004610b69565b6104ca565b3480156101ed57600080fd5b5061014d6101fc366004610b24565b600d6020526000908152604090205481565b34801561021a57600080fd5b506000546040516001600160a01b039091168152602001610157565b34801561024257600080fd5b5060055461014d565b34801561025757600080fd5b50600054600160a01b900460ff165b6040519015158152602001610157565b34801561028257600080fd5b50610266610291366004610b69565b610527565b3480156102a257600080fd5b5061011e6107b1565b3480156102b757600080fd5b5061014d60095481565b3480156102cd57600080fd5b5061014d60085481565b3480156102e357600080fd5b5061014d6102f2366004610b24565b6001600160a01b03166000908152600c602052604090205490565b34801561031957600080fd5b5061011e61088f565b34801561032e57600080fd5b5061011e61033d366004610b24565b6108ce565b34801561034e57600080fd5b5061011e610904565b34801561036357600080fd5b5061011e610372366004610b69565b610934565b34801561038357600080fd5b5061011e6109fc565b6000546001600160a01b031633146103bf5760405162461bcd60e51b81526004016103b690610b82565b60405180910390fd5b816001600160a01b031663a9059cbb6103e06000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610bb7565b505050565b6000546001600160a01b031633146104805760405162461bcd60e51b81526004016103b690610b82565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006009546001546104dc9190610bef565b60085411156104f8576002546008546104f491610a35565b6005555b6105126005546009548461050c9190610bef565b90610a35565b6105219064e8d4a51000610bef565b92915050565b600061056660095483600d600061053b3390565b6001600160a01b03166001600160a01b031681526020019081526020016000205461050c9190610c06565b6004541015801561058a575060035461058760095484600d600061053b3390565b10155b6105d65760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e7420697320616c6c6f77656420313030202d20313030302e00000060448201526064016103b6565b60006105e1836104ca565b905080600760008282546105f59190610c06565b92505081905550826008600082825461060e9190610c06565b9091555050600b546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610bb7565b6106cb5760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b60448201526064016103b6565b336000908152600c6020526040812080548392906106ea908490610c06565b9091555050336000908152600d60205260408120805485929061070e908490610c06565b9091555050600b546001600160a01b031663a9059cbb6107366000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190610bb7565b5060019392505050565b33600052600c602052600a54336000818152600c60205260409081902054905163a9059cbb60e01b8152600481019290925260248201526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108409190610bb7565b50336000818152600c602090815260408083208390558051938452908301919091527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a1565b6000546001600160a01b031633146108b95760405162461bcd60e51b81526004016103b690610b82565b6000805460ff60a01b1916600160a01b179055565b6000546001600160a01b031633146108f85760405162461bcd60e51b81526004016103b690610b82565b61090181610a48565b50565b6000546001600160a01b0316331461092e5760405162461bcd60e51b81526004016103b690610b82565b42600655565b6000546001600160a01b0316331461095e5760405162461bcd60e51b81526004016103b690610b82565b600080546040516001600160a01b039091169083908381818185875af1925050503d80600081146109ab576040519150601f19603f3d011682016040523d82523d6000602084013e6109b0565b606091505b50509050806109f85760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103b6565b5050565b6000546001600160a01b03163314610a265760405162461bcd60e51b81526004016103b690610b82565b6000805460ff60a01b19169055565b6000610a418284610c19565b9392505050565b6001600160a01b038116610aad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b6565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b0381168114610b1f57600080fd5b919050565b600060208284031215610b3657600080fd5b610a4182610b08565b60008060408385031215610b5257600080fd5b610b5b83610b08565b946020939093013593505050565b600060208284031215610b7b57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610bc957600080fd5b81518015158114610a4157600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761052157610521610bd9565b8082018082111561052157610521610bd9565b600082610c3657634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122077f2bd0b4057c21554e7e2f712fef1c232ac7739f9cc8a83224f1c0fbf2c6c9964736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH3 0x30D40 PUSH1 0x1 SSTORE PUSH4 0x5F5E100 PUSH1 0x2 SSTORE PUSH1 0x64 PUSH1 0x3 SSTORE PUSH2 0x3E8 PUSH1 0x4 SSTORE PUSH3 0xF4240 PUSH1 0x9 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xE32 CODESIZE SUB DUP1 PUSH3 0xE32 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x5F SWAP2 PUSH2 0x137 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP TIMESTAMP PUSH1 0x6 SSTORE PUSH1 0x0 PUSH1 0x7 SSTORE PUSH1 0x2 SLOAD PUSH1 0x9 SLOAD PUSH1 0x1 SLOAD PUSH2 0xD2 SWAP3 SWAP2 PUSH2 0xC0 SWAP2 PUSH2 0x16A JUMP JUMPDEST PUSH2 0x106 PUSH1 0x20 SHL PUSH2 0xA35 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0xB DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x112 DUP3 DUP5 PUSH2 0x18F JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x153 DUP4 PUSH2 0x11B JUMP JUMPDEST SWAP2 POP PUSH2 0x161 PUSH1 0x20 DUP5 ADD PUSH2 0x11B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x115 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1AC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH2 0xC71 DUP1 PUSH3 0x1C1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x117 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA7C60160 GT PUSH2 0x9A JUMPI DUP1 PUSH4 0xECBFC077 GT PUSH2 0x61 JUMPI DUP1 PUSH4 0xECBFC077 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0xF42958BE EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x357 JUMPI DUP1 PUSH4 0xFF6C9BC9 EQ PUSH2 0x377 JUMPI STOP JUMPDEST DUP1 PUSH4 0xA7C60160 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0xAFD18916 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xDB7B373E EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0xDC13F7B5 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0xDDE070E8 EQ PUSH2 0x2D7 JUMPI STOP JUMPDEST DUP1 PUSH4 0x7B7902DD GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B7902DD EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x8092BE4A EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x9B77C21A EQ PUSH2 0x24B JUMPI STOP JUMPDEST DUP1 PUSH4 0x660F1E8 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0x1698755F EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x68E453ED EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x78E97925 EQ PUSH2 0x1AB JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x11E JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0xB3F JUMP JUMPDEST PUSH2 0x38C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x456 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x4CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x14D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x266 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x527 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x7B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x88F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH2 0x8CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x904 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x372 CALLDATASIZE PUSH1 0x4 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x934 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x9FC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x3E0 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x451 SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x480 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SLOAD PUSH1 0x1 SLOAD PUSH2 0x4DC SWAP2 SWAP1 PUSH2 0xBEF JUMP JUMPDEST PUSH1 0x8 SLOAD GT ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x2 SLOAD PUSH1 0x8 SLOAD PUSH2 0x4F4 SWAP2 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMPDEST PUSH2 0x512 PUSH1 0x5 SLOAD PUSH1 0x9 SLOAD DUP5 PUSH2 0x50C SWAP2 SWAP1 PUSH2 0xBEF JUMP JUMPDEST SWAP1 PUSH2 0xA35 JUMP JUMPDEST PUSH2 0x521 SWAP1 PUSH5 0xE8D4A51000 PUSH2 0xBEF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x566 PUSH1 0x9 SLOAD DUP4 PUSH1 0xD PUSH1 0x0 PUSH2 0x53B CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x50C SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH1 0x4 SLOAD LT ISZERO DUP1 ISZERO PUSH2 0x58A JUMPI POP PUSH1 0x3 SLOAD PUSH2 0x587 PUSH1 0x9 SLOAD DUP5 PUSH1 0xD PUSH1 0x0 PUSH2 0x53B CALLER SWAP1 JUMP JUMPDEST LT ISZERO JUMPDEST PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E7420697320616C6C6F77656420313030202D20313030302E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E1 DUP4 PUSH2 0x4CA JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5F5 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x60E SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x66A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68E SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0x6CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x19195C1BDCDA5D0819985A5B1959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x6EA SWAP1 DUP5 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x70E SWAP1 DUP5 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x736 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x783 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7A7 SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xA SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x81C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x840 SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH2 0x901 DUP2 PUSH2 0xA48 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x92E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST TIMESTAMP PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x95E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9AB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA41 DUP3 DUP5 PUSH2 0xC19 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA41 DUP3 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5B DUP4 PUSH2 0xB08 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x521 JUMPI PUSH2 0x521 PUSH2 0xBD9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x521 JUMPI PUSH2 0x521 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC36 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xF2BD0B4057C21554E7E2F712FEF1C232AC7739F9CC8A8322 0x4F SHR 0xF 0xBF 0x2C PUSH13 0x9964736F6C6343000812003300 ","sourceMap":"10166:2968:0:-:0;;;9422:5;9403:24;;-1:-1:-1;;;;9403:24:0;;;10342:6;9403:24;10322:26;10382:9;10355:36;;10422:3;10398:27;;10456:4;10432:28;;10619:7;10590:36;;10797:273;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8478:17;8521:18;;-1:-1:-1;;;;;;8521:18:0;1330:10;8521:18;;;;;8555:43;;1330:10;;;;8555:43;;8478:17;;8555:43;-1:-1:-1;10878:15:0;10866:9;:27;10917:1;10904:10;:14;10967:16;;10950:11;;10938:9;;10937:47;;10967:16;10938:23;;;:::i;:::-;10937:29;;;;;;:47;;;;:::i;:::-;10929:5;:55;10995:13;:30;;-1:-1:-1;;;;;10995:30:0;;;-1:-1:-1;;;;;;10995:30:0;;;;;;;11036:11;:26;;;;;;;;;;;10166:2968;;5200:98;5258:7;5285:5;5289:1;5285;:5;:::i;:::-;5278:12;;5200:98;;;;;:::o;14:177:1:-;93:13;;-1:-1:-1;;;;;135:31:1;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;494:265::-;567:9;;;598;;615:15;;;609:22;;595:37;585:168;;675:10;670:3;666:20;663:1;656:31;710:4;707:1;700:15;738:4;735:1;728:15;764:217;804:1;830;820:132;;874:10;869:3;865:20;862:1;855:31;909:4;906:1;899:15;937:4;934:1;927:15;820:132;-1:-1:-1;966:9:1;;764:217::o;:::-;10166:2968:0;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_920":{"entryPoint":null,"id":920,"parameterSlots":0,"returnSlots":0},"@_924":{"entryPoint":null,"id":924,"parameterSlots":0,"returnSlots":0},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_523":{"entryPoint":2632,"id":523,"parameterSlots":1,"returnSlots":0},"@baseDecimal_649":{"entryPoint":null,"id":649,"parameterSlots":0,"returnSlots":0},"@buyWithUSDT_850":{"entryPoint":1319,"id":850,"parameterSlots":1,"returnSlots":1},"@calcTokenAmount_758":{"entryPoint":1226,"id":758,"parameterSlots":1,"returnSlots":1},"@claimETH_608":{"entryPoint":2356,"id":608,"parameterSlots":1,"returnSlots":0},"@claimRewardToken_892":{"entryPoint":1969,"id":892,"parameterSlots":0,"returnSlots":0},"@claimToken_585":{"entryPoint":908,"id":585,"parameterSlots":2,"returnSlots":0},"@div_323":{"entryPoint":2613,"id":323,"parameterSlots":2,"returnSlots":1},"@getClaimAmount_906":{"entryPoint":null,"id":906,"parameterSlots":1,"returnSlots":1},"@getClaimStatus_557":{"entryPoint":null,"id":557,"parameterSlots":0,"returnSlots":1},"@getPrice_916":{"entryPoint":null,"id":916,"parameterSlots":0,"returnSlots":1},"@owner_453":{"entryPoint":null,"id":453,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_486":{"entryPoint":1110,"id":486,"parameterSlots":0,"returnSlots":0},"@resetPrice_706":{"entryPoint":null,"id":706,"parameterSlots":1,"returnSlots":0},"@resetStartTime_717":{"entryPoint":2308,"id":717,"parameterSlots":0,"returnSlots":0},"@startClaim_539":{"entryPoint":2191,"id":539,"parameterSlots":0,"returnSlots":0},"@startTime_642":{"entryPoint":null,"id":642,"parameterSlots":0,"returnSlots":0},"@stopClaim_549":{"entryPoint":2556,"id":549,"parameterSlots":0,"returnSlots":0},"@totalSaled_644":{"entryPoint":null,"id":644,"parameterSlots":0,"returnSlots":0},"@transferOwnership_498":{"entryPoint":2254,"id":498,"parameterSlots":1,"returnSlots":0},"@usdtTotalSaled_646":{"entryPoint":null,"id":646,"parameterSlots":0,"returnSlots":0},"@userDeposited_661":{"entryPoint":null,"id":661,"parameterSlots":0,"returnSlots":0},"@userRewards_657":{"entryPoint":null,"id":657,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":2824,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2852,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2879,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":2999,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2921,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_40dc50c84cbcc844454a966387aeed5c2a9d5bde5e4a7d21e64905464a44d2f7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2946,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d6eafbe654279d4729befe2ed94b8be6d498d06d80c9f7a172c2be9df9d977ef__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3078,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3097,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":3055,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":3033,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5378:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:1","statements":[{"nodeType":"YulAssignment","src":"73:29:1","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:1"},"nodeType":"YulFunctionCall","src":"82:20:1"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:1"}]},{"body":{"nodeType":"YulBlock","src":"165:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:1"},"nodeType":"YulFunctionCall","src":"167:12:1"},"nodeType":"YulExpressionStatement","src":"167:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:1"},"nodeType":"YulFunctionCall","src":"146:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:1"},"nodeType":"YulFunctionCall","src":"142:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:1"},"nodeType":"YulFunctionCall","src":"131:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:1"},"nodeType":"YulFunctionCall","src":"121:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:1"},"nodeType":"YulFunctionCall","src":"114:50:1"},"nodeType":"YulIf","src":"111:70:1"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:1","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:1","type":""}],"src":"14:173:1"},{"body":{"nodeType":"YulBlock","src":"262:116:1","statements":[{"body":{"nodeType":"YulBlock","src":"308:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:1"},"nodeType":"YulFunctionCall","src":"310:12:1"},"nodeType":"YulExpressionStatement","src":"310:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"283:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"292:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"279:3:1"},"nodeType":"YulFunctionCall","src":"279:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"304:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:1"},"nodeType":"YulFunctionCall","src":"275:32:1"},"nodeType":"YulIf","src":"272:52:1"},{"nodeType":"YulAssignment","src":"333:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"343:18:1"},"nodeType":"YulFunctionCall","src":"343:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"333:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"228:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"239:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"251:6:1","type":""}],"src":"192:186:1"},{"body":{"nodeType":"YulBlock","src":"484:76:1","statements":[{"nodeType":"YulAssignment","src":"494:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"506:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"517:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:1"},"nodeType":"YulFunctionCall","src":"502:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"494:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"536:9:1"},{"name":"value0","nodeType":"YulIdentifier","src":"547:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"529:6:1"},"nodeType":"YulFunctionCall","src":"529:25:1"},"nodeType":"YulExpressionStatement","src":"529:25:1"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"453:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"464:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"475:4:1","type":""}],"src":"383:177:1"},{"body":{"nodeType":"YulBlock","src":"652:167:1","statements":[{"body":{"nodeType":"YulBlock","src":"698:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"707:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"710:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"700:6:1"},"nodeType":"YulFunctionCall","src":"700:12:1"},"nodeType":"YulExpressionStatement","src":"700:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"673:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"682:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"669:3:1"},"nodeType":"YulFunctionCall","src":"669:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"694:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"665:3:1"},"nodeType":"YulFunctionCall","src":"665:32:1"},"nodeType":"YulIf","src":"662:52:1"},{"nodeType":"YulAssignment","src":"723:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"752:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"733:18:1"},"nodeType":"YulFunctionCall","src":"733:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"723:6:1"}]},{"nodeType":"YulAssignment","src":"771:42:1","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"798:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"809:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"794:3:1"},"nodeType":"YulFunctionCall","src":"794:18:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"781:12:1"},"nodeType":"YulFunctionCall","src":"781:32:1"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"771:6:1"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"610:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"621:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"633:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"641:6:1","type":""}],"src":"565:254:1"},{"body":{"nodeType":"YulBlock","src":"894:110:1","statements":[{"body":{"nodeType":"YulBlock","src":"940:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"949:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"952:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"942:6:1"},"nodeType":"YulFunctionCall","src":"942:12:1"},"nodeType":"YulExpressionStatement","src":"942:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"915:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"924:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"911:3:1"},"nodeType":"YulFunctionCall","src":"911:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"936:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"907:3:1"},"nodeType":"YulFunctionCall","src":"907:32:1"},"nodeType":"YulIf","src":"904:52:1"},{"nodeType":"YulAssignment","src":"965:33:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"988:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"975:12:1"},"nodeType":"YulFunctionCall","src":"975:23:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"965:6:1"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"860:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"871:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"883:6:1","type":""}],"src":"824:180:1"},{"body":{"nodeType":"YulBlock","src":"1110:102:1","statements":[{"nodeType":"YulAssignment","src":"1120:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1132:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1143:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1128:3:1"},"nodeType":"YulFunctionCall","src":"1128:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1120:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1162:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1177:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1193:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1198:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1189:3:1"},"nodeType":"YulFunctionCall","src":"1189:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"1202:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1185:3:1"},"nodeType":"YulFunctionCall","src":"1185:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1173:3:1"},"nodeType":"YulFunctionCall","src":"1173:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1155:6:1"},"nodeType":"YulFunctionCall","src":"1155:51:1"},"nodeType":"YulExpressionStatement","src":"1155:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1079:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1090:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1101:4:1","type":""}],"src":"1009:203:1"},{"body":{"nodeType":"YulBlock","src":"1312:92:1","statements":[{"nodeType":"YulAssignment","src":"1322:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1334:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1345:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1330:3:1"},"nodeType":"YulFunctionCall","src":"1330:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1322:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1364:9:1"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1389:6:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1382:6:1"},"nodeType":"YulFunctionCall","src":"1382:14:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1375:6:1"},"nodeType":"YulFunctionCall","src":"1375:22:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1357:6:1"},"nodeType":"YulFunctionCall","src":"1357:41:1"},"nodeType":"YulExpressionStatement","src":"1357:41:1"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1281:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1292:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1303:4:1","type":""}],"src":"1217:187:1"},{"body":{"nodeType":"YulBlock","src":"1583:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1600:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1611:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1593:6:1"},"nodeType":"YulFunctionCall","src":"1593:21:1"},"nodeType":"YulExpressionStatement","src":"1593:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1634:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1645:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1630:3:1"},"nodeType":"YulFunctionCall","src":"1630:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"1650:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1623:6:1"},"nodeType":"YulFunctionCall","src":"1623:30:1"},"nodeType":"YulExpressionStatement","src":"1623:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1673:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1684:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1669:3:1"},"nodeType":"YulFunctionCall","src":"1669:18:1"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1689:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1662:6:1"},"nodeType":"YulFunctionCall","src":"1662:62:1"},"nodeType":"YulExpressionStatement","src":"1662:62:1"},{"nodeType":"YulAssignment","src":"1733:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1745:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1756:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1741:3:1"},"nodeType":"YulFunctionCall","src":"1741:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1733:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1560:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1574:4:1","type":""}],"src":"1409:356:1"},{"body":{"nodeType":"YulBlock","src":"1899:145:1","statements":[{"nodeType":"YulAssignment","src":"1909:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1921:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1932:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1917:3:1"},"nodeType":"YulFunctionCall","src":"1917:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1909:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1951:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1966:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1982:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1987:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1978:3:1"},"nodeType":"YulFunctionCall","src":"1978:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"1991:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1974:3:1"},"nodeType":"YulFunctionCall","src":"1974:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1962:3:1"},"nodeType":"YulFunctionCall","src":"1962:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1944:6:1"},"nodeType":"YulFunctionCall","src":"1944:51:1"},"nodeType":"YulExpressionStatement","src":"1944:51:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2015:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2026:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2011:3:1"},"nodeType":"YulFunctionCall","src":"2011:18:1"},{"name":"value1","nodeType":"YulIdentifier","src":"2031:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2004:6:1"},"nodeType":"YulFunctionCall","src":"2004:34:1"},"nodeType":"YulExpressionStatement","src":"2004:34:1"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1860:9:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1871:6:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1879:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1890:4:1","type":""}],"src":"1770:274:1"},{"body":{"nodeType":"YulBlock","src":"2127:199:1","statements":[{"body":{"nodeType":"YulBlock","src":"2173:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2182:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2185:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2175:6:1"},"nodeType":"YulFunctionCall","src":"2175:12:1"},"nodeType":"YulExpressionStatement","src":"2175:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2148:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"2157:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2144:3:1"},"nodeType":"YulFunctionCall","src":"2144:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"2169:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2140:3:1"},"nodeType":"YulFunctionCall","src":"2140:32:1"},"nodeType":"YulIf","src":"2137:52:1"},{"nodeType":"YulVariableDeclaration","src":"2198:29:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2217:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2211:5:1"},"nodeType":"YulFunctionCall","src":"2211:16:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2202:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"2280:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2289:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2292:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2282:6:1"},"nodeType":"YulFunctionCall","src":"2282:12:1"},"nodeType":"YulExpressionStatement","src":"2282:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2249:5:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2270:5:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2263:6:1"},"nodeType":"YulFunctionCall","src":"2263:13:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2256:6:1"},"nodeType":"YulFunctionCall","src":"2256:21:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2246:2:1"},"nodeType":"YulFunctionCall","src":"2246:32:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2239:6:1"},"nodeType":"YulFunctionCall","src":"2239:40:1"},"nodeType":"YulIf","src":"2236:60:1"},{"nodeType":"YulAssignment","src":"2305:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"2315:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2305:6:1"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2093:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2104:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2116:6:1","type":""}],"src":"2049:277:1"},{"body":{"nodeType":"YulBlock","src":"2363:95:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2380:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2387:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2392:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2383:3:1"},"nodeType":"YulFunctionCall","src":"2383:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2373:6:1"},"nodeType":"YulFunctionCall","src":"2373:31:1"},"nodeType":"YulExpressionStatement","src":"2373:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2420:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2423:4:1","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2413:6:1"},"nodeType":"YulFunctionCall","src":"2413:15:1"},"nodeType":"YulExpressionStatement","src":"2413:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2444:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2447:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2437:6:1"},"nodeType":"YulFunctionCall","src":"2437:15:1"},"nodeType":"YulExpressionStatement","src":"2437:15:1"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2331:127:1"},{"body":{"nodeType":"YulBlock","src":"2515:116:1","statements":[{"nodeType":"YulAssignment","src":"2525:20:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2540:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"2543:1:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2536:3:1"},"nodeType":"YulFunctionCall","src":"2536:9:1"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"2525:7:1"}]},{"body":{"nodeType":"YulBlock","src":"2603:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2605:16:1"},"nodeType":"YulFunctionCall","src":"2605:18:1"},"nodeType":"YulExpressionStatement","src":"2605:18:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2574:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2567:6:1"},"nodeType":"YulFunctionCall","src":"2567:9:1"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2581:1:1"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"2588:7:1"},{"name":"x","nodeType":"YulIdentifier","src":"2597:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2584:3:1"},"nodeType":"YulFunctionCall","src":"2584:15:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2578:2:1"},"nodeType":"YulFunctionCall","src":"2578:22:1"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2564:2:1"},"nodeType":"YulFunctionCall","src":"2564:37:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2557:6:1"},"nodeType":"YulFunctionCall","src":"2557:45:1"},"nodeType":"YulIf","src":"2554:71:1"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2494:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"2497:1:1","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"2503:7:1","type":""}],"src":"2463:168:1"},{"body":{"nodeType":"YulBlock","src":"2684:77:1","statements":[{"nodeType":"YulAssignment","src":"2694:16:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2705:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"2708:1:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2701:3:1"},"nodeType":"YulFunctionCall","src":"2701:9:1"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"2694:3:1"}]},{"body":{"nodeType":"YulBlock","src":"2733:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2735:16:1"},"nodeType":"YulFunctionCall","src":"2735:18:1"},"nodeType":"YulExpressionStatement","src":"2735:18:1"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2725:1:1"},{"name":"sum","nodeType":"YulIdentifier","src":"2728:3:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2722:2:1"},"nodeType":"YulFunctionCall","src":"2722:10:1"},"nodeType":"YulIf","src":"2719:36:1"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2667:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"2670:1:1","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2676:3:1","type":""}],"src":"2636:125:1"},{"body":{"nodeType":"YulBlock","src":"2940:179:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2957:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2968:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2950:6:1"},"nodeType":"YulFunctionCall","src":"2950:21:1"},"nodeType":"YulExpressionStatement","src":"2950:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2991:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3002:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2987:3:1"},"nodeType":"YulFunctionCall","src":"2987:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3007:2:1","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2980:6:1"},"nodeType":"YulFunctionCall","src":"2980:30:1"},"nodeType":"YulExpressionStatement","src":"2980:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3030:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3041:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3026:3:1"},"nodeType":"YulFunctionCall","src":"3026:18:1"},{"hexValue":"416d6f756e7420697320616c6c6f77656420313030202d20313030302e","kind":"string","nodeType":"YulLiteral","src":"3046:31:1","type":"","value":"Amount is allowed 100 - 1000."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3019:6:1"},"nodeType":"YulFunctionCall","src":"3019:59:1"},"nodeType":"YulExpressionStatement","src":"3019:59:1"},{"nodeType":"YulAssignment","src":"3087:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3099:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3110:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3095:3:1"},"nodeType":"YulFunctionCall","src":"3095:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3087:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_40dc50c84cbcc844454a966387aeed5c2a9d5bde5e4a7d21e64905464a44d2f7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2917:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2931:4:1","type":""}],"src":"2766:353:1"},{"body":{"nodeType":"YulBlock","src":"3281:218:1","statements":[{"nodeType":"YulAssignment","src":"3291:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3303:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3314:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3299:3:1"},"nodeType":"YulFunctionCall","src":"3299:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3291:4:1"}]},{"nodeType":"YulVariableDeclaration","src":"3326:29:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3344:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3349:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3340:3:1"},"nodeType":"YulFunctionCall","src":"3340:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"3353:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3336:3:1"},"nodeType":"YulFunctionCall","src":"3336:19:1"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3330:2:1","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3371:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3386:6:1"},{"name":"_1","nodeType":"YulIdentifier","src":"3394:2:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3382:3:1"},"nodeType":"YulFunctionCall","src":"3382:15:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3364:6:1"},"nodeType":"YulFunctionCall","src":"3364:34:1"},"nodeType":"YulExpressionStatement","src":"3364:34:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3418:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3429:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3414:3:1"},"nodeType":"YulFunctionCall","src":"3414:18:1"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3438:6:1"},{"name":"_1","nodeType":"YulIdentifier","src":"3446:2:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3434:3:1"},"nodeType":"YulFunctionCall","src":"3434:15:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3407:6:1"},"nodeType":"YulFunctionCall","src":"3407:43:1"},"nodeType":"YulExpressionStatement","src":"3407:43:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3470:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3481:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3466:3:1"},"nodeType":"YulFunctionCall","src":"3466:18:1"},{"name":"value2","nodeType":"YulIdentifier","src":"3486:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3459:6:1"},"nodeType":"YulFunctionCall","src":"3459:34:1"},"nodeType":"YulExpressionStatement","src":"3459:34:1"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3234:9:1","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3245:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3253:6:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3261:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3272:4:1","type":""}],"src":"3124:375:1"},{"body":{"nodeType":"YulBlock","src":"3678:164:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3695:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3706:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3688:6:1"},"nodeType":"YulFunctionCall","src":"3688:21:1"},"nodeType":"YulExpressionStatement","src":"3688:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3729:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3740:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3725:3:1"},"nodeType":"YulFunctionCall","src":"3725:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3745:2:1","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3718:6:1"},"nodeType":"YulFunctionCall","src":"3718:30:1"},"nodeType":"YulExpressionStatement","src":"3718:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3768:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3779:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3764:3:1"},"nodeType":"YulFunctionCall","src":"3764:18:1"},{"hexValue":"6465706f736974206661696c6564","kind":"string","nodeType":"YulLiteral","src":"3784:16:1","type":"","value":"deposit failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3757:6:1"},"nodeType":"YulFunctionCall","src":"3757:44:1"},"nodeType":"YulExpressionStatement","src":"3757:44:1"},{"nodeType":"YulAssignment","src":"3810:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3822:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3833:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3818:3:1"},"nodeType":"YulFunctionCall","src":"3818:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3810:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_d6eafbe654279d4729befe2ed94b8be6d498d06d80c9f7a172c2be9df9d977ef__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3655:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3669:4:1","type":""}],"src":"3504:338:1"},{"body":{"nodeType":"YulBlock","src":"4021:167:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4038:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4049:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4031:6:1"},"nodeType":"YulFunctionCall","src":"4031:21:1"},"nodeType":"YulExpressionStatement","src":"4031:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4072:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4083:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4068:3:1"},"nodeType":"YulFunctionCall","src":"4068:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:1","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4061:6:1"},"nodeType":"YulFunctionCall","src":"4061:30:1"},"nodeType":"YulExpressionStatement","src":"4061:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4111:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4122:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4107:3:1"},"nodeType":"YulFunctionCall","src":"4107:18:1"},{"hexValue":"506c656173652062757920746f6b656e2e","kind":"string","nodeType":"YulLiteral","src":"4127:19:1","type":"","value":"Please buy token."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4100:6:1"},"nodeType":"YulFunctionCall","src":"4100:47:1"},"nodeType":"YulExpressionStatement","src":"4100:47:1"},{"nodeType":"YulAssignment","src":"4156:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4168:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4179:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4164:3:1"},"nodeType":"YulFunctionCall","src":"4164:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4156:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3998:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4012:4:1","type":""}],"src":"3847:341:1"},{"body":{"nodeType":"YulBlock","src":"4384:14:1","statements":[{"nodeType":"YulAssignment","src":"4386:10:1","value":{"name":"pos","nodeType":"YulIdentifier","src":"4393:3:1"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4386:3:1"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4368:3:1","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4376:3:1","type":""}],"src":"4193:205:1"},{"body":{"nodeType":"YulBlock","src":"4577:170:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4594:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4605:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4587:6:1"},"nodeType":"YulFunctionCall","src":"4587:21:1"},"nodeType":"YulExpressionStatement","src":"4587:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4639:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4624:3:1"},"nodeType":"YulFunctionCall","src":"4624:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"4644:2:1","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4617:6:1"},"nodeType":"YulFunctionCall","src":"4617:30:1"},"nodeType":"YulExpressionStatement","src":"4617:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4667:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4678:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4663:3:1"},"nodeType":"YulFunctionCall","src":"4663:18:1"},{"hexValue":"4661696c656420746f2073656e64204574686572","kind":"string","nodeType":"YulLiteral","src":"4683:22:1","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4656:6:1"},"nodeType":"YulFunctionCall","src":"4656:50:1"},"nodeType":"YulExpressionStatement","src":"4656:50:1"},{"nodeType":"YulAssignment","src":"4715:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4727:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4738:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4723:3:1"},"nodeType":"YulFunctionCall","src":"4723:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4715:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4554:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4568:4:1","type":""}],"src":"4403:344:1"},{"body":{"nodeType":"YulBlock","src":"4798:171:1","statements":[{"body":{"nodeType":"YulBlock","src":"4829:111:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4850:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4857:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4862:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4853:3:1"},"nodeType":"YulFunctionCall","src":"4853:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4843:6:1"},"nodeType":"YulFunctionCall","src":"4843:31:1"},"nodeType":"YulExpressionStatement","src":"4843:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4894:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4897:4:1","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4887:6:1"},"nodeType":"YulFunctionCall","src":"4887:15:1"},"nodeType":"YulExpressionStatement","src":"4887:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4922:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4925:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4915:6:1"},"nodeType":"YulFunctionCall","src":"4915:15:1"},"nodeType":"YulExpressionStatement","src":"4915:15:1"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4818:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4811:6:1"},"nodeType":"YulFunctionCall","src":"4811:9:1"},"nodeType":"YulIf","src":"4808:132:1"},{"nodeType":"YulAssignment","src":"4949:14:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4958:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"4961:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4954:3:1"},"nodeType":"YulFunctionCall","src":"4954:9:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4949:1:1"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4783:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"4786:1:1","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"4792:1:1","type":""}],"src":"4752:217:1"},{"body":{"nodeType":"YulBlock","src":"5148:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5165:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5176:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5158:6:1"},"nodeType":"YulFunctionCall","src":"5158:21:1"},"nodeType":"YulExpressionStatement","src":"5158:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5199:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5210:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5195:3:1"},"nodeType":"YulFunctionCall","src":"5195:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"5215:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5188:6:1"},"nodeType":"YulFunctionCall","src":"5188:30:1"},"nodeType":"YulExpressionStatement","src":"5188:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5238:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5249:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5234:3:1"},"nodeType":"YulFunctionCall","src":"5234:18:1"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"5254:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5227:6:1"},"nodeType":"YulFunctionCall","src":"5227:62:1"},"nodeType":"YulExpressionStatement","src":"5227:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5309:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5320:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5305:3:1"},"nodeType":"YulFunctionCall","src":"5305:18:1"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"5325:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5298:6:1"},"nodeType":"YulFunctionCall","src":"5298:36:1"},"nodeType":"YulExpressionStatement","src":"5298:36:1"},{"nodeType":"YulAssignment","src":"5343:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5355:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5366:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5351:3:1"},"nodeType":"YulFunctionCall","src":"5351:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5343:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5125:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5139:4:1","type":""}],"src":"4974:402:1"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_40dc50c84cbcc844454a966387aeed5c2a9d5bde5e4a7d21e64905464a44d2f7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Amount is allowed 100 - 1000.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_d6eafbe654279d4729befe2ed94b8be6d498d06d80c9f7a172c2be9df9d977ef__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"deposit failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Please buy token.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101175760003560e01c8063a7c601601161009a578063ecbfc07711610061578063ecbfc0771461030d578063f2fde38b14610322578063f42958be14610342578063fe96973a14610357578063ff6c9bc91461037757005b8063a7c6016014610276578063afd1891614610296578063db7b373e146102ab578063dc13f7b5146102c1578063dde070e8146102d757005b80637b7902dd116100de5780637b7902dd146101c15780638092be4a146101e15780638da5cb5b1461020e57806398d5fdca146102365780639b77c21a1461024b57005b80630660f1e8146101205780631698755f1461016057806368e453ed14610180578063715018a61461019657806378e97925146101ab57005b3661011e57005b005b34801561012c57600080fd5b5061014d61013b366004610b24565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561016c57600080fd5b5061011e61017b366004610b3f565b61038c565b34801561018c57600080fd5b5061014d60075481565b3480156101a257600080fd5b5061011e610456565b3480156101b757600080fd5b5061014d60065481565b3480156101cd57600080fd5b5061014d6101dc366004610b69565b6104ca565b3480156101ed57600080fd5b5061014d6101fc366004610b24565b600d6020526000908152604090205481565b34801561021a57600080fd5b506000546040516001600160a01b039091168152602001610157565b34801561024257600080fd5b5060055461014d565b34801561025757600080fd5b50600054600160a01b900460ff165b6040519015158152602001610157565b34801561028257600080fd5b50610266610291366004610b69565b610527565b3480156102a257600080fd5b5061011e6107b1565b3480156102b757600080fd5b5061014d60095481565b3480156102cd57600080fd5b5061014d60085481565b3480156102e357600080fd5b5061014d6102f2366004610b24565b6001600160a01b03166000908152600c602052604090205490565b34801561031957600080fd5b5061011e61088f565b34801561032e57600080fd5b5061011e61033d366004610b24565b6108ce565b34801561034e57600080fd5b5061011e610904565b34801561036357600080fd5b5061011e610372366004610b69565b610934565b34801561038357600080fd5b5061011e6109fc565b6000546001600160a01b031633146103bf5760405162461bcd60e51b81526004016103b690610b82565b60405180910390fd5b816001600160a01b031663a9059cbb6103e06000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610bb7565b505050565b6000546001600160a01b031633146104805760405162461bcd60e51b81526004016103b690610b82565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006009546001546104dc9190610bef565b60085411156104f8576002546008546104f491610a35565b6005555b6105126005546009548461050c9190610bef565b90610a35565b6105219064e8d4a51000610bef565b92915050565b600061056660095483600d600061053b3390565b6001600160a01b03166001600160a01b031681526020019081526020016000205461050c9190610c06565b6004541015801561058a575060035461058760095484600d600061053b3390565b10155b6105d65760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e7420697320616c6c6f77656420313030202d20313030302e00000060448201526064016103b6565b60006105e1836104ca565b905080600760008282546105f59190610c06565b92505081905550826008600082825461060e9190610c06565b9091555050600b546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610bb7565b6106cb5760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b60448201526064016103b6565b336000908152600c6020526040812080548392906106ea908490610c06565b9091555050336000908152600d60205260408120805485929061070e908490610c06565b9091555050600b546001600160a01b031663a9059cbb6107366000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190610bb7565b5060019392505050565b33600052600c602052600a54336000818152600c60205260409081902054905163a9059cbb60e01b8152600481019290925260248201526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108409190610bb7565b50336000818152600c602090815260408083208390558051938452908301919091527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a1565b6000546001600160a01b031633146108b95760405162461bcd60e51b81526004016103b690610b82565b6000805460ff60a01b1916600160a01b179055565b6000546001600160a01b031633146108f85760405162461bcd60e51b81526004016103b690610b82565b61090181610a48565b50565b6000546001600160a01b0316331461092e5760405162461bcd60e51b81526004016103b690610b82565b42600655565b6000546001600160a01b0316331461095e5760405162461bcd60e51b81526004016103b690610b82565b600080546040516001600160a01b039091169083908381818185875af1925050503d80600081146109ab576040519150601f19603f3d011682016040523d82523d6000602084013e6109b0565b606091505b50509050806109f85760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103b6565b5050565b6000546001600160a01b03163314610a265760405162461bcd60e51b81526004016103b690610b82565b6000805460ff60a01b19169055565b6000610a418284610c19565b9392505050565b6001600160a01b038116610aad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b6565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b0381168114610b1f57600080fd5b919050565b600060208284031215610b3657600080fd5b610a4182610b08565b60008060408385031215610b5257600080fd5b610b5b83610b08565b946020939093013593505050565b600060208284031215610b7b57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610bc957600080fd5b81518015158114610a4157600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761052157610521610bd9565b8082018082111561052157610521610bd9565b600082610c3657634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122077f2bd0b4057c21554e7e2f712fef1c232ac7739f9cc8a83224f1c0fbf2c6c9964736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x117 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA7C60160 GT PUSH2 0x9A JUMPI DUP1 PUSH4 0xECBFC077 GT PUSH2 0x61 JUMPI DUP1 PUSH4 0xECBFC077 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0xF42958BE EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x357 JUMPI DUP1 PUSH4 0xFF6C9BC9 EQ PUSH2 0x377 JUMPI STOP JUMPDEST DUP1 PUSH4 0xA7C60160 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0xAFD18916 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xDB7B373E EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0xDC13F7B5 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0xDDE070E8 EQ PUSH2 0x2D7 JUMPI STOP JUMPDEST DUP1 PUSH4 0x7B7902DD GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B7902DD EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x8092BE4A EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x9B77C21A EQ PUSH2 0x24B JUMPI STOP JUMPDEST DUP1 PUSH4 0x660F1E8 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0x1698755F EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x68E453ED EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x78E97925 EQ PUSH2 0x1AB JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x11E JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0xB3F JUMP JUMPDEST PUSH2 0x38C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x456 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x4CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x14D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x266 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x527 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x7B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x88F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0xB24 JUMP JUMPDEST PUSH2 0x8CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x904 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x372 CALLDATASIZE PUSH1 0x4 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x934 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11E PUSH2 0x9FC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x3E0 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x451 SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x480 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SLOAD PUSH1 0x1 SLOAD PUSH2 0x4DC SWAP2 SWAP1 PUSH2 0xBEF JUMP JUMPDEST PUSH1 0x8 SLOAD GT ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x2 SLOAD PUSH1 0x8 SLOAD PUSH2 0x4F4 SWAP2 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMPDEST PUSH2 0x512 PUSH1 0x5 SLOAD PUSH1 0x9 SLOAD DUP5 PUSH2 0x50C SWAP2 SWAP1 PUSH2 0xBEF JUMP JUMPDEST SWAP1 PUSH2 0xA35 JUMP JUMPDEST PUSH2 0x521 SWAP1 PUSH5 0xE8D4A51000 PUSH2 0xBEF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x566 PUSH1 0x9 SLOAD DUP4 PUSH1 0xD PUSH1 0x0 PUSH2 0x53B CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x50C SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH1 0x4 SLOAD LT ISZERO DUP1 ISZERO PUSH2 0x58A JUMPI POP PUSH1 0x3 SLOAD PUSH2 0x587 PUSH1 0x9 SLOAD DUP5 PUSH1 0xD PUSH1 0x0 PUSH2 0x53B CALLER SWAP1 JUMP JUMPDEST LT ISZERO JUMPDEST PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E7420697320616C6C6F77656420313030202D20313030302E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E1 DUP4 PUSH2 0x4CA JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5F5 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x60E SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x66A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68E SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0x6CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x19195C1BDCDA5D0819985A5B1959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x6EA SWAP1 DUP5 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x70E SWAP1 DUP5 SWAP1 PUSH2 0xC06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x736 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x783 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7A7 SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xA SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x81C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x840 SWAP2 SWAP1 PUSH2 0xBB7 JUMP JUMPDEST POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH2 0x901 DUP2 PUSH2 0xA48 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x92E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST TIMESTAMP PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x95E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9AB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B6 SWAP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA41 DUP3 DUP5 PUSH2 0xC19 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA41 DUP3 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5B DUP4 PUSH2 0xB08 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x521 JUMPI PUSH2 0x521 PUSH2 0xBD9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x521 JUMPI PUSH2 0x521 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC36 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xF2BD0B4057C21554E7E2F712FEF1C232AC7739F9CC8A8322 0x4F SHR 0xF 0xBF 0x2C PUSH13 0x9964736F6C6343000812003300 ","sourceMap":"10166:2968:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10689:46;;;;;;;;;;-1:-1:-1;10689:46:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;529:25:1;;;517:2;502:18;10689:46:0;;;;;;;;9817:167;;;;;;;;;;-1:-1:-1;9817:167:0;;;;;:::i;:::-;;:::i;10520:25::-;;;;;;;;;;;;;;;;8828:140;;;;;;;;;;;;;:::i;10489:24::-;;;;;;;;;;;;;;;;11260:363;;;;;;;;;;-1:-1:-1;11260:363:0;;;;;:::i;:::-;;:::i;10742:48::-;;;;;;;;;;-1:-1:-1;10742:48:0;;;;;:::i;:::-;;;;;;;;;;;;;;8614:79;;;;;;;;;;-1:-1:-1;8652:7:0;8679:6;8614:79;;-1:-1:-1;;;;;8679:6:0;;;1155:51:1;;1143:2;1128:18;8614:79:0;1009:203:1;12958:98:0;;;;;;;;;;-1:-1:-1;13043:5:0;;12958:98;;9608:92;;;;;;;;;;-1:-1:-1;9657:4:0;9681:11;-1:-1:-1;;;9681:11:0;;;;9608:92;;;1382:14:1;;1375:22;1357:41;;1345:2;1330:18;9608:92:0;1217:187:1;11631:849:0;;;;;;;;;;-1:-1:-1;11631:849:0;;;;;:::i;:::-;;:::i;12488:294::-;;;;;;;;;;;;;:::i;10590:36::-;;;;;;;;;;;;;;;;10552:29;;;;;;;;;;;;;;;;12790:160;;;;;;;;;;-1:-1:-1;12790:160:0;;;;;:::i;:::-;-1:-1:-1;;;;;12918:24:0;12872:19;12918:24;;;:11;:24;;;;;;;12790:160;9436:78;;;;;;;;;;;;;:::i;8976:109::-;;;;;;;;;;-1:-1:-1;8976:109:0;;;;;:::i;:::-;;:::i;11163:89::-;;;;;;;;;;;;;:::i;9992:167::-;;;;;;;;;;-1:-1:-1;9992:167:0;;;;;:::i;:::-;;:::i;9522:78::-;;;;;;;;;;;;;:::i;9817:167::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;;;;;;;;;9937:12:::1;-1:-1:-1::0;;;;;9930:29:0::1;;9960:7;8652::::0;8679:6;-1:-1:-1;;;;;8679:6:0;;8614:79;9960:7:::1;9930:46;::::0;-1:-1:-1;;;;;;9930:46:0::1;::::0;;;;;;-1:-1:-1;;;;;1962:32:1;;;9930:46:0::1;::::0;::::1;1944:51:1::0;2011:18;;;2004:34;;;1917:18;;9930:46:0::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9817:167:::0;;:::o;8828:140::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;8927:1:::1;8911:6:::0;;8890:40:::1;::::0;-1:-1:-1;;;;;8911:6:0;;::::1;::::0;8890:40:::1;::::0;8927:1;;8890:40:::1;8958:1;8941:19:::0;;-1:-1:-1;;;;;;8941:19:0::1;::::0;;8828:140::o;11260:363::-;11336:14;11431:11;;11419:9;;:23;;;;:::i;:::-;11402:14;;:40;11398:151;;;11488:16;;11468:14;;11467:38;;:20;:38::i;:::-;11459:5;:46;11520:17;11568:36;11598:5;;11581:11;;11569:9;:23;;;;:::i;:::-;11568:29;;:36::i;:::-;:47;;11607:8;11568:47;:::i;:::-;11559:56;11260:363;-1:-1:-1;;11260:363:0:o;11631:849::-;11690:4;11746:57;11791:11;;11775:10;11747:13;:27;11761:12;1330:10;;1258:90;11761:12;-1:-1:-1;;;;;11747:27:0;-1:-1:-1;;;;;11747:27:0;;;;;;;;;;;;;:38;;;;:::i;11746:57::-;11729:13;;:74;;:169;;;;;11885:13;;11824:57;11869:11;;11853:10;11825:13;:27;11839:12;1330:10;;1258:90;11824:57;:74;;11729:169;11707:248;;;;-1:-1:-1;;;11707:248:0;;2968:2:1;11707:248:0;;;2950:21:1;3007:2;2987:18;;;2980:30;3046:31;3026:18;;;3019:59;3095:18;;11707:248:0;2766:353:1;11707:248:0;11966:14;11983:27;11999:10;11983:15;:27::i;:::-;11966:44;;12035:6;12021:10;;:20;;;;;;;:::i;:::-;;;;;;;;12070:10;12052:14;;:28;;;;;;;:::i;:::-;;;;-1:-1:-1;;12120:11:0;;12113:137;;-1:-1:-1;;;12113:137:0;;12164:10;12113:137;;;3364:34:1;12201:4:0;3414:18:1;;;3407:43;3466:18;;;3459:34;;;-1:-1:-1;;;;;12120:11:0;;;;12113:32;;3299:18:1;;12113:137:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12091:201;;;;-1:-1:-1;;;12091:201:0;;3706:2:1;12091:201:0;;;3688:21:1;3745:2;3725:18;;;3718:30;-1:-1:-1;;;3764:18:1;;;3757:44;3818:18;;12091:201:0;3504:338:1;12091:201:0;1330:10;12303:25;;;;:11;:25;;;;;:35;;12332:6;;12303:25;:35;;12332:6;;12303:35;:::i;:::-;;;;-1:-1:-1;;1330:10:0;12349:27;;;;:13;:27;;;;;:41;;12380:10;;12349:27;:41;;12380:10;;12349:41;:::i;:::-;;;;-1:-1:-1;;12408:11:0;;-1:-1:-1;;;;;12408:11:0;12401:28;12430:7;8652;8679:6;-1:-1:-1;;;;;8679:6:0;;8614:79;12430:7;12401:49;;-1:-1:-1;;;;;;12401:49:0;;;;;;;-1:-1:-1;;;;;1962:32:1;;;12401:49:0;;;1944:51:1;2011:18;;;2004:34;;;1917:18;;12401:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;12468:4:0;;11631:849;-1:-1:-1;;;11631:849:0:o;12488:294::-;1330:10;12571:1;12542:25;:11;:25;;12612:13;;12636:10;12612:13;12648:25;;;:11;:25;;;;;;;;12605:69;;-1:-1:-1;;;12605:69:0;;;;;1944:51:1;;;;2011:18;;;2004:34;-1:-1:-1;;;;;12612:13:0;;;;12605:30;;1917:18:1;;12605:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1330:10:0;12713:1;12685:25;;;:11;:25;;;;;;;;:29;;;12730:44;;1944:51:1;;;2011:18;;;2004:34;;;;12730:44:0;;1917:18:1;12730:44:0;;;;;;;12488:294::o;9436:78::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;9488:11:::1;:18:::0;;-1:-1:-1;;;;9488:18:0::1;-1:-1:-1::0;;;9488:18:0::1;::::0;;9436:78::o;8976:109::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;9049:28:::1;9068:8;9049:18;:28::i;:::-;8976:109:::0;:::o;11163:89::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;11229:15:::1;11217:9;:27:::0;11163:89::o;9992:167::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;10057:9:::1;8679:6:::0;;10072:31:::1;::::0;-1:-1:-1;;;;;8679:6:0;;;;10092;;10057:9;10072:31;10057:9;10072:31;10092:6;8679;10072:31:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10056:47;;;10122:4;10114:37;;;::::0;-1:-1:-1;;;10114:37:0;;4605:2:1;10114:37:0::1;::::0;::::1;4587:21:1::0;4644:2;4624:18;;;4617:30;-1:-1:-1;;;4663:18:1;;;4656:50;4723:18;;10114:37:0::1;4403:344:1::0;10114:37:0::1;10045:114;9992:167:::0;:::o;9522:78::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;;;;;;:::i;:::-;9587:5:::1;9573:19:::0;;-1:-1:-1;;;;9573:19:0::1;::::0;;9522:78::o;5200:98::-;5258:7;5285:5;5289:1;5285;:5;:::i;:::-;5278:12;5200:98;-1:-1:-1;;;5200:98:0:o;9093:266::-;-1:-1:-1;;;;;9181:22:0;;9159:110;;;;-1:-1:-1;;;9159:110:0;;5176:2:1;9159:110:0;;;5158:21:1;5215:2;5195:18;;;5188:30;5254:34;5234:18;;;5227:62;-1:-1:-1;;;5305:18:1;;;5298:36;5351:19;;9159:110:0;4974:402:1;9159:110:0;9306:6;;;9285:38;;-1:-1:-1;;;;;9285:38:0;;;;9306:6;;;9285:38;;;9334:6;:17;;-1:-1:-1;;;;;;9334:17:0;-1:-1:-1;;;;;9334:17:0;;;;;;;;;;9093:266::o;14:173:1:-;82:20;;-1:-1:-1;;;;;131:31:1;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;565:254::-;633:6;641;694:2;682:9;673:7;669:23;665:32;662:52;;;710:1;707;700:12;662:52;733:29;752:9;733:29;:::i;:::-;723:39;809:2;794:18;;;;781:32;;-1:-1:-1;;;565:254:1:o;824:180::-;883:6;936:2;924:9;915:7;911:23;907:32;904:52;;;952:1;949;942:12;904:52;-1:-1:-1;975:23:1;;824:180;-1:-1:-1;824:180:1:o;1409:356::-;1611:2;1593:21;;;1630:18;;;1623:30;1689:34;1684:2;1669:18;;1662:62;1756:2;1741:18;;1409:356::o;2049:277::-;2116:6;2169:2;2157:9;2148:7;2144:23;2140:32;2137:52;;;2185:1;2182;2175:12;2137:52;2217:9;2211:16;2270:5;2263:13;2256:21;2249:5;2246:32;2236:60;;2292:1;2289;2282:12;2331:127;2392:10;2387:3;2383:20;2380:1;2373:31;2423:4;2420:1;2413:15;2447:4;2444:1;2437:15;2463:168;2536:9;;;2567;;2584:15;;;2578:22;;2564:37;2554:71;;2605:18;;:::i;2636:125::-;2701:9;;;2722:10;;;2719:36;;;2735:18;;:::i;4752:217::-;4792:1;4818;4808:132;;4862:10;4857:3;4853:20;4850:1;4843:31;4897:4;4894:1;4887:15;4925:4;4922:1;4915:15;4808:132;-1:-1:-1;4954:9:1;;4752:217::o"},"gasEstimates":{"creation":{"codeDepositCost":"637000","executionCost":"infinite","totalCost":"infinite"},"external":{"":"207","baseDecimal()":"2351","buyWithUSDT(uint256)":"infinite","calcTokenAmount(uint256)":"infinite","claimETH(uint256)":"infinite","claimRewardToken()":"infinite","claimToken(address,uint256)":"infinite","getClaimAmount(address)":"2637","getClaimStatus()":"2421","getPrice()":"2370","owner()":"2368","renounceOwnership()":"30255","resetStartTime()":"24455","startClaim()":"26542","startTime()":"2396","stopClaim()":"26618","totalSaled()":"2352","transferOwnership(address)":"30473","usdtTotalSaled()":"2373","userDeposited(address)":"2553","userRewards(address)":"2532"},"internal":{"resetPrice(uint256)":"infinite"}},"methodIdentifiers":{"baseDecimal()":"db7b373e","buyWithUSDT(uint256)":"a7c60160","calcTokenAmount(uint256)":"7b7902dd","claimETH(uint256)":"fe96973a","claimRewardToken()":"afd18916","claimToken(address,uint256)":"1698755f","getClaimAmount(address)":"dde070e8","getClaimStatus()":"9b77c21a","getPrice()":"98d5fdca","owner()":"8da5cb5b","renounceOwnership()":"715018a6","resetStartTime()":"f42958be","startClaim()":"ecbfc077","startTime()":"78e97925","stopClaim()":"ff6c9bc9","totalSaled()":"68e453ed","transferOwnership(address)":"f2fde38b","usdtTotalSaled()":"dc13f7b5","userDeposited(address)":"8092be4a","userRewards(address)":"0660f1e8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"baseDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"calcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTotalSaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"IDO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    bool isclaimable = false;\\r\\n\\r\\n    function startClaim() external onlyOwner {\\r\\n        isclaimable = true;\\r\\n    }\\r\\n\\r\\n    function stopClaim() external onlyOwner {\\r\\n        isclaimable = false;\\r\\n    }\\r\\n\\r\\n    function getClaimStatus() external view returns (bool) {\\r\\n        return isclaimable;\\r\\n    }\\r\\n\\r\\n    modifier isClaim() {\\r\\n        require(isclaimable, \\\"Claim is not available now.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    uint256 hadcapUsd = 200000;\\r\\n    uint256 rewardAllocation = 100000000;\\r\\n    uint256 minUsdtAmount = 100;\\r\\n    uint256 maxUsdtAmount = 1000;\\r\\n\\r\\n    uint256 price;\\r\\n    uint256 public startTime;\\r\\n    uint256 public totalSaled;\\r\\n    uint256 public usdtTotalSaled;\\r\\n\\r\\n    uint256 public baseDecimal = 1000000;\\r\\n    address rewardAddress;\\r\\n    address usdtAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n    constructor(address _rewardAddress, address _usdtAddress) {\\r\\n        startTime = block.timestamp;\\r\\n        totalSaled = 0;\\r\\n        price = (hadcapUsd * baseDecimal).div(rewardAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        usdtAddress = _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function resetPrice(uint256 _price) private {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function resetStartTime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function calcTokenAmount(\\r\\n        uint256 usdAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price again.\\r\\n        if (usdtTotalSaled > hadcapUsd * baseDecimal) {\\r\\n            price = (usdtTotalSaled).div(rewardAllocation);\\r\\n            resetPrice(price);\\r\\n        }\\r\\n        amount = (usdAmount * baseDecimal).div(price) * 10 ** 12;\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint256 usdtAmount) external returns (bool) {\\r\\n        require(\\r\\n            maxUsdtAmount >= (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) &&\\r\\n                (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) >= minUsdtAmount,\\r\\n            \\\"Amount is allowed 100 - 1000.\\\"\\r\\n        );\\r\\n        uint256 amount = calcTokenAmount(usdtAmount);\\r\\n        totalSaled += amount;\\r\\n        usdtTotalSaled += usdtAmount;\\r\\n        require(\\r\\n            IERC20(usdtAddress).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                usdtAmount\\r\\n            ),\\r\\n            \\\"deposit failed\\\"\\r\\n        );\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += usdtAmount;\\r\\n        IERC20(usdtAddress).transfer(owner(), usdtAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 tokenPrice) {\\r\\n        tokenPrice = price;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xa84776e8cfb8258bb4b5f650febf1f29d18a615a37383a5c301b1fae1b9fc037\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/IDO.sol:IDO","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":529,"contract":"contracts/IDO.sol:IDO","label":"isclaimable","offset":20,"slot":"0","type":"t_bool"},{"astId":629,"contract":"contracts/IDO.sol:IDO","label":"hadcapUsd","offset":0,"slot":"1","type":"t_uint256"},{"astId":632,"contract":"contracts/IDO.sol:IDO","label":"rewardAllocation","offset":0,"slot":"2","type":"t_uint256"},{"astId":635,"contract":"contracts/IDO.sol:IDO","label":"minUsdtAmount","offset":0,"slot":"3","type":"t_uint256"},{"astId":638,"contract":"contracts/IDO.sol:IDO","label":"maxUsdtAmount","offset":0,"slot":"4","type":"t_uint256"},{"astId":640,"contract":"contracts/IDO.sol:IDO","label":"price","offset":0,"slot":"5","type":"t_uint256"},{"astId":642,"contract":"contracts/IDO.sol:IDO","label":"startTime","offset":0,"slot":"6","type":"t_uint256"},{"astId":644,"contract":"contracts/IDO.sol:IDO","label":"totalSaled","offset":0,"slot":"7","type":"t_uint256"},{"astId":646,"contract":"contracts/IDO.sol:IDO","label":"usdtTotalSaled","offset":0,"slot":"8","type":"t_uint256"},{"astId":649,"contract":"contracts/IDO.sol:IDO","label":"baseDecimal","offset":0,"slot":"9","type":"t_uint256"},{"astId":651,"contract":"contracts/IDO.sol:IDO","label":"rewardAddress","offset":0,"slot":"10","type":"t_address"},{"astId":653,"contract":"contracts/IDO.sol:IDO","label":"usdtAddress","offset":0,"slot":"11","type":"t_address"},{"astId":657,"contract":"contracts/IDO.sol:IDO","label":"userRewards","offset":0,"slot":"12","type":"t_mapping(t_address,t_uint256)"},{"astId":661,"contract":"contracts/IDO.sol:IDO","label":"userDeposited","offset":0,"slot":"13","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    bool isclaimable = false;\\r\\n\\r\\n    function startClaim() external onlyOwner {\\r\\n        isclaimable = true;\\r\\n    }\\r\\n\\r\\n    function stopClaim() external onlyOwner {\\r\\n        isclaimable = false;\\r\\n    }\\r\\n\\r\\n    function getClaimStatus() external view returns (bool) {\\r\\n        return isclaimable;\\r\\n    }\\r\\n\\r\\n    modifier isClaim() {\\r\\n        require(isclaimable, \\\"Claim is not available now.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    uint256 hadcapUsd = 200000;\\r\\n    uint256 rewardAllocation = 100000000;\\r\\n    uint256 minUsdtAmount = 100;\\r\\n    uint256 maxUsdtAmount = 1000;\\r\\n\\r\\n    uint256 price;\\r\\n    uint256 public startTime;\\r\\n    uint256 public totalSaled;\\r\\n    uint256 public usdtTotalSaled;\\r\\n\\r\\n    uint256 public baseDecimal = 1000000;\\r\\n    address rewardAddress;\\r\\n    address usdtAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n    constructor(address _rewardAddress, address _usdtAddress) {\\r\\n        startTime = block.timestamp;\\r\\n        totalSaled = 0;\\r\\n        price = (hadcapUsd * baseDecimal).div(rewardAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        usdtAddress = _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function resetPrice(uint256 _price) private {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function resetStartTime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function calcTokenAmount(\\r\\n        uint256 usdAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price again.\\r\\n        if (usdtTotalSaled > hadcapUsd * baseDecimal) {\\r\\n            price = (usdtTotalSaled).div(rewardAllocation);\\r\\n            resetPrice(price);\\r\\n        }\\r\\n        amount = (usdAmount * baseDecimal).div(price) * 10 ** 12;\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint256 usdtAmount) external returns (bool) {\\r\\n        require(\\r\\n            maxUsdtAmount >= (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) &&\\r\\n                (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) >= minUsdtAmount,\\r\\n            \\\"Amount is allowed 100 - 1000.\\\"\\r\\n        );\\r\\n        uint256 amount = calcTokenAmount(usdtAmount);\\r\\n        totalSaled += amount;\\r\\n        usdtTotalSaled += usdtAmount;\\r\\n        require(\\r\\n            IERC20(usdtAddress).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                usdtAmount\\r\\n            ),\\r\\n            \\\"deposit failed\\\"\\r\\n        );\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += usdtAmount;\\r\\n        IERC20(usdtAddress).transfer(owner(), usdtAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 tokenPrice) {\\r\\n        tokenPrice = price;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xa84776e8cfb8258bb4b5f650febf1f29d18a615a37383a5c301b1fae1b9fc037\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Ownable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_445":{"entryPoint":null,"id":445,"parameterSlots":0,"returnSlots":0},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506102b7806100616000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610251565b61012b565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146101855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b61018e81610191565b50565b6001600160a01b0381166101f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561026357600080fd5b81356001600160a01b038116811461027a57600080fd5b939250505056fea2646970667358221220b67ff4d81208434413c5119e9dbefeb6b2191cece53f4a28d7483e8424fbe55a64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0x2B7 DUP1 PUSH2 0x61 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0x191 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH32 0xF4D81208434413C5119E9DBEFEB6B2191CECE53F4A28D7483E8424FBE55A6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"8270:1092:0:-:0;;;8453:153;;;;;;;;;-1:-1:-1;8478:17:0;8521:18;;-1:-1:-1;;;;;;8521:18:0;1330:10;8521:18;;;;;8555:43;;1330:10;;;;8555:43;;8478:17;;8555:43;8467:139;8270:1092;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_523":{"entryPoint":401,"id":523,"parameterSlots":1,"returnSlots":0},"@owner_453":{"entryPoint":null,"id":453,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_486":{"entryPoint":130,"id":486,"parameterSlots":0,"returnSlots":0},"@transferOwnership_498":{"entryPoint":299,"id":498,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":593,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1278:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:102:1","statements":[{"nodeType":"YulAssignment","src":"125:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:1"},"nodeType":"YulFunctionCall","src":"133:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"203:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"194:3:1"},"nodeType":"YulFunctionCall","src":"194:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"207:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"190:3:1"},"nodeType":"YulFunctionCall","src":"190:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:1"},"nodeType":"YulFunctionCall","src":"178:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:1"},"nodeType":"YulFunctionCall","src":"160:51:1"},"nodeType":"YulExpressionStatement","src":"160:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:1","type":""}],"src":"14:203:1"},{"body":{"nodeType":"YulBlock","src":"292:216:1","statements":[{"body":{"nodeType":"YulBlock","src":"338:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"347:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"350:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"340:6:1"},"nodeType":"YulFunctionCall","src":"340:12:1"},"nodeType":"YulExpressionStatement","src":"340:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"313:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"322:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"309:3:1"},"nodeType":"YulFunctionCall","src":"309:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"334:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"305:3:1"},"nodeType":"YulFunctionCall","src":"305:32:1"},"nodeType":"YulIf","src":"302:52:1"},{"nodeType":"YulVariableDeclaration","src":"363:36:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"389:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"376:12:1"},"nodeType":"YulFunctionCall","src":"376:23:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"367:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"474:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"464:6:1"},"nodeType":"YulFunctionCall","src":"464:12:1"},"nodeType":"YulExpressionStatement","src":"464:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"421:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"432:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"452:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"443:3:1"},"nodeType":"YulFunctionCall","src":"443:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"456:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"439:3:1"},"nodeType":"YulFunctionCall","src":"439:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"428:3:1"},"nodeType":"YulFunctionCall","src":"428:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"418:2:1"},"nodeType":"YulFunctionCall","src":"418:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"411:6:1"},"nodeType":"YulFunctionCall","src":"411:50:1"},"nodeType":"YulIf","src":"408:70:1"},{"nodeType":"YulAssignment","src":"487:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"497:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"487:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"258:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"269:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"281:6:1","type":""}],"src":"222:286:1"},{"body":{"nodeType":"YulBlock","src":"687:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"704:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"715:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"697:6:1"},"nodeType":"YulFunctionCall","src":"697:21:1"},"nodeType":"YulExpressionStatement","src":"697:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"738:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"749:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:1"},"nodeType":"YulFunctionCall","src":"734:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"754:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:1"},"nodeType":"YulFunctionCall","src":"727:30:1"},"nodeType":"YulExpressionStatement","src":"727:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"777:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"788:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"773:3:1"},"nodeType":"YulFunctionCall","src":"773:18:1"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"793:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:1"},"nodeType":"YulFunctionCall","src":"766:62:1"},"nodeType":"YulExpressionStatement","src":"766:62:1"},{"nodeType":"YulAssignment","src":"837:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"849:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"860:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"845:3:1"},"nodeType":"YulFunctionCall","src":"845:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"837:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"664:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"678:4:1","type":""}],"src":"513:356:1"},{"body":{"nodeType":"YulBlock","src":"1048:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1065:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1076:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1058:6:1"},"nodeType":"YulFunctionCall","src":"1058:21:1"},"nodeType":"YulExpressionStatement","src":"1058:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1099:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1110:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1095:3:1"},"nodeType":"YulFunctionCall","src":"1095:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"1115:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1088:6:1"},"nodeType":"YulFunctionCall","src":"1088:30:1"},"nodeType":"YulExpressionStatement","src":"1088:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1138:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1149:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1134:3:1"},"nodeType":"YulFunctionCall","src":"1134:18:1"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"1154:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:1"},"nodeType":"YulFunctionCall","src":"1127:62:1"},"nodeType":"YulExpressionStatement","src":"1127:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1209:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1220:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1205:3:1"},"nodeType":"YulFunctionCall","src":"1205:18:1"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"1225:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1198:6:1"},"nodeType":"YulFunctionCall","src":"1198:36:1"},"nodeType":"YulExpressionStatement","src":"1198:36:1"},{"nodeType":"YulAssignment","src":"1243:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1255:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1266:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1251:3:1"},"nodeType":"YulFunctionCall","src":"1251:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1243:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1025:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1039:4:1","type":""}],"src":"874:402:1"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610251565b61012b565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146101855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b61018e81610191565b50565b6001600160a01b0381166101f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561026357600080fd5b81356001600160a01b038116811461027a57600080fd5b939250505056fea2646970667358221220b67ff4d81208434413c5119e9dbefeb6b2191cece53f4a28d7483e8424fbe55a64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0x191 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH32 0xF4D81208434413C5119E9DBEFEB6B2191CECE53F4A28D7483E8424FBE55A6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"8270:1092:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8828:140;;;:::i;:::-;;8614:79;8652:7;8679:6;8614:79;;;-1:-1:-1;;;;;8679:6:0;;;160:51:1;;8614:79:0;;;;;148:2:1;8614:79:0;;;8976:109;;;;;;:::i;:::-;;:::i;8828:140::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;715:2:1;8733:67:0;;;697:21:1;;;734:18;;;727:30;793:34;773:18;;;766:62;845:18;;8733:67:0;;;;;;;;;8927:1:::1;8911:6:::0;;8890:40:::1;::::0;-1:-1:-1;;;;;8911:6:0;;::::1;::::0;8890:40:::1;::::0;8927:1;;8890:40:::1;8958:1;8941:19:::0;;-1:-1:-1;;;;;;8941:19:0::1;::::0;;8828:140::o;8976:109::-;8741:6;;-1:-1:-1;;;;;8741:6:0;1330:10;8741:22;8733:67;;;;-1:-1:-1;;;8733:67:0;;715:2:1;8733:67:0;;;697:21:1;;;734:18;;;727:30;793:34;773:18;;;766:62;845:18;;8733:67:0;513:356:1;8733:67:0;9049:28:::1;9068:8;9049:18;:28::i;:::-;8976:109:::0;:::o;9093:266::-;-1:-1:-1;;;;;9181:22:0;;9159:110;;;;-1:-1:-1;;;9159:110:0;;1076:2:1;9159:110:0;;;1058:21:1;1115:2;1095:18;;;1088:30;1154:34;1134:18;;;1127:62;-1:-1:-1;;;1205:18:1;;;1198:36;1251:19;;9159:110:0;874:402:1;9159:110:0;9306:6;;;9285:38;;-1:-1:-1;;;;;9285:38:0;;;;9306:6;;;9285:38;;;9334:6;:17;;-1:-1:-1;;;;;;9334:17:0;-1:-1:-1;;;;;9334:17:0;;;;;;;;;;9093:266::o;222:286:1:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:1;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:1:o"},"gasEstimates":{"creation":{"codeDepositCost":"139000","executionCost":"25956","totalCost":"164956"},"external":{"owner()":"2292","renounceOwnership()":"30143","transferOwnership(address)":"30416"},"internal":{"_transferOwnership(address)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    bool isclaimable = false;\\r\\n\\r\\n    function startClaim() external onlyOwner {\\r\\n        isclaimable = true;\\r\\n    }\\r\\n\\r\\n    function stopClaim() external onlyOwner {\\r\\n        isclaimable = false;\\r\\n    }\\r\\n\\r\\n    function getClaimStatus() external view returns (bool) {\\r\\n        return isclaimable;\\r\\n    }\\r\\n\\r\\n    modifier isClaim() {\\r\\n        require(isclaimable, \\\"Claim is not available now.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    uint256 hadcapUsd = 200000;\\r\\n    uint256 rewardAllocation = 100000000;\\r\\n    uint256 minUsdtAmount = 100;\\r\\n    uint256 maxUsdtAmount = 1000;\\r\\n\\r\\n    uint256 price;\\r\\n    uint256 public startTime;\\r\\n    uint256 public totalSaled;\\r\\n    uint256 public usdtTotalSaled;\\r\\n\\r\\n    uint256 public baseDecimal = 1000000;\\r\\n    address rewardAddress;\\r\\n    address usdtAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n    constructor(address _rewardAddress, address _usdtAddress) {\\r\\n        startTime = block.timestamp;\\r\\n        totalSaled = 0;\\r\\n        price = (hadcapUsd * baseDecimal).div(rewardAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        usdtAddress = _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function resetPrice(uint256 _price) private {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function resetStartTime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function calcTokenAmount(\\r\\n        uint256 usdAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price again.\\r\\n        if (usdtTotalSaled > hadcapUsd * baseDecimal) {\\r\\n            price = (usdtTotalSaled).div(rewardAllocation);\\r\\n            resetPrice(price);\\r\\n        }\\r\\n        amount = (usdAmount * baseDecimal).div(price) * 10 ** 12;\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint256 usdtAmount) external returns (bool) {\\r\\n        require(\\r\\n            maxUsdtAmount >= (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) &&\\r\\n                (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) >= minUsdtAmount,\\r\\n            \\\"Amount is allowed 100 - 1000.\\\"\\r\\n        );\\r\\n        uint256 amount = calcTokenAmount(usdtAmount);\\r\\n        totalSaled += amount;\\r\\n        usdtTotalSaled += usdtAmount;\\r\\n        require(\\r\\n            IERC20(usdtAddress).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                usdtAmount\\r\\n            ),\\r\\n            \\\"deposit failed\\\"\\r\\n        );\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += usdtAmount;\\r\\n        IERC20(usdtAddress).transfer(owner(), usdtAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 tokenPrice) {\\r\\n        tokenPrice = price;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xa84776e8cfb8258bb4b5f650febf1f29d18a615a37383a5c301b1fae1b9fc037\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/IDO.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cff95180b8823c460bf72b1fee84e018f04f7a72e6ec61062c2faa96b1625bec64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xF9 MLOAD DUP1 0xB8 DUP3 EXTCODECOPY CHAINID SIGNEXTEND 0xF7 0x2B 0x1F 0xEE DUP5 0xE0 XOR CREATE 0x4F PUSH27 0x72E6EC61062C2FAA96B1625BEC64736F6C63430008120033000000 ","sourceMap":"1588:6636:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1588:6636:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cff95180b8823c460bf72b1fee84e018f04f7a72e6ec61062c2faa96b1625bec64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xF9 MLOAD DUP1 0xB8 DUP3 EXTCODECOPY CHAINID SIGNEXTEND 0xF7 0x2B 0x1F 0xEE DUP5 0xE0 XOR CREATE 0x4F PUSH27 0x72E6EC61062C2FAA96B1625BEC64736F6C63430008120033000000 ","sourceMap":"1588:6636:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    bool isclaimable = false;\\r\\n\\r\\n    function startClaim() external onlyOwner {\\r\\n        isclaimable = true;\\r\\n    }\\r\\n\\r\\n    function stopClaim() external onlyOwner {\\r\\n        isclaimable = false;\\r\\n    }\\r\\n\\r\\n    function getClaimStatus() external view returns (bool) {\\r\\n        return isclaimable;\\r\\n    }\\r\\n\\r\\n    modifier isClaim() {\\r\\n        require(isclaimable, \\\"Claim is not available now.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    uint256 hadcapUsd = 200000;\\r\\n    uint256 rewardAllocation = 100000000;\\r\\n    uint256 minUsdtAmount = 100;\\r\\n    uint256 maxUsdtAmount = 1000;\\r\\n\\r\\n    uint256 price;\\r\\n    uint256 public startTime;\\r\\n    uint256 public totalSaled;\\r\\n    uint256 public usdtTotalSaled;\\r\\n\\r\\n    uint256 public baseDecimal = 1000000;\\r\\n    address rewardAddress;\\r\\n    address usdtAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n    constructor(address _rewardAddress, address _usdtAddress) {\\r\\n        startTime = block.timestamp;\\r\\n        totalSaled = 0;\\r\\n        price = (hadcapUsd * baseDecimal).div(rewardAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        usdtAddress = _usdtAddress;\\r\\n    }\\r\\n\\r\\n    function resetPrice(uint256 _price) private {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function resetStartTime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function calcTokenAmount(\\r\\n        uint256 usdAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price again.\\r\\n        if (usdtTotalSaled > hadcapUsd * baseDecimal) {\\r\\n            price = (usdtTotalSaled).div(rewardAllocation);\\r\\n            resetPrice(price);\\r\\n        }\\r\\n        amount = (usdAmount * baseDecimal).div(price) * 10 ** 12;\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint256 usdtAmount) external returns (bool) {\\r\\n        require(\\r\\n            maxUsdtAmount >= (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) &&\\r\\n                (userDeposited[_msgSender()]+usdtAmount).div(baseDecimal) >= minUsdtAmount,\\r\\n            \\\"Amount is allowed 100 - 1000.\\\"\\r\\n        );\\r\\n        uint256 amount = calcTokenAmount(usdtAmount);\\r\\n        totalSaled += amount;\\r\\n        usdtTotalSaled += usdtAmount;\\r\\n        require(\\r\\n            IERC20(usdtAddress).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                usdtAmount\\r\\n            ),\\r\\n            \\\"deposit failed\\\"\\r\\n        );\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += usdtAmount;\\r\\n        IERC20(usdtAddress).transfer(owner(), usdtAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 tokenPrice) {\\r\\n        tokenPrice = price;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xa84776e8cfb8258bb4b5f650febf1f29d18a615a37383a5c301b1fae1b9fc037\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}