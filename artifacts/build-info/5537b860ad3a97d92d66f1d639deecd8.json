{"id":"5537b860ad3a97d92d66f1d639deecd8","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"contracts/IDO.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/* --------- Access Control --------- */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\r\n    uint public saleIndex = 0;\r\n\r\n    /*\r\n     * @dev stop sale\r\n     */\r\n    function stopSale() external onlyOwner {\r\n        saleIndex = 3;\r\n    }\r\n\r\n    /*\r\n     * @dev withdraw reward token or usdt\r\n     * @param tokenAddress : Token address\r\n     */\r\n    function claimToken(\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(owner(), amount);\r\n    }\r\n\r\n    /*\r\n     * @dev withdraw ETH\r\n     */\r\n    function claimETH(uint256 amount) external onlyOwner {\r\n        (bool sent, ) = owner().call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}\r\n\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function verifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(\r\n        bytes32[] memory proof,\r\n        bytes32 leaf\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bytes32 leaf\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\r\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\r\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\r\n     * respectively.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\r\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\r\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 proofLen = proof.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(\r\n            leavesLen + proofLen - 1 == totalHashes,\r\n            \"MerkleProof: invalid multiproof\"\r\n        );\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen\r\n                ? leaves[leafPos++]\r\n                : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 proofLen = proof.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(\r\n            leavesLen + proofLen - 1 == totalHashes,\r\n            \"MerkleProof: invalid multiproof\"\r\n        );\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen\r\n                ? leaves[leafPos++]\r\n                : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(\r\n        bytes32 a,\r\n        bytes32 b\r\n    ) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\ncontract IDO is Claimable {\r\n    using SafeMath for uint256;\r\n    event Buy(address to, uint256 amount);\r\n    event Claim(address to, uint256 amount);\r\n    bytes32 public rootHash;\r\n    // private sale hardcap 53 eth\r\n    // 0.01 eth to 10eth\r\n    uint256 privateSaleHardcap = 53 * 1e18;\r\n    uint256 minETHAmount = 1e16;\r\n    uint256 maxETHAmount = 1e19;\r\n\r\n    // public sale hardcap 65 eth\r\n    uint256 publicSaleHardcap = 65 * 1e18;\r\n\r\n    // token price 1 token   = tokenPrice ETH\r\n    uint256 tokenPrice;\r\n\r\n    uint256 public privateSaleTotalSaled = 0;\r\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\r\n    uint256 public publicSaleTotalSaled = 0;\r\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\r\n\r\n    address rewardAddress;\r\n\r\n    mapping(address => uint256) public userRewards;\r\n    mapping(address => uint256) public userDeposited;\r\n\r\n    constructor(address _rewardAddress, bytes32 _rootHash) {\r\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\r\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\r\n        rewardAddress = _rewardAddress;\r\n        rootHash = _rootHash;\r\n    }\r\n\r\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\r\n        rootHash = _rootHash;\r\n    }\r\n\r\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\r\n        require(\r\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\r\n                saleIndex == 2,\r\n            \"Not WhiteListed Address\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isValidProof(\r\n        bytes32[] calldata proof,\r\n        bytes32 leaf\r\n    ) private view returns (bool) {\r\n        return MerkleProof.verify(proof, rootHash, leaf);\r\n    }\r\n\r\n    // -------- Owner Functions ----------\r\n\r\n    /*\r\n     * @dev reset token price\r\n     * @Param _price: set price with\r\n     */\r\n    function resetPrice(uint256 _price) public onlyOwner {\r\n        tokenPrice = _price;\r\n    }\r\n\r\n    /*\r\n     * @dev start sale\r\n     * @dev 1: private sale,2:public sale\r\n     * @param _saleIndex : sale index\r\n     */\r\n    function startSale(uint _saleIndex) external onlyOwner {\r\n        saleIndex = _saleIndex;\r\n        if (saleIndex == 1) {\r\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\r\n        } else if (saleIndex == 2) {\r\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\r\n        }\r\n    }\r\n\r\n    // ---------- owner functions end ----------------\r\n\r\n    /*\r\n     * @dev calcuate token admoutn from eth\r\n     * @Param _ethAmount: eth amount\r\n     */\r\n    function calcTokenAmount(\r\n        uint256 _ethAmount\r\n    ) public returns (uint256 amount) {\r\n        // calculate price for only public sale\r\n        if (\r\n            saleIndex == 2 &&\r\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\r\n        ) {\r\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\r\n                publicSaleAllocation\r\n            );\r\n            resetPrice(tokenPrice);\r\n        }\r\n        amount = (_ethAmount).div(tokenPrice);\r\n    }\r\n\r\n    /*\r\n     * @dev buy token from eth\r\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\r\n     * @dev on private sale Check for hardcap\r\n     */\r\n    function buy(\r\n        bytes32[] calldata proof\r\n    ) public payable isWhiteListedAddress(proof) {\r\n        require(saleIndex > 0 && saleIndex < 3, \"Not allowed to buy now.\");\r\n        if (saleIndex == 1) {\r\n            require(\r\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\r\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\r\n                \"Amount is allowed 0.01 eth to 10 eth for only listed address.\"\r\n            );\r\n            require(\r\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\r\n                \"Cannot buy this amount\"\r\n            );\r\n        }\r\n\r\n        uint256 amount = calcTokenAmount(msg.value);\r\n        if (saleIndex == 1) {\r\n            privateSaleTotalSaled += msg.value;\r\n        } else {\r\n            publicSaleTotalSaled += msg.value;\r\n        }\r\n        (bool sent, ) = owner().call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        userRewards[_msgSender()] += amount;\r\n        userDeposited[_msgSender()] += msg.value;\r\n    }\r\n\r\n    function claimRewardToken() public {\r\n        require(userRewards[_msgSender()] >= 0, \"Please buy token.\");\r\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\r\n        userRewards[_msgSender()] = 0;\r\n        emit Claim(msg.sender, userRewards[_msgSender()]);\r\n    }\r\n\r\n    function getClaimAmount(\r\n        address userAddress\r\n    ) public view returns (uint256 claimAmount) {\r\n        claimAmount = userRewards[userAddress];\r\n    }\r\n\r\n    function getPrice() public view returns (uint256 price) {\r\n        price = tokenPrice;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/IDO.sol":{"ast":{"absolutePath":"contracts/IDO.sol","exportedSymbols":{"Claimable":[582],"Context":[105],"IDO":[1529],"IERC20":[84],"MerkleProof":[1107],"Ownable":[524],"SafeMath":[414]},"id":1530,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8"],"nodeType":"PragmaDirective","src":"39:21:0"},{"id":2,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"62:33:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":84,"linearizedBaseContracts":[84],"name":"IERC20","nameLocation":"145:6:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":10,"name":"Approval","nameLocation":"165:8:0","nodeType":"EventDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"200:5:0","nodeType":"VariableDeclaration","scope":10,"src":"184:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"184:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"232:7:0","nodeType":"VariableDeclaration","scope":10,"src":"216:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"216:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"258:5:0","nodeType":"VariableDeclaration","scope":10,"src":"250:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7,"name":"uint256","nodeType":"ElementaryTypeName","src":"250:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"173:97:0"},"src":"159:112:0"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":18,"name":"Transfer","nameLocation":"283:8:0","nodeType":"EventDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"308:4:0","nodeType":"VariableDeclaration","scope":18,"src":"292:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"292:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"330:2:0","nodeType":"VariableDeclaration","scope":18,"src":"314:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"314:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"342:5:0","nodeType":"VariableDeclaration","scope":18,"src":"334:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint256","nodeType":"ElementaryTypeName","src":"334:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"291:57:0"},"src":"277:72:0"},{"functionSelector":"06fdde03","id":23,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"366:4:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"370:2:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":23,"src":"396:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":20,"name":"string","nodeType":"ElementaryTypeName","src":"396:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"395:15:0"},"scope":84,"src":"357:54:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":28,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"428:6:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[],"src":"434:2:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":28,"src":"460:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":25,"name":"string","nodeType":"ElementaryTypeName","src":"460:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"459:15:0"},"scope":84,"src":"419:56:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":33,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"492:8:0","nodeType":"FunctionDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"500:2:0"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":33,"src":"526:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":30,"name":"uint8","nodeType":"ElementaryTypeName","src":"526:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"525:7:0"},"scope":84,"src":"483:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":38,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"550:11:0","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[],"src":"561:2:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":38,"src":"587:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":35,"name":"uint256","nodeType":"ElementaryTypeName","src":"587:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"586:9:0"},"scope":84,"src":"541:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":45,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"613:9:0","nodeType":"FunctionDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"owner","nameLocation":"631:5:0","nodeType":"VariableDeclaration","scope":45,"src":"623:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"623:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"622:15:0"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":45,"src":"661:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"660:9:0"},"scope":84,"src":"604:66:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":54,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"687:9:0","nodeType":"FunctionDefinition","parameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"owner","nameLocation":"715:5:0","nodeType":"VariableDeclaration","scope":54,"src":"707:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":46,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49,"mutability":"mutable","name":"spender","nameLocation":"739:7:0","nodeType":"VariableDeclaration","scope":54,"src":"731:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"731:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"696:57:0"},"returnParameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"777:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"776:9:0"},"scope":84,"src":"678:108:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":63,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"803:7:0","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"spender","nameLocation":"819:7:0","nodeType":"VariableDeclaration","scope":63,"src":"811:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"811:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"value","nameLocation":"836:5:0","nodeType":"VariableDeclaration","scope":63,"src":"828:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57,"name":"uint256","nodeType":"ElementaryTypeName","src":"828:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"810:32:0"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63,"src":"861:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":60,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:0"},"scope":84,"src":"794:73:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":72,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"884:8:0","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"to","nameLocation":"901:2:0","nodeType":"VariableDeclaration","scope":72,"src":"893:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"value","nameLocation":"913:5:0","nodeType":"VariableDeclaration","scope":72,"src":"905:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint256","nodeType":"ElementaryTypeName","src":"905:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"892:27:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":72,"src":"938:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69,"name":"bool","nodeType":"ElementaryTypeName","src":"938:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"937:6:0"},"scope":84,"src":"875:69:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":83,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"961:12:0","nodeType":"FunctionDefinition","parameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"from","nameLocation":"992:4:0","nodeType":"VariableDeclaration","scope":83,"src":"984:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"984:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"to","nameLocation":"1015:2:0","nodeType":"VariableDeclaration","scope":83,"src":"1007:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":78,"mutability":"mutable","name":"value","nameLocation":"1036:5:0","nodeType":"VariableDeclaration","scope":83,"src":"1028:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"1028:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"973:75:0"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":83,"src":"1067:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80,"name":"bool","nodeType":"ElementaryTypeName","src":"1067:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1066:6:0"},"scope":84,"src":"952:121:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1530,"src":"135:941:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":105,"linearizedBaseContracts":[105],"name":"Context","nameLocation":"1089:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":92,"nodeType":"Block","src":"1314:36:0","statements":[{"expression":{"expression":{"id":89,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1332:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1336:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1332:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":88,"id":91,"nodeType":"Return","src":"1325:17:0"}]},"id":93,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"1269:10:0","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"1279:2:0"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":87,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":93,"src":"1305:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":86,"name":"address","nodeType":"ElementaryTypeName","src":"1305:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1304:9:0"},"scope":105,"src":"1260:90:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":103,"nodeType":"Block","src":"1415:168:0","statements":[{"expression":{"id":98,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1426:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$105","typeString":"contract Context"}},"id":99,"nodeType":"ExpressionStatement","src":"1426:4:0"},{"expression":{"expression":{"id":100,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1567:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1571:4:0","memberName":"data","nodeType":"MemberAccess","src":"1567:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":97,"id":102,"nodeType":"Return","src":"1560:15:0"}]},"id":104,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1367:8:0","nodeType":"FunctionDefinition","parameters":{"id":94,"nodeType":"ParameterList","parameters":[],"src":"1375:2:0"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":104,"src":"1401:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":95,"name":"bytes","nodeType":"ElementaryTypeName","src":"1401:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1400:14:0"},"scope":105,"src":"1358:225:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1530,"src":"1080:506:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":414,"linearizedBaseContracts":[414],"name":"SafeMath","nameLocation":"1598:8:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":136,"nodeType":"Block","src":"1856:146:0","statements":[{"id":135,"nodeType":"UncheckedBlock","src":"1867:128:0","statements":[{"assignments":[118],"declarations":[{"constant":false,"id":118,"mutability":"mutable","name":"c","nameLocation":"1900:1:0","nodeType":"VariableDeclaration","scope":135,"src":"1892:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1892:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":122,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":119,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"1904:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":120,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1908:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1904:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1892:17:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":123,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1928:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":124,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"1932:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1928:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":130,"nodeType":"IfStatement","src":"1924:28:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1943:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":128,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1942:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":116,"id":129,"nodeType":"Return","src":"1935:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1975:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":132,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1981:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1974:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":116,"id":134,"nodeType":"Return","src":"1967:16:0"}]}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"1614:135:0","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":137,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"1764:6:0","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"a","nameLocation":"1789:1:0","nodeType":"VariableDeclaration","scope":137,"src":"1781:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1781:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":110,"mutability":"mutable","name":"b","nameLocation":"1809:1:0","nodeType":"VariableDeclaration","scope":137,"src":"1801:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":109,"name":"uint256","nodeType":"ElementaryTypeName","src":"1801:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1770:47:0"},"returnParameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":137,"src":"1841:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":112,"name":"bool","nodeType":"ElementaryTypeName","src":"1841:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":137,"src":"1847:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1847:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1840:15:0"},"scope":414,"src":"1755:247:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":164,"nodeType":"Block","src":"2255:118:0","statements":[{"id":163,"nodeType":"UncheckedBlock","src":"2266:100:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":149,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"2295:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":150,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2299:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2295:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":156,"nodeType":"IfStatement","src":"2291:28:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2310:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2317:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":154,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2309:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":148,"id":155,"nodeType":"Return","src":"2302:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2342:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":158,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2348:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":159,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"2352:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2348:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":161,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2341:13:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":148,"id":162,"nodeType":"Return","src":"2334:20:0"}]}]},"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"2010:138:0","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":165,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"2163:6:0","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"a","nameLocation":"2188:1:0","nodeType":"VariableDeclaration","scope":165,"src":"2180:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"2180:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"b","nameLocation":"2208:1:0","nodeType":"VariableDeclaration","scope":165,"src":"2200:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"2200:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2169:47:0"},"returnParameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":165,"src":"2240:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":144,"name":"bool","nodeType":"ElementaryTypeName","src":"2240:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":165,"src":"2246:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2246:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2239:15:0"},"scope":414,"src":"2154:219:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":206,"nodeType":"Block","src":"2629:427:0","statements":[{"id":205,"nodeType":"UncheckedBlock","src":"2640:409:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":177,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"2902:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2907:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2902:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":184,"nodeType":"IfStatement","src":"2898:28:0","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2918:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2924:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":182,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2917:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":176,"id":183,"nodeType":"Return","src":"2910:16:0"}},{"assignments":[186],"declarations":[{"constant":false,"id":186,"mutability":"mutable","name":"c","nameLocation":"2949:1:0","nodeType":"VariableDeclaration","scope":205,"src":"2941:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2941:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":190,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":187,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"2953:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":188,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"2957:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2953:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2941:17:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":191,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"2977:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"2981:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2977:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":194,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"2986:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2977:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":200,"nodeType":"IfStatement","src":"2973:33:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2997:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3004:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2996:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":176,"id":199,"nodeType":"Return","src":"2989:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3029:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":202,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"3035:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3028:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":176,"id":204,"nodeType":"Return","src":"3021:16:0"}]}]},"documentation":{"id":166,"nodeType":"StructuredDocumentation","src":"2381:141:0","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":207,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"2537:6:0","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":168,"mutability":"mutable","name":"a","nameLocation":"2562:1:0","nodeType":"VariableDeclaration","scope":207,"src":"2554:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"2554:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"b","nameLocation":"2582:1:0","nodeType":"VariableDeclaration","scope":207,"src":"2574:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"2574:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2543:47:0"},"returnParameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":207,"src":"2614:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"2614:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":207,"src":"2620:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"2620:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2613:15:0"},"scope":414,"src":"2528:528:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"3313:119:0","statements":[{"id":233,"nodeType":"UncheckedBlock","src":"3324:101:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":219,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"3353:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3358:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3353:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":226,"nodeType":"IfStatement","src":"3349:29:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3369:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3376:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3368:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":218,"id":225,"nodeType":"Return","src":"3361:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3401:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"3407:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":229,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"3411:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3407:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":231,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3400:13:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":218,"id":232,"nodeType":"Return","src":"3393:20:0"}]}]},"documentation":{"id":208,"nodeType":"StructuredDocumentation","src":"3064:142:0","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":235,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"3221:6:0","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"a","nameLocation":"3246:1:0","nodeType":"VariableDeclaration","scope":235,"src":"3238:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":209,"name":"uint256","nodeType":"ElementaryTypeName","src":"3238:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":212,"mutability":"mutable","name":"b","nameLocation":"3266:1:0","nodeType":"VariableDeclaration","scope":235,"src":"3258:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"3258:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3227:47:0"},"returnParameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"3298:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":214,"name":"bool","nodeType":"ElementaryTypeName","src":"3298:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"3304:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":216,"name":"uint256","nodeType":"ElementaryTypeName","src":"3304:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3297:15:0"},"scope":414,"src":"3212:220:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":262,"nodeType":"Block","src":"3699:119:0","statements":[{"id":261,"nodeType":"UncheckedBlock","src":"3710:101:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":247,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"3739:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3744:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3739:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":254,"nodeType":"IfStatement","src":"3735:29:0","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3755:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3762:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":252,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3754:10:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":246,"id":253,"nodeType":"Return","src":"3747:17:0"}},{"expression":{"components":[{"hexValue":"74727565","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3787:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":256,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"3793:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":257,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"3797:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3793:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3786:13:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":246,"id":260,"nodeType":"Return","src":"3779:20:0"}]}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"3440:152:0","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":263,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"3607:6:0","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"a","nameLocation":"3632:1:0","nodeType":"VariableDeclaration","scope":263,"src":"3624:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":237,"name":"uint256","nodeType":"ElementaryTypeName","src":"3624:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"b","nameLocation":"3652:1:0","nodeType":"VariableDeclaration","scope":263,"src":"3644:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":239,"name":"uint256","nodeType":"ElementaryTypeName","src":"3644:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3613:47:0"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":263,"src":"3684:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":242,"name":"bool","nodeType":"ElementaryTypeName","src":"3684:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":263,"src":"3690:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"3690:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3683:15:0"},"scope":414,"src":"3598:220:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":277,"nodeType":"Block","src":"4132:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"4150:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"4154:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4150:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":272,"id":276,"nodeType":"Return","src":"4143:12:0"}]},"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"3826:233:0","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":278,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"4074:3:0","nodeType":"FunctionDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"a","nameLocation":"4086:1:0","nodeType":"VariableDeclaration","scope":278,"src":"4078:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"4078:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":268,"mutability":"mutable","name":"b","nameLocation":"4097:1:0","nodeType":"VariableDeclaration","scope":278,"src":"4089:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":267,"name":"uint256","nodeType":"ElementaryTypeName","src":"4089:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4077:22:0"},"returnParameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":278,"src":"4123:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint256","nodeType":"ElementaryTypeName","src":"4123:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4122:9:0"},"scope":414,"src":"4065:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":292,"nodeType":"Block","src":"4513:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":288,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"4531:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":289,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4535:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4531:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":287,"id":291,"nodeType":"Return","src":"4524:12:0"}]},"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"4171:269:0","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":293,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4455:3:0","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"a","nameLocation":"4467:1:0","nodeType":"VariableDeclaration","scope":293,"src":"4459:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"b","nameLocation":"4478:1:0","nodeType":"VariableDeclaration","scope":293,"src":"4470:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"4470:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4458:22:0"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"4504:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"4504:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4503:9:0"},"scope":414,"src":"4446:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":307,"nodeType":"Block","src":"4870:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":303,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"4888:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":304,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"4892:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4888:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":302,"id":306,"nodeType":"Return","src":"4881:12:0"}]},"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"4552:245:0","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":308,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"4812:3:0","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"a","nameLocation":"4824:1:0","nodeType":"VariableDeclaration","scope":308,"src":"4816:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"4816:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":298,"mutability":"mutable","name":"b","nameLocation":"4835:1:0","nodeType":"VariableDeclaration","scope":308,"src":"4827:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"4827:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4815:22:0"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":308,"src":"4861:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"4861:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4860:9:0"},"scope":414,"src":"4803:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":322,"nodeType":"Block","src":"5269:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"5287:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":319,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"5291:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5287:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":317,"id":321,"nodeType":"Return","src":"5280:12:0"}]},"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"4909:287:0","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":323,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5211:3:0","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"a","nameLocation":"5223:1:0","nodeType":"VariableDeclaration","scope":323,"src":"5215:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"5215:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"b","nameLocation":"5234:1:0","nodeType":"VariableDeclaration","scope":323,"src":"5226:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":312,"name":"uint256","nodeType":"ElementaryTypeName","src":"5226:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5214:22:0"},"returnParameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":323,"src":"5260:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":315,"name":"uint256","nodeType":"ElementaryTypeName","src":"5260:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5259:9:0"},"scope":414,"src":"5202:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":337,"nodeType":"Block","src":"5834:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":333,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"5852:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":334,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"5856:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5852:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":332,"id":336,"nodeType":"Return","src":"5845:12:0"}]},"documentation":{"id":324,"nodeType":"StructuredDocumentation","src":"5308:453:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":338,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"5776:3:0","nodeType":"FunctionDefinition","parameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"a","nameLocation":"5788:1:0","nodeType":"VariableDeclaration","scope":338,"src":"5780:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"5780:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":328,"mutability":"mutable","name":"b","nameLocation":"5799:1:0","nodeType":"VariableDeclaration","scope":338,"src":"5791:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":327,"name":"uint256","nodeType":"ElementaryTypeName","src":"5791:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5779:22:0"},"returnParameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":338,"src":"5825:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":330,"name":"uint256","nodeType":"ElementaryTypeName","src":"5825:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5824:9:0"},"scope":414,"src":"5767:98:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":362,"nodeType":"Block","src":"6473:111:0","statements":[{"id":361,"nodeType":"UncheckedBlock","src":"6484:93:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":351,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"6517:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":352,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"6522:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6517:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":354,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"6525:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6509:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6509:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":356,"nodeType":"ExpressionStatement","src":"6509:29:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":357,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"6560:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"6564:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6560:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":349,"id":360,"nodeType":"Return","src":"6553:12:0"}]}]},"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"5873:465:0","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":363,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"6353:3:0","nodeType":"FunctionDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"a","nameLocation":"6375:1:0","nodeType":"VariableDeclaration","scope":363,"src":"6367:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":340,"name":"uint256","nodeType":"ElementaryTypeName","src":"6367:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":343,"mutability":"mutable","name":"b","nameLocation":"6395:1:0","nodeType":"VariableDeclaration","scope":363,"src":"6387:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":342,"name":"uint256","nodeType":"ElementaryTypeName","src":"6387:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"errorMessage","nameLocation":"6421:12:0","nodeType":"VariableDeclaration","scope":363,"src":"6407:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":344,"name":"string","nodeType":"ElementaryTypeName","src":"6407:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6356:84:0"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":363,"src":"6464:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":347,"name":"uint256","nodeType":"ElementaryTypeName","src":"6464:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6463:9:0"},"scope":414,"src":"6344:240:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":387,"nodeType":"Block","src":"7211:110:0","statements":[{"id":386,"nodeType":"UncheckedBlock","src":"7222:92:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":376,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"7255:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7259:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7255:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":379,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"7262:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7247:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7247:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"7247:28:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":382,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"7297:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":383,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"7301:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7297:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":374,"id":385,"nodeType":"Return","src":"7290:12:0"}]}]},"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"6592:484:0","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":388,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"7091:3:0","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"a","nameLocation":"7113:1:0","nodeType":"VariableDeclaration","scope":388,"src":"7105:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":365,"name":"uint256","nodeType":"ElementaryTypeName","src":"7105:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"b","nameLocation":"7133:1:0","nodeType":"VariableDeclaration","scope":388,"src":"7125:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":367,"name":"uint256","nodeType":"ElementaryTypeName","src":"7125:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"errorMessage","nameLocation":"7159:12:0","nodeType":"VariableDeclaration","scope":388,"src":"7145:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":369,"name":"string","nodeType":"ElementaryTypeName","src":"7145:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7094:84:0"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":388,"src":"7202:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint256","nodeType":"ElementaryTypeName","src":"7202:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7201:9:0"},"scope":414,"src":"7082:239:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":412,"nodeType":"Block","src":"8113:110:0","statements":[{"id":411,"nodeType":"UncheckedBlock","src":"8124:92:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":401,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"8157:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8161:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8157:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":404,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"8164:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":400,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8149:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":406,"nodeType":"ExpressionStatement","src":"8149:28:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":407,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"8199:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":408,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"8203:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8199:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":399,"id":410,"nodeType":"Return","src":"8192:12:0"}]}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"7329:649:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":413,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"7993:3:0","nodeType":"FunctionDefinition","parameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"a","nameLocation":"8015:1:0","nodeType":"VariableDeclaration","scope":413,"src":"8007:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":390,"name":"uint256","nodeType":"ElementaryTypeName","src":"8007:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":393,"mutability":"mutable","name":"b","nameLocation":"8035:1:0","nodeType":"VariableDeclaration","scope":413,"src":"8027:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"8027:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":395,"mutability":"mutable","name":"errorMessage","nameLocation":"8061:12:0","nodeType":"VariableDeclaration","scope":413,"src":"8047:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":394,"name":"string","nodeType":"ElementaryTypeName","src":"8047:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7996:84:0"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"8104:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":397,"name":"uint256","nodeType":"ElementaryTypeName","src":"8104:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8103:9:0"},"scope":414,"src":"7984:239:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1530,"src":"1590:6636:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":415,"name":"Context","nameLocations":["8292:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"8292:7:0"},"id":416,"nodeType":"InheritanceSpecifier","src":"8292:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":524,"linearizedBaseContracts":[524,105],"name":"Ownable","nameLocation":"8281:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":418,"mutability":"mutable","name":"_owner","nameLocation":"8323:6:0","nodeType":"VariableDeclaration","scope":524,"src":"8307:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":417,"name":"address","nodeType":"ElementaryTypeName","src":"8307:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":424,"name":"OwnershipTransferred","nameLocation":"8344:20:0","nodeType":"EventDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"8391:13:0","nodeType":"VariableDeclaration","scope":424,"src":"8375:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"8375:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":422,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"8431:8:0","nodeType":"VariableDeclaration","scope":424,"src":"8415:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"8415:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8364:82:0"},"src":"8338:109:0"},{"body":{"id":444,"nodeType":"Block","src":"8469:139:0","statements":[{"assignments":[428],"declarations":[{"constant":false,"id":428,"mutability":"mutable","name":"msgSender","nameLocation":"8488:9:0","nodeType":"VariableDeclaration","scope":444,"src":"8480:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"8480:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":431,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":429,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"8500:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8500:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8480:32:0"},{"expression":{"id":434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":432,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8523:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":433,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"8532:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8523:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":435,"nodeType":"ExpressionStatement","src":"8523:18:0"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8586:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8578:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":437,"name":"address","nodeType":"ElementaryTypeName","src":"8578:7:0","typeDescriptions":{}}},"id":440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8578:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":441,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"8590:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":436,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"8557:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8557:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":443,"nodeType":"EmitStatement","src":"8552:48:0"}]},"id":445,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[],"src":"8466:2:0"},"returnParameters":{"id":426,"nodeType":"ParameterList","parameters":[],"src":"8469:0:0"},"scope":524,"src":"8455:153:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":452,"nodeType":"Block","src":"8663:32:0","statements":[{"expression":{"id":450,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8681:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":449,"id":451,"nodeType":"Return","src":"8674:13:0"}]},"functionSelector":"8da5cb5b","id":453,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"8625:5:0","nodeType":"FunctionDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[],"src":"8630:2:0"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":453,"src":"8654:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"8654:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8653:9:0"},"scope":524,"src":"8616:79:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":464,"nodeType":"Block","src":"8724:98:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":456,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8743:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":457,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"8753:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8753:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8743:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8767:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":455,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8735:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8735:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":462,"nodeType":"ExpressionStatement","src":"8735:67:0"},{"id":463,"nodeType":"PlaceholderStatement","src":"8813:1:0"}]},"id":465,"name":"onlyOwner","nameLocation":"8712:9:0","nodeType":"ModifierDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[],"src":"8721:2:0"},"src":"8703:119:0","virtual":false,"visibility":"internal"},{"body":{"id":485,"nodeType":"Block","src":"8876:94:0","statements":[{"eventCall":{"arguments":[{"id":471,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8913:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8929:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8921:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"8921:7:0","typeDescriptions":{}}},"id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8921:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":470,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"8892:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8892:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":477,"nodeType":"EmitStatement","src":"8887:45:0"},{"expression":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":478,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"8943:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8960:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8952:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"8952:7:0","typeDescriptions":{}}},"id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8943:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":484,"nodeType":"ExpressionStatement","src":"8943:19:0"}]},"functionSelector":"715018a6","id":486,"implemented":true,"kind":"function","modifiers":[{"id":468,"kind":"modifierInvocation","modifierName":{"id":467,"name":"onlyOwner","nameLocations":["8866:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"8866:9:0"},"nodeType":"ModifierInvocation","src":"8866:9:0"}],"name":"renounceOwnership","nameLocation":"8839:17:0","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"8856:2:0"},"returnParameters":{"id":469,"nodeType":"ParameterList","parameters":[],"src":"8876:0:0"},"scope":524,"src":"8830:140:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":497,"nodeType":"Block","src":"9040:47:0","statements":[{"expression":{"arguments":[{"id":494,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"9070:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":493,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"9051:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9051:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"9051:28:0"}]},"functionSelector":"f2fde38b","id":498,"implemented":true,"kind":"function","modifiers":[{"id":491,"kind":"modifierInvocation","modifierName":{"id":490,"name":"onlyOwner","nameLocations":["9030:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9030:9:0"},"nodeType":"ModifierInvocation","src":"9030:9:0"}],"name":"transferOwnership","nameLocation":"8987:17:0","nodeType":"FunctionDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"newOwner","nameLocation":"9013:8:0","nodeType":"VariableDeclaration","scope":498,"src":"9005:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"9005:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9004:18:0"},"returnParameters":{"id":492,"nodeType":"ParameterList","parameters":[],"src":"9040:0:0"},"scope":524,"src":"8978:109:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":522,"nodeType":"Block","src":"9150:211:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":504,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"9183:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9203:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9195:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"9195:7:0","typeDescriptions":{}}},"id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9195:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9183:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9220:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9161:110:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":512,"nodeType":"ExpressionStatement","src":"9161:110:0"},{"eventCall":{"arguments":[{"id":514,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"9308:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":515,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"9316:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":513,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"9287:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9287:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":517,"nodeType":"EmitStatement","src":"9282:43:0"},{"expression":{"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":518,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"9336:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":519,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"9345:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9336:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":521,"nodeType":"ExpressionStatement","src":"9336:17:0"}]},"id":523,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"9104:18:0","nodeType":"FunctionDefinition","parameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"newOwner","nameLocation":"9131:8:0","nodeType":"VariableDeclaration","scope":523,"src":"9123:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":499,"name":"address","nodeType":"ElementaryTypeName","src":"9123:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9122:18:0"},"returnParameters":{"id":502,"nodeType":"ParameterList","parameters":[],"src":"9150:0:0"},"scope":524,"src":"9095:266:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1530,"src":"8272:1092:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":525,"name":"Ownable","nameLocations":["9390:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":524,"src":"9390:7:0"},"id":526,"nodeType":"InheritanceSpecifier","src":"9390:7:0"}],"canonicalName":"Claimable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":582,"linearizedBaseContracts":[582,524,105],"name":"Claimable","nameLocation":"9377:9:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"6ec012e7","id":529,"mutability":"mutable","name":"saleIndex","nameLocation":"9481:9:0","nodeType":"VariableDeclaration","scope":582,"src":"9469:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":527,"name":"uint","nodeType":"ElementaryTypeName","src":"9469:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9493:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"body":{"id":538,"nodeType":"Block","src":"9582:32:0","statements":[{"expression":{"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":534,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9593:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"33","id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9605:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"9593:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":537,"nodeType":"ExpressionStatement","src":"9593:13:0"}]},"functionSelector":"e36b0b37","id":539,"implemented":true,"kind":"function","modifiers":[{"id":532,"kind":"modifierInvocation","modifierName":{"id":531,"name":"onlyOwner","nameLocations":["9572:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9572:9:0"},"nodeType":"ModifierInvocation","src":"9572:9:0"}],"name":"stopSale","nameLocation":"9552:8:0","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[],"src":"9560:2:0"},"returnParameters":{"id":533,"nodeType":"ParameterList","parameters":[],"src":"9582:0:0"},"scope":582,"src":"9543:71:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":557,"nodeType":"Block","src":"9828:65:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":552,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"9869:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9869:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":554,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"9878:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":549,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"9846:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":548,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"9839:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$84_$","typeString":"type(contract IERC20)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9839:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$84","typeString":"contract IERC20"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9860:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":72,"src":"9839:29:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9839:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":556,"nodeType":"ExpressionStatement","src":"9839:46:0"}]},"functionSelector":"1698755f","id":558,"implemented":true,"kind":"function","modifiers":[{"id":546,"kind":"modifierInvocation","modifierName":{"id":545,"name":"onlyOwner","nameLocations":["9818:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9818:9:0"},"nodeType":"ModifierInvocation","src":"9818:9:0"}],"name":"claimToken","nameLocation":"9735:10:0","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"tokenAddress","nameLocation":"9764:12:0","nodeType":"VariableDeclaration","scope":558,"src":"9756:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"9756:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":543,"mutability":"mutable","name":"amount","nameLocation":"9795:6:0","nodeType":"VariableDeclaration","scope":558,"src":"9787:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"9787:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9745:63:0"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[],"src":"9828:0:0"},"scope":582,"src":"9726:167:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":580,"nodeType":"Block","src":"9997:114:0","statements":[{"assignments":[566,null],"declarations":[{"constant":false,"id":566,"mutability":"mutable","name":"sent","nameLocation":"10014:4:0","nodeType":"VariableDeclaration","scope":580,"src":"10009:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":565,"name":"bool","nodeType":"ElementaryTypeName","src":"10009:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":574,"initialValue":{"arguments":[{"hexValue":"","id":572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10052:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":567,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"10024:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10024:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10032:4:0","memberName":"call","nodeType":"MemberAccess","src":"10024:12:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":570,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"10044:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"10024:27:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10024:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"10008:47:0"},{"expression":{"arguments":[{"id":576,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"10074:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f2073656e64204574686572","id":577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10080:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""},"value":"Failed to send Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""}],"id":575,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10066:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10066:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":579,"nodeType":"ExpressionStatement","src":"10066:37:0"}]},"functionSelector":"fe96973a","id":581,"implemented":true,"kind":"function","modifiers":[{"id":563,"kind":"modifierInvocation","modifierName":{"id":562,"name":"onlyOwner","nameLocations":["9987:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"9987:9:0"},"nodeType":"ModifierInvocation","src":"9987:9:0"}],"name":"claimETH","nameLocation":"9953:8:0","nodeType":"FunctionDefinition","parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"amount","nameLocation":"9970:6:0","nodeType":"VariableDeclaration","scope":581,"src":"9962:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":559,"name":"uint256","nodeType":"ElementaryTypeName","src":"9962:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9961:16:0"},"returnParameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"9997:0:0"},"scope":582,"src":"9944:167:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1530,"src":"9368:746:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1107,"linearizedBaseContracts":[1107],"name":"MerkleProof","nameLocation":"10126:11:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":602,"nodeType":"Block","src":"10610:59:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":596,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"10641:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":597,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"10648:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":595,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"10628:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10628:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":599,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"10657:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10628:33:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":594,"id":601,"nodeType":"Return","src":"10621:40:0"}]},"documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"10145:328:0","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":603,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"10488:6:0","nodeType":"FunctionDefinition","parameters":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"proof","nameLocation":"10522:5:0","nodeType":"VariableDeclaration","scope":603,"src":"10505:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":584,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10505:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":585,"nodeType":"ArrayTypeName","src":"10505:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":588,"mutability":"mutable","name":"root","nameLocation":"10546:4:0","nodeType":"VariableDeclaration","scope":603,"src":"10538:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10538:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":590,"mutability":"mutable","name":"leaf","nameLocation":"10569:4:0","nodeType":"VariableDeclaration","scope":603,"src":"10561:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10561:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10494:86:0"},"returnParameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":603,"src":"10604:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":592,"name":"bool","nodeType":"ElementaryTypeName","src":"10604:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10603:6:0"},"scope":1107,"src":"10479:190:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":623,"nodeType":"Block","src":"10918:67:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":617,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"10957:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":618,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"10964:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":616,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"10936:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10936:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":620,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"10973:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10936:41:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":615,"id":622,"nodeType":"Return","src":"10929:48:0"}]},"documentation":{"id":604,"nodeType":"StructuredDocumentation","src":"10677:94:0","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":624,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"10786:14:0","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"proof","nameLocation":"10830:5:0","nodeType":"VariableDeclaration","scope":624,"src":"10811:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10811:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":606,"nodeType":"ArrayTypeName","src":"10811:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"root","nameLocation":"10854:4:0","nodeType":"VariableDeclaration","scope":624,"src":"10846:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10846:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"leaf","nameLocation":"10877:4:0","nodeType":"VariableDeclaration","scope":624,"src":"10869:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10869:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10800:88:0"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":624,"src":"10912:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":613,"name":"bool","nodeType":"ElementaryTypeName","src":"10912:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10911:6:0"},"scope":1107,"src":"10777:208:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":663,"nodeType":"Block","src":"11463:204:0","statements":[{"assignments":[636],"declarations":[{"constant":false,"id":636,"mutability":"mutable","name":"computedHash","nameLocation":"11482:12:0","nodeType":"VariableDeclaration","scope":663,"src":"11474:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":635,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11474:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":638,"initialValue":{"id":637,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"11497:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"11474:27:0"},{"body":{"id":659,"nodeType":"Block","src":"11555:75:0","statements":[{"expression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":650,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"11570:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":652,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"11595:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":653,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"11609:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":655,"indexExpression":{"id":654,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11615:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11609:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":651,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"11585:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11585:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"11570:48:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":658,"nodeType":"ExpressionStatement","src":"11570:48:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":643,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11532:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":644,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"11536:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11542:6:0","memberName":"length","nodeType":"MemberAccess","src":"11536:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11532:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":660,"initializationExpression":{"assignments":[640],"declarations":[{"constant":false,"id":640,"mutability":"mutable","name":"i","nameLocation":"11525:1:0","nodeType":"VariableDeclaration","scope":660,"src":"11517:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"11517:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":642,"initialValue":{"hexValue":"30","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11529:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11517:13:0"},"loopExpression":{"expression":{"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"11550:3:0","subExpression":{"id":647,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11550:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":649,"nodeType":"ExpressionStatement","src":"11550:3:0"},"nodeType":"ForStatement","src":"11512:118:0"},{"expression":{"id":661,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"11647:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":634,"id":662,"nodeType":"Return","src":"11640:19:0"}]},"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"10993:347:0","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":664,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"11355:12:0","nodeType":"FunctionDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"proof","nameLocation":"11395:5:0","nodeType":"VariableDeclaration","scope":664,"src":"11378:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11378:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":627,"nodeType":"ArrayTypeName","src":"11378:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"leaf","nameLocation":"11419:4:0","nodeType":"VariableDeclaration","scope":664,"src":"11411:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11411:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11367:63:0"},"returnParameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":664,"src":"11454:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":632,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11454:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11453:9:0"},"scope":1107,"src":"11346:321:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":703,"nodeType":"Block","src":"11908:204:0","statements":[{"assignments":[676],"declarations":[{"constant":false,"id":676,"mutability":"mutable","name":"computedHash","nameLocation":"11927:12:0","nodeType":"VariableDeclaration","scope":703,"src":"11919:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11919:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":678,"initialValue":{"id":677,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"11942:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"11919:27:0"},{"body":{"id":699,"nodeType":"Block","src":"12000:75:0","statements":[{"expression":{"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":690,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12015:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":692,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12040:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":693,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"12054:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":695,"indexExpression":{"id":694,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"12060:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12054:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":691,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"12030:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12030:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12015:48:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":698,"nodeType":"ExpressionStatement","src":"12015:48:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":683,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"11977:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":684,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"11981:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11987:6:0","memberName":"length","nodeType":"MemberAccess","src":"11981:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11977:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":700,"initializationExpression":{"assignments":[680],"declarations":[{"constant":false,"id":680,"mutability":"mutable","name":"i","nameLocation":"11970:1:0","nodeType":"VariableDeclaration","scope":700,"src":"11962:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":679,"name":"uint256","nodeType":"ElementaryTypeName","src":"11962:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":682,"initialValue":{"hexValue":"30","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11974:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11962:13:0"},"loopExpression":{"expression":{"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"11995:3:0","subExpression":{"id":687,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"11995:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":689,"nodeType":"ExpressionStatement","src":"11995:3:0"},"nodeType":"ForStatement","src":"11957:118:0"},{"expression":{"id":701,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12092:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":674,"id":702,"nodeType":"Return","src":"12085:19:0"}]},"documentation":{"id":665,"nodeType":"StructuredDocumentation","src":"11675:100:0","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":704,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"11790:20:0","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"proof","nameLocation":"11840:5:0","nodeType":"VariableDeclaration","scope":704,"src":"11821:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":666,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11821:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":667,"nodeType":"ArrayTypeName","src":"11821:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":670,"mutability":"mutable","name":"leaf","nameLocation":"11864:4:0","nodeType":"VariableDeclaration","scope":704,"src":"11856:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":669,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11856:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11810:65:0"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":704,"src":"11899:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":672,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11898:9:0"},"scope":1107,"src":"11781:331:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":729,"nodeType":"Block","src":"12670:78:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":722,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"12706:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":723,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"12713:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":724,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"12725:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":721,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"12688:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12688:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":726,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"12736:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12688:52:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":720,"id":728,"nodeType":"Return","src":"12681:59:0"}]},"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"12120:357:0","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":730,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"12492:16:0","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":708,"mutability":"mutable","name":"proof","nameLocation":"12536:5:0","nodeType":"VariableDeclaration","scope":730,"src":"12519:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12519:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":707,"nodeType":"ArrayTypeName","src":"12519:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":711,"mutability":"mutable","name":"proofFlags","nameLocation":"12566:10:0","nodeType":"VariableDeclaration","scope":730,"src":"12552:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":709,"name":"bool","nodeType":"ElementaryTypeName","src":"12552:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":710,"nodeType":"ArrayTypeName","src":"12552:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"root","nameLocation":"12595:4:0","nodeType":"VariableDeclaration","scope":730,"src":"12587:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12587:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":716,"mutability":"mutable","name":"leaves","nameLocation":"12627:6:0","nodeType":"VariableDeclaration","scope":730,"src":"12610:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":714,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12610:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":715,"nodeType":"ArrayTypeName","src":"12610:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"12508:132:0"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":730,"src":"12664:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":718,"name":"bool","nodeType":"ElementaryTypeName","src":"12664:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12663:6:0"},"scope":1107,"src":"12483:265:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":755,"nodeType":"Block","src":"13167:86:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":748,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"13211:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":749,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"13218:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":750,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"13230:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":747,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"13185:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13185:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":752,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"13241:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"13185:60:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":746,"id":754,"nodeType":"Return","src":"13178:67:0"}]},"documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"12756:206:0","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":756,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"12977:24:0","nodeType":"FunctionDefinition","parameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"proof","nameLocation":"13031:5:0","nodeType":"VariableDeclaration","scope":756,"src":"13012:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13012:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":733,"nodeType":"ArrayTypeName","src":"13012:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"proofFlags","nameLocation":"13063:10:0","nodeType":"VariableDeclaration","scope":756,"src":"13047:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":735,"name":"bool","nodeType":"ElementaryTypeName","src":"13047:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":736,"nodeType":"ArrayTypeName","src":"13047:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"root","nameLocation":"13092:4:0","nodeType":"VariableDeclaration","scope":756,"src":"13084:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":738,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13084:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":742,"mutability":"mutable","name":"leaves","nameLocation":"13124:6:0","nodeType":"VariableDeclaration","scope":756,"src":"13107:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13107:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":741,"nodeType":"ArrayTypeName","src":"13107:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"13001:136:0"},"returnParameters":{"id":746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":756,"src":"13161:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":744,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13160:6:0"},"scope":1107,"src":"12968:285:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":913,"nodeType":"Block","src":"14225:2165:0","statements":[{"assignments":[772],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"leavesLen","nameLocation":"14622:9:0","nodeType":"VariableDeclaration","scope":913,"src":"14614:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"14614:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":775,"initialValue":{"expression":{"id":773,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"14634:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14641:6:0","memberName":"length","nodeType":"MemberAccess","src":"14634:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14614:33:0"},{"assignments":[777],"declarations":[{"constant":false,"id":777,"mutability":"mutable","name":"proofLen","nameLocation":"14666:8:0","nodeType":"VariableDeclaration","scope":913,"src":"14658:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"14658:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":780,"initialValue":{"expression":{"id":778,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"14677:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14683:6:0","memberName":"length","nodeType":"MemberAccess","src":"14677:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14658:31:0"},{"assignments":[782],"declarations":[{"constant":false,"id":782,"mutability":"mutable","name":"totalHashes","nameLocation":"14708:11:0","nodeType":"VariableDeclaration","scope":913,"src":"14700:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"14700:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":785,"initialValue":{"expression":{"id":783,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"14722:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14733:6:0","memberName":"length","nodeType":"MemberAccess","src":"14722:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14700:39:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":787,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"14808:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":788,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"14820:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14808:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14831:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14808:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":792,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"14836:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14808:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14862:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":786,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14786:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14786:120:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":796,"nodeType":"ExpressionStatement","src":"14786:120:0"},{"assignments":[801],"declarations":[{"constant":false,"id":801,"mutability":"mutable","name":"hashes","nameLocation":"15172:6:0","nodeType":"VariableDeclaration","scope":913,"src":"15155:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":799,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15155:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":800,"nodeType":"ArrayTypeName","src":"15155:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":807,"initialValue":{"arguments":[{"id":805,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"15195:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"15181:13:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":802,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15185:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":803,"nodeType":"ArrayTypeName","src":"15185:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15181:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"15155:52:0"},{"assignments":[809],"declarations":[{"constant":false,"id":809,"mutability":"mutable","name":"leafPos","nameLocation":"15226:7:0","nodeType":"VariableDeclaration","scope":913,"src":"15218:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":808,"name":"uint256","nodeType":"ElementaryTypeName","src":"15218:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":811,"initialValue":{"hexValue":"30","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15236:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15218:19:0"},{"assignments":[813],"declarations":[{"constant":false,"id":813,"mutability":"mutable","name":"hashPos","nameLocation":"15256:7:0","nodeType":"VariableDeclaration","scope":913,"src":"15248:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"15248:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":815,"initialValue":{"hexValue":"30","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15266:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15248:19:0"},{"assignments":[817],"declarations":[{"constant":false,"id":817,"mutability":"mutable","name":"proofPos","nameLocation":"15286:8:0","nodeType":"VariableDeclaration","scope":913,"src":"15278:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":816,"name":"uint256","nodeType":"ElementaryTypeName","src":"15278:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":819,"initialValue":{"hexValue":"30","id":818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15278:20:0"},{"body":{"id":878,"nodeType":"Block","src":"15722:332:0","statements":[{"assignments":[831],"declarations":[{"constant":false,"id":831,"mutability":"mutable","name":"a","nameLocation":"15745:1:0","nodeType":"VariableDeclaration","scope":878,"src":"15737:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15737:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":844,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":832,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"15749:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":833,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"15759:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15749:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":839,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"15825:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":842,"indexExpression":{"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15832:9:0","subExpression":{"id":840,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"15832:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15825:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15749:93:0","trueExpression":{"baseExpression":{"id":835,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"15788:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":838,"indexExpression":{"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15795:9:0","subExpression":{"id":836,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"15795:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15788:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15737:105:0"},{"assignments":[846],"declarations":[{"constant":false,"id":846,"mutability":"mutable","name":"b","nameLocation":"15865:1:0","nodeType":"VariableDeclaration","scope":878,"src":"15857:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15857:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":868,"initialValue":{"condition":{"baseExpression":{"id":847,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"15869:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":849,"indexExpression":{"id":848,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"15880:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15869:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":863,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"15983:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":866,"indexExpression":{"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15989:10:0","subExpression":{"id":864,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"15989:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15983:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15869:131:0","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":850,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"15903:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":851,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"15913:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15903:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":857,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"15945:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":860,"indexExpression":{"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15952:9:0","subExpression":{"id":858,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"15952:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15945:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15903:59:0","trueExpression":{"baseExpression":{"id":853,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"15925:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":856,"indexExpression":{"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15932:9:0","subExpression":{"id":854,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"15932:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15925:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":862,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15902:61:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15857:143:0"},{"expression":{"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":869,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"16015:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":871,"indexExpression":{"id":870,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"16022:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16015:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":873,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"16037:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":874,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"16040:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":872,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"16027:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16027:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16015:27:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":877,"nodeType":"ExpressionStatement","src":"16015:27:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":824,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"15700:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":825,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"15704:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15700:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":879,"initializationExpression":{"assignments":[821],"declarations":[{"constant":false,"id":821,"mutability":"mutable","name":"i","nameLocation":"15693:1:0","nodeType":"VariableDeclaration","scope":879,"src":"15685:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"15685:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":823,"initialValue":{"hexValue":"30","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15697:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15685:13:0"},"loopExpression":{"expression":{"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15717:3:0","subExpression":{"id":827,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"15717:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":829,"nodeType":"ExpressionStatement","src":"15717:3:0"},"nodeType":"ForStatement","src":"15680:374:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":880,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"16070:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16084:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16070:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":898,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"16277:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16289:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16277:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":910,"nodeType":"Block","src":"16341:42:0","statements":[{"expression":{"baseExpression":{"id":906,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"16363:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":908,"indexExpression":{"hexValue":"30","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16369:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16363:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":770,"id":909,"nodeType":"Return","src":"16356:15:0"}]},"id":911,"nodeType":"IfStatement","src":"16273:110:0","trueBody":{"id":905,"nodeType":"Block","src":"16292:43:0","statements":[{"expression":{"baseExpression":{"id":901,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"16314:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":903,"indexExpression":{"hexValue":"30","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16321:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16314:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":770,"id":904,"nodeType":"Return","src":"16307:16:0"}]}},"id":912,"nodeType":"IfStatement","src":"16066:317:0","trueBody":{"id":897,"nodeType":"Block","src":"16087:180:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":884,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"16110:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":885,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"16122:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16110:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16132:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":883,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16102:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16102:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":889,"nodeType":"ExpressionStatement","src":"16102:64:0"},{"id":896,"nodeType":"UncheckedBlock","src":"16181:75:0","statements":[{"expression":{"baseExpression":{"id":890,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"16217:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":894,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":891,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"16224:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16238:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"16224:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16217:23:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":770,"id":895,"nodeType":"Return","src":"16210:30:0"}]}]}}]},"documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"13261:779:0","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":914,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"14055:17:0","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"proof","nameLocation":"14100:5:0","nodeType":"VariableDeclaration","scope":914,"src":"14083:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":758,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14083:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":759,"nodeType":"ArrayTypeName","src":"14083:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"proofFlags","nameLocation":"14130:10:0","nodeType":"VariableDeclaration","scope":914,"src":"14116:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":761,"name":"bool","nodeType":"ElementaryTypeName","src":"14116:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":762,"nodeType":"ArrayTypeName","src":"14116:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"leaves","nameLocation":"14168:6:0","nodeType":"VariableDeclaration","scope":914,"src":"14151:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":764,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14151:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":765,"nodeType":"ArrayTypeName","src":"14151:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"14072:109:0"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"merkleRoot","nameLocation":"14213:10:0","nodeType":"VariableDeclaration","scope":914,"src":"14205:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14205:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14204:20:0"},"scope":1107,"src":"14046:2344:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1071,"nodeType":"Block","src":"16803:2165:0","statements":[{"assignments":[930],"declarations":[{"constant":false,"id":930,"mutability":"mutable","name":"leavesLen","nameLocation":"17200:9:0","nodeType":"VariableDeclaration","scope":1071,"src":"17192:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"17192:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":933,"initialValue":{"expression":{"id":931,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"17212:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17219:6:0","memberName":"length","nodeType":"MemberAccess","src":"17212:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17192:33:0"},{"assignments":[935],"declarations":[{"constant":false,"id":935,"mutability":"mutable","name":"proofLen","nameLocation":"17244:8:0","nodeType":"VariableDeclaration","scope":1071,"src":"17236:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":934,"name":"uint256","nodeType":"ElementaryTypeName","src":"17236:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":938,"initialValue":{"expression":{"id":936,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"17255:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17261:6:0","memberName":"length","nodeType":"MemberAccess","src":"17255:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17236:31:0"},{"assignments":[940],"declarations":[{"constant":false,"id":940,"mutability":"mutable","name":"totalHashes","nameLocation":"17286:11:0","nodeType":"VariableDeclaration","scope":1071,"src":"17278:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"17278:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":943,"initialValue":{"expression":{"id":941,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"17300:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17311:6:0","memberName":"length","nodeType":"MemberAccess","src":"17300:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17278:39:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":945,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"17386:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":946,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"17398:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17386:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17409:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"17386:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":950,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"17414:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17386:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17440:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":944,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17364:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17364:120:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":954,"nodeType":"ExpressionStatement","src":"17364:120:0"},{"assignments":[959],"declarations":[{"constant":false,"id":959,"mutability":"mutable","name":"hashes","nameLocation":"17750:6:0","nodeType":"VariableDeclaration","scope":1071,"src":"17733:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17733:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":958,"nodeType":"ArrayTypeName","src":"17733:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":965,"initialValue":{"arguments":[{"id":963,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"17773:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":962,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17759:13:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17763:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":961,"nodeType":"ArrayTypeName","src":"17763:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17759:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17733:52:0"},{"assignments":[967],"declarations":[{"constant":false,"id":967,"mutability":"mutable","name":"leafPos","nameLocation":"17804:7:0","nodeType":"VariableDeclaration","scope":1071,"src":"17796:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"17796:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":969,"initialValue":{"hexValue":"30","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17814:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17796:19:0"},{"assignments":[971],"declarations":[{"constant":false,"id":971,"mutability":"mutable","name":"hashPos","nameLocation":"17834:7:0","nodeType":"VariableDeclaration","scope":1071,"src":"17826:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":970,"name":"uint256","nodeType":"ElementaryTypeName","src":"17826:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":973,"initialValue":{"hexValue":"30","id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17844:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17826:19:0"},{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"proofPos","nameLocation":"17864:8:0","nodeType":"VariableDeclaration","scope":1071,"src":"17856:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":974,"name":"uint256","nodeType":"ElementaryTypeName","src":"17856:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":977,"initialValue":{"hexValue":"30","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17875:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17856:20:0"},{"body":{"id":1036,"nodeType":"Block","src":"18300:332:0","statements":[{"assignments":[989],"declarations":[{"constant":false,"id":989,"mutability":"mutable","name":"a","nameLocation":"18323:1:0","nodeType":"VariableDeclaration","scope":1036,"src":"18315:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":988,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18315:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1002,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":990,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"18327:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":991,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"18337:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18327:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":997,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"18403:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1000,"indexExpression":{"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18410:9:0","subExpression":{"id":998,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"18410:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18403:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"18327:93:0","trueExpression":{"baseExpression":{"id":993,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"18366:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":996,"indexExpression":{"id":995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18373:9:0","subExpression":{"id":994,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"18373:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18366:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"18315:105:0"},{"assignments":[1004],"declarations":[{"constant":false,"id":1004,"mutability":"mutable","name":"b","nameLocation":"18443:1:0","nodeType":"VariableDeclaration","scope":1036,"src":"18435:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1003,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18435:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1026,"initialValue":{"condition":{"baseExpression":{"id":1005,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"18447:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1007,"indexExpression":{"id":1006,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"18458:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18447:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1021,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"18561:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1024,"indexExpression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18567:10:0","subExpression":{"id":1022,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"18567:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18561:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"18447:131:0","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1008,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"18481:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1009,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"18491:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18481:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1015,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"18523:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1018,"indexExpression":{"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18530:9:0","subExpression":{"id":1016,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"18530:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18523:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"18481:59:0","trueExpression":{"baseExpression":{"id":1011,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"18503:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1014,"indexExpression":{"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18510:9:0","subExpression":{"id":1012,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"18510:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18503:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1020,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18480:61:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"18435:143:0"},{"expression":{"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1027,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"18593:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1029,"indexExpression":{"id":1028,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"18600:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18593:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1031,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"18615:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1032,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"18618:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1030,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"18605:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18605:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"18593:27:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1035,"nodeType":"ExpressionStatement","src":"18593:27:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":982,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"18278:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":983,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"18282:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18278:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1037,"initializationExpression":{"assignments":[979],"declarations":[{"constant":false,"id":979,"mutability":"mutable","name":"i","nameLocation":"18271:1:0","nodeType":"VariableDeclaration","scope":1037,"src":"18263:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":978,"name":"uint256","nodeType":"ElementaryTypeName","src":"18263:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":981,"initialValue":{"hexValue":"30","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18275:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18263:13:0"},"loopExpression":{"expression":{"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18295:3:0","subExpression":{"id":985,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"18295:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":987,"nodeType":"ExpressionStatement","src":"18295:3:0"},"nodeType":"ForStatement","src":"18258:374:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1038,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"18648:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18662:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18648:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1056,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"18855:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18867:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18855:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1068,"nodeType":"Block","src":"18919:42:0","statements":[{"expression":{"baseExpression":{"id":1064,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"18941:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1066,"indexExpression":{"hexValue":"30","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18947:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18941:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":928,"id":1067,"nodeType":"Return","src":"18934:15:0"}]},"id":1069,"nodeType":"IfStatement","src":"18851:110:0","trueBody":{"id":1063,"nodeType":"Block","src":"18870:43:0","statements":[{"expression":{"baseExpression":{"id":1059,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"18892:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1061,"indexExpression":{"hexValue":"30","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18899:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18892:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":928,"id":1062,"nodeType":"Return","src":"18885:16:0"}]}},"id":1070,"nodeType":"IfStatement","src":"18644:317:0","trueBody":{"id":1055,"nodeType":"Block","src":"18665:180:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1042,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"18688:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1043,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"18700:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18688:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18710:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1041,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18680:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18680:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1047,"nodeType":"ExpressionStatement","src":"18680:64:0"},{"id":1054,"nodeType":"UncheckedBlock","src":"18759:75:0","statements":[{"expression":{"baseExpression":{"id":1048,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"18795:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1052,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"18802:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18816:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18802:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18795:23:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":928,"id":1053,"nodeType":"Return","src":"18788:30:0"}]}]}}]},"documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"16398:208:0","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1072,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"16621:25:0","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"proof","nameLocation":"16676:5:0","nodeType":"VariableDeclaration","scope":1072,"src":"16657:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16657:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":917,"nodeType":"ArrayTypeName","src":"16657:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":921,"mutability":"mutable","name":"proofFlags","nameLocation":"16708:10:0","nodeType":"VariableDeclaration","scope":1072,"src":"16692:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":919,"name":"bool","nodeType":"ElementaryTypeName","src":"16692:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":920,"nodeType":"ArrayTypeName","src":"16692:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"leaves","nameLocation":"16746:6:0","nodeType":"VariableDeclaration","scope":1072,"src":"16729:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16729:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":923,"nodeType":"ArrayTypeName","src":"16729:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16646:113:0"},"returnParameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"merkleRoot","nameLocation":"16791:10:0","nodeType":"VariableDeclaration","scope":1072,"src":"16783:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":926,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16783:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16782:20:0"},"scope":1107,"src":"16612:2356:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1094,"nodeType":"Block","src":"19048:77:0","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"19066:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1082,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"19070:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19066:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1089,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"19112:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1090,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"19115:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1088,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"19097:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19097:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19066:51:0","trueExpression":{"arguments":[{"id":1085,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"19089:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1086,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"19092:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1084,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"19074:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19074:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1080,"id":1093,"nodeType":"Return","src":"19059:58:0"}]},"id":1095,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"18985:9:0","nodeType":"FunctionDefinition","parameters":{"id":1077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1074,"mutability":"mutable","name":"a","nameLocation":"19003:1:0","nodeType":"VariableDeclaration","scope":1095,"src":"18995:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1073,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18995:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1076,"mutability":"mutable","name":"b","nameLocation":"19014:1:0","nodeType":"VariableDeclaration","scope":1095,"src":"19006:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1075,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19006:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18994:22:0"},"returnParameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1095,"src":"19039:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19039:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"19038:9:0"},"scope":1107,"src":"18976:149:0","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1105,"nodeType":"Block","src":"19241:185:0","statements":[{"AST":{"nodeType":"YulBlock","src":"19305:114:0","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19327:4:0","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"19333:1:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19320:6:0"},"nodeType":"YulFunctionCall","src":"19320:15:0"},"nodeType":"YulExpressionStatement","src":"19320:15:0"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19356:4:0","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"19362:1:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19349:6:0"},"nodeType":"YulFunctionCall","src":"19349:15:0"},"nodeType":"YulExpressionStatement","src":"19349:15:0"},{"nodeType":"YulAssignment","src":"19378:30:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19397:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"19403:4:0","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"19387:9:0"},"nodeType":"YulFunctionCall","src":"19387:21:0"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19378:5:0"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1097,"isOffset":false,"isSlot":false,"src":"19333:1:0","valueSize":1},{"declaration":1099,"isOffset":false,"isSlot":false,"src":"19362:1:0","valueSize":1},{"declaration":1102,"isOffset":false,"isSlot":false,"src":"19378:5:0","valueSize":1}],"id":1104,"nodeType":"InlineAssembly","src":"19296:123:0"}]},"id":1106,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"19142:14:0","nodeType":"FunctionDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1097,"mutability":"mutable","name":"a","nameLocation":"19175:1:0","nodeType":"VariableDeclaration","scope":1106,"src":"19167:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19167:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1099,"mutability":"mutable","name":"b","nameLocation":"19195:1:0","nodeType":"VariableDeclaration","scope":1106,"src":"19187:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19187:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"19156:47:0"},"returnParameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"value","nameLocation":"19234:5:0","nodeType":"VariableDeclaration","scope":1106,"src":"19226:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19226:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"19225:15:0"},"scope":1107,"src":"19133:293:0","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1530,"src":"10118:9311:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":1108,"name":"Claimable","nameLocations":["19449:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":582,"src":"19449:9:0"},"id":1109,"nodeType":"InheritanceSpecifier","src":"19449:9:0"}],"canonicalName":"IDO","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1529,"linearizedBaseContracts":[1529,582,524,105],"name":"IDO","nameLocation":"19442:3:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1112,"libraryName":{"id":1110,"name":"SafeMath","nameLocations":["19472:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"19472:8:0"},"nodeType":"UsingForDirective","src":"19466:27:0","typeName":{"id":1111,"name":"uint256","nodeType":"ElementaryTypeName","src":"19485:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"anonymous":false,"eventSelector":"e3d4187f6ca4248660cc0ac8b8056515bac4a8132be2eca31d6d0cc170722a7e","id":1118,"name":"Buy","nameLocation":"19505:3:0","nodeType":"EventDefinition","parameters":{"id":1117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1114,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"19517:2:0","nodeType":"VariableDeclaration","scope":1118,"src":"19509:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1113,"name":"address","nodeType":"ElementaryTypeName","src":"19509:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1116,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"19529:6:0","nodeType":"VariableDeclaration","scope":1118,"src":"19521:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1115,"name":"uint256","nodeType":"ElementaryTypeName","src":"19521:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19508:28:0"},"src":"19499:38:0"},{"anonymous":false,"eventSelector":"47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4","id":1124,"name":"Claim","nameLocation":"19549:5:0","nodeType":"EventDefinition","parameters":{"id":1123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"19563:2:0","nodeType":"VariableDeclaration","scope":1124,"src":"19555:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"19555:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"19575:6:0","nodeType":"VariableDeclaration","scope":1124,"src":"19567:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"19567:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19554:28:0"},"src":"19543:40:0"},{"constant":false,"functionSelector":"1d80009a","id":1126,"mutability":"mutable","name":"rootHash","nameLocation":"19604:8:0","nodeType":"VariableDeclaration","scope":1529,"src":"19589:23:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19589:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"id":1131,"mutability":"mutable","name":"privateSaleHardcap","nameLocation":"19689:18:0","nodeType":"VariableDeclaration","scope":1529,"src":"19681:38:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1127,"name":"uint256","nodeType":"ElementaryTypeName","src":"19681:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_53000000000000000000_by_1","typeString":"int_const 53000000000000000000"},"id":1130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3533","id":1128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19710:2:0","typeDescriptions":{"typeIdentifier":"t_rational_53_by_1","typeString":"int_const 53"},"value":"53"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653138","id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19715:4:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"19710:9:0","typeDescriptions":{"typeIdentifier":"t_rational_53000000000000000000_by_1","typeString":"int_const 53000000000000000000"}},"visibility":"internal"},{"constant":false,"id":1134,"mutability":"mutable","name":"minETHAmount","nameLocation":"19734:12:0","nodeType":"VariableDeclaration","scope":1529,"src":"19726:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"19726:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653136","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19749:4:0","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"value":"1e16"},"visibility":"internal"},{"constant":false,"id":1137,"mutability":"mutable","name":"maxETHAmount","nameLocation":"19768:12:0","nodeType":"VariableDeclaration","scope":1529,"src":"19760:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"19760:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653139","id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19783:4:0","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000_by_1","typeString":"int_const 10000000000000000000"},"value":"1e19"},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"publicSaleHardcap","nameLocation":"19839:17:0","nodeType":"VariableDeclaration","scope":1529,"src":"19831:37:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1138,"name":"uint256","nodeType":"ElementaryTypeName","src":"19831:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_65000000000000000000_by_1","typeString":"int_const 65000000000000000000"},"id":1141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3635","id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:2:0","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653138","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19864:4:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"19859:9:0","typeDescriptions":{"typeIdentifier":"t_rational_65000000000000000000_by_1","typeString":"int_const 65000000000000000000"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"tokenPrice","nameLocation":"19932:10:0","nodeType":"VariableDeclaration","scope":1529,"src":"19924:18:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"19924:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"functionSelector":"78442876","id":1147,"mutability":"mutable","name":"privateSaleTotalSaled","nameLocation":"19966:21:0","nodeType":"VariableDeclaration","scope":1529,"src":"19951:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1145,"name":"uint256","nodeType":"ElementaryTypeName","src":"19951:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":1146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19990:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"constant":false,"functionSelector":"c8aad250","id":1152,"mutability":"mutable","name":"privateSaleAllocation","nameLocation":"20013:21:0","nodeType":"VariableDeclaration","scope":1529,"src":"19998:52:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1148,"name":"uint256","nodeType":"ElementaryTypeName","src":"19998:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_5035000000000_by_1","typeString":"int_const 5035000000000"},"id":1151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"35303335303030","id":1149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20037:7:0","typeDescriptions":{"typeIdentifier":"t_rational_5035000_by_1","typeString":"int_const 5035000"},"value":"5035000"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"316536","id":1150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20047:3:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"},"src":"20037:13:0","typeDescriptions":{"typeIdentifier":"t_rational_5035000000000_by_1","typeString":"int_const 5035000000000"}},"visibility":"public"},{"constant":false,"functionSelector":"e7a6ac55","id":1155,"mutability":"mutable","name":"publicSaleTotalSaled","nameLocation":"20072:20:0","nodeType":"VariableDeclaration","scope":1529,"src":"20057:39:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"20057:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20095:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"constant":false,"functionSelector":"34ad1f32","id":1160,"mutability":"mutable","name":"publicSaleAllocation","nameLocation":"20118:20:0","nodeType":"VariableDeclaration","scope":1529,"src":"20103:51:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"20103:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_4940000000000_by_1","typeString":"int_const 4940000000000"},"id":1159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"34393430303030","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20141:7:0","typeDescriptions":{"typeIdentifier":"t_rational_4940000_by_1","typeString":"int_const 4940000"},"value":"4940000"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"316536","id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20151:3:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"},"src":"20141:13:0","typeDescriptions":{"typeIdentifier":"t_rational_4940000000000_by_1","typeString":"int_const 4940000000000"}},"visibility":"public"},{"constant":false,"id":1162,"mutability":"mutable","name":"rewardAddress","nameLocation":"20171:13:0","nodeType":"VariableDeclaration","scope":1529,"src":"20163:21:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1161,"name":"address","nodeType":"ElementaryTypeName","src":"20163:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"functionSelector":"0660f1e8","id":1166,"mutability":"mutable","name":"userRewards","nameLocation":"20228:11:0","nodeType":"VariableDeclaration","scope":1529,"src":"20193:46:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1165,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1163,"name":"address","nodeType":"ElementaryTypeName","src":"20201:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"20193:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1164,"name":"uint256","nodeType":"ElementaryTypeName","src":"20212:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"8092be4a","id":1170,"mutability":"mutable","name":"userDeposited","nameLocation":"20281:13:0","nodeType":"VariableDeclaration","scope":1529,"src":"20246:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1169,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"20254:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"20246:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1168,"name":"uint256","nodeType":"ElementaryTypeName","src":"20265:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":1192,"nodeType":"Block","src":"20358:210:0","statements":[{"expression":{"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1177,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"20430:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1180,"name":"privateSaleAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"20466:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1178,"name":"privateSaleHardcap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"20443:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20462:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"20443:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20443:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20430:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1183,"nodeType":"ExpressionStatement","src":"20430:58:0"},{"expression":{"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1184,"name":"rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"20499:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1185,"name":"_rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"20515:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20499:30:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1187,"nodeType":"ExpressionStatement","src":"20499:30:0"},{"expression":{"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1188,"name":"rootHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"20540:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1189,"name":"_rootHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"20551:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20540:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1191,"nodeType":"ExpressionStatement","src":"20540:20:0"}]},"id":1193,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1172,"mutability":"mutable","name":"_rewardAddress","nameLocation":"20323:14:0","nodeType":"VariableDeclaration","scope":1193,"src":"20315:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1171,"name":"address","nodeType":"ElementaryTypeName","src":"20315:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"_rootHash","nameLocation":"20347:9:0","nodeType":"VariableDeclaration","scope":1193,"src":"20339:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20339:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20314:43:0"},"returnParameters":{"id":1176,"nodeType":"ParameterList","parameters":[],"src":"20358:0:0"},"scope":1529,"src":"20303:265:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1204,"nodeType":"Block","src":"20635:39:0","statements":[{"expression":{"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1200,"name":"rootHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"20646:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1201,"name":"_rootHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"20657:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20646:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1203,"nodeType":"ExpressionStatement","src":"20646:20:0"}]},"functionSelector":"2d7eae66","id":1205,"implemented":true,"kind":"function","modifiers":[{"id":1198,"kind":"modifierInvocation","modifierName":{"id":1197,"name":"onlyOwner","nameLocations":["20625:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"20625:9:0"},"nodeType":"ModifierInvocation","src":"20625:9:0"}],"name":"setRootHash","nameLocation":"20585:11:0","nodeType":"FunctionDefinition","parameters":{"id":1196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"_rootHash","nameLocation":"20605:9:0","nodeType":"VariableDeclaration","scope":1205,"src":"20597:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20597:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20596:19:0"},"returnParameters":{"id":1199,"nodeType":"ParameterList","parameters":[],"src":"20635:0:0"},"scope":1529,"src":"20576:98:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1229,"nodeType":"Block","src":"20738:199:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1212,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"20784:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"arguments":[{"arguments":[{"expression":{"id":1216,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20818:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20822:6:0","memberName":"sender","nodeType":"MemberAccess","src":"20818:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1214,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"20801:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20805:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"20801:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20801:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1213,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"20791:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20791:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1211,"name":"isValidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"20771:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] calldata,bytes32) view returns (bool)"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20771:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1221,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"20852:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20865:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"20852:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"20771:95:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f742057686974654c69737465642041646472657373","id":1225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20881:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_81274023e9e4c209df2c2d69177718e21483068871738c658d8b8df45d491d50","typeString":"literal_string \"Not WhiteListed Address\""},"value":"Not WhiteListed Address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_81274023e9e4c209df2c2d69177718e21483068871738c658d8b8df45d491d50","typeString":"literal_string \"Not WhiteListed Address\""}],"id":1210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20749:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20749:168:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1227,"nodeType":"ExpressionStatement","src":"20749:168:0"},{"id":1228,"nodeType":"PlaceholderStatement","src":"20928:1:0"}]},"id":1230,"name":"isWhiteListedAddress","nameLocation":"20691:20:0","nodeType":"ModifierDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"proof","nameLocation":"20731:5:0","nodeType":"VariableDeclaration","scope":1230,"src":"20712:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1207,"nodeType":"ArrayTypeName","src":"20712:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"20711:26:0"},"src":"20682:255:0","virtual":false,"visibility":"internal"},{"body":{"id":1247,"nodeType":"Block","src":"21060:67:0","statements":[{"expression":{"arguments":[{"id":1242,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"21097:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1243,"name":"rootHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"21104:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1244,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"21114:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1240,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"21078:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1107_$","typeString":"type(library MerkleProof)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21090:6:0","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":603,"src":"21078:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21078:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1239,"id":1246,"nodeType":"Return","src":"21071:48:0"}]},"id":1248,"implemented":true,"kind":"function","modifiers":[],"name":"isValidProof","nameLocation":"20954:12:0","nodeType":"FunctionDefinition","parameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1233,"mutability":"mutable","name":"proof","nameLocation":"20996:5:0","nodeType":"VariableDeclaration","scope":1248,"src":"20977:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20977:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1232,"nodeType":"ArrayTypeName","src":"20977:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1235,"mutability":"mutable","name":"leaf","nameLocation":"21020:4:0","nodeType":"VariableDeclaration","scope":1248,"src":"21012:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1234,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21012:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20966:65:0"},"returnParameters":{"id":1239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1248,"src":"21054:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1237,"name":"bool","nodeType":"ElementaryTypeName","src":"21054:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"21053:6:0"},"scope":1529,"src":"20945:182:0","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1259,"nodeType":"Block","src":"21320:38:0","statements":[{"expression":{"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1255,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"21331:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1256,"name":"_price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"21344:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21331:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1258,"nodeType":"ExpressionStatement","src":"21331:19:0"}]},"functionSelector":"de8e81ed","id":1260,"implemented":true,"kind":"function","modifiers":[{"id":1253,"kind":"modifierInvocation","modifierName":{"id":1252,"name":"onlyOwner","nameLocations":["21310:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"21310:9:0"},"nodeType":"ModifierInvocation","src":"21310:9:0"}],"name":"resetPrice","nameLocation":"21276:10:0","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"_price","nameLocation":"21295:6:0","nodeType":"VariableDeclaration","scope":1260,"src":"21287:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1249,"name":"uint256","nodeType":"ElementaryTypeName","src":"21287:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21286:16:0"},"returnParameters":{"id":1254,"nodeType":"ParameterList","parameters":[],"src":"21320:0:0"},"scope":1529,"src":"21267:91:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1295,"nodeType":"Block","src":"21544:265:0","statements":[{"expression":{"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1267,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"21555:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1268,"name":"_saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"21567:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21555:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1270,"nodeType":"ExpressionStatement","src":"21555:22:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1271,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"21592:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21605:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"21592:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1282,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"21703:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21716:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"21703:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1293,"nodeType":"IfStatement","src":"21699:103:0","trueBody":{"id":1292,"nodeType":"Block","src":"21719:83:0","statements":[{"expression":{"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1285,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"21734:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1288,"name":"publicSaleAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"21769:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1286,"name":"publicSaleHardcap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"21747:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21765:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"21747:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21747:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21734:56:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1291,"nodeType":"ExpressionStatement","src":"21734:56:0"}]}},"id":1294,"nodeType":"IfStatement","src":"21588:214:0","trueBody":{"id":1281,"nodeType":"Block","src":"21608:85:0","statements":[{"expression":{"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1274,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"21623:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1277,"name":"privateSaleAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"21659:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1275,"name":"privateSaleHardcap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"21636:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21655:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"21636:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21636:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21623:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1280,"nodeType":"ExpressionStatement","src":"21623:58:0"}]}}]},"functionSelector":"0e3ab61d","id":1296,"implemented":true,"kind":"function","modifiers":[{"id":1265,"kind":"modifierInvocation","modifierName":{"id":1264,"name":"onlyOwner","nameLocations":["21534:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":465,"src":"21534:9:0"},"nodeType":"ModifierInvocation","src":"21534:9:0"}],"name":"startSale","nameLocation":"21498:9:0","nodeType":"FunctionDefinition","parameters":{"id":1263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"_saleIndex","nameLocation":"21513:10:0","nodeType":"VariableDeclaration","scope":1296,"src":"21508:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1261,"name":"uint","nodeType":"ElementaryTypeName","src":"21508:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21507:17:0"},"returnParameters":{"id":1266,"nodeType":"ParameterList","parameters":[],"src":"21544:0:0"},"scope":1529,"src":"21489:320:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1337,"nodeType":"Block","src":"22068:401:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1303,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"22146:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22159:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22146:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1306,"name":"publicSaleTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"22178:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1307,"name":"_ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"22201:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22178:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22177:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1310,"name":"publicSaleHardcap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"22215:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22177:55:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22146:86:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1328,"nodeType":"IfStatement","src":"22128:286:0","trueBody":{"id":1327,"nodeType":"Block","src":"22244:170:0","statements":[{"expression":{"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1313,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"22259:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1319,"name":"publicSaleAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"22330:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1314,"name":"publicSaleTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"22273:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1315,"name":"_ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"22296:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22273:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22272:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22308:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"22272:39:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22272:93:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22259:106:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1322,"nodeType":"ExpressionStatement","src":"22259:106:0"},{"expression":{"arguments":[{"id":1324,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"22391:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1323,"name":"resetPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"22380:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22380:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1326,"nodeType":"ExpressionStatement","src":"22380:22:0"}]}},{"expression":{"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1329,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"22424:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1333,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"22450:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"id":1330,"name":"_ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"22434:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1331,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22433:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22446:3:0","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":323,"src":"22433:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22433:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22424:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1336,"nodeType":"ExpressionStatement","src":"22424:37:0"}]},"functionSelector":"7b7902dd","id":1338,"implemented":true,"kind":"function","modifiers":[],"name":"calcTokenAmount","nameLocation":"21984:15:0","nodeType":"FunctionDefinition","parameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"_ethAmount","nameLocation":"22018:10:0","nodeType":"VariableDeclaration","scope":1338,"src":"22010:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1297,"name":"uint256","nodeType":"ElementaryTypeName","src":"22010:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21999:36:0"},"returnParameters":{"id":1302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1301,"mutability":"mutable","name":"amount","nameLocation":"22060:6:0","nodeType":"VariableDeclaration","scope":1338,"src":"22052:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1300,"name":"uint256","nodeType":"ElementaryTypeName","src":"22052:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22051:16:0"},"scope":1529,"src":"21975:494:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1453,"nodeType":"Block","src":"22743:979:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1348,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"22762:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22774:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22762:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1351,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"22779:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"33","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22791:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"22779:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22762:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616c6c6f77656420746f20627579206e6f772e","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22794:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_17d67e55e25f57674b2d371b54180938132d879cd196f78ebd4f3efe2c739261","typeString":"literal_string \"Not allowed to buy now.\""},"value":"Not allowed to buy now."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17d67e55e25f57674b2d371b54180938132d879cd196f78ebd4f3efe2c739261","typeString":"literal_string \"Not allowed to buy now.\""}],"id":1347,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22754:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22754:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1357,"nodeType":"ExpressionStatement","src":"22754:66:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1358,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"22835:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22848:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22835:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1398,"nodeType":"IfStatement","src":"22831:465:0","trueBody":{"id":1397,"nodeType":"Block","src":"22851:445:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1362,"name":"maxETHAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"22892:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1363,"name":"userDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"22909:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1366,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1364,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"22923:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22923:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22909:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1367,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"22939:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22943:5:0","memberName":"value","nodeType":"MemberAccess","src":"22939:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22909:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1370,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22908:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22892:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1372,"name":"userDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"22975:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1375,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1373,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"22989:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22989:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22975:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1376,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23005:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23009:5:0","memberName":"value","nodeType":"MemberAccess","src":"23005:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22975:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1379,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22974:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1380,"name":"minETHAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"23019:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22974:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22892:139:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7420697320616c6c6f77656420302e30312065746820746f2031302065746820666f72206f6e6c79206c697374656420616464726573732e","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23050:63:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_16c109910cafd6ff652c7cb9875c0f7cd5443a276afa59c2b386970293b5c3eb","typeString":"literal_string \"Amount is allowed 0.01 eth to 10 eth for only listed address.\""},"value":"Amount is allowed 0.01 eth to 10 eth for only listed address."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_16c109910cafd6ff652c7cb9875c0f7cd5443a276afa59c2b386970293b5c3eb","typeString":"literal_string \"Amount is allowed 0.01 eth to 10 eth for only listed address.\""}],"id":1361,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22866:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22866:262:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1385,"nodeType":"ExpressionStatement","src":"22866:262:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1387,"name":"privateSaleHardcap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"23169:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1388,"name":"privateSaleTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"23192:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1389,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23216:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23220:5:0","memberName":"value","nodeType":"MemberAccess","src":"23216:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23192:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1392,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23191:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23169:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f7420627579207468697320616d6f756e74","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23245:24:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f79de05fb6abf551b5172d1c164f6a040a23dc262ef976fac7601d71815718ea","typeString":"literal_string \"Cannot buy this amount\""},"value":"Cannot buy this amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f79de05fb6abf551b5172d1c164f6a040a23dc262ef976fac7601d71815718ea","typeString":"literal_string \"Cannot buy this amount\""}],"id":1386,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23143:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23143:141:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1396,"nodeType":"ExpressionStatement","src":"23143:141:0"}]}},{"assignments":[1400],"declarations":[{"constant":false,"id":1400,"mutability":"mutable","name":"amount","nameLocation":"23316:6:0","nodeType":"VariableDeclaration","scope":1453,"src":"23308:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1399,"name":"uint256","nodeType":"ElementaryTypeName","src":"23308:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1405,"initialValue":{"arguments":[{"expression":{"id":1402,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23341:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23345:5:0","memberName":"value","nodeType":"MemberAccess","src":"23341:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1401,"name":"calcTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"23325:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) returns (uint256)"}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23325:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23308:43:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1406,"name":"saleIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"23366:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23379:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"23366:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1420,"nodeType":"Block","src":"23449:60:0","statements":[{"expression":{"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1415,"name":"publicSaleTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"23464:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1416,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23488:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23492:5:0","memberName":"value","nodeType":"MemberAccess","src":"23488:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23464:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1419,"nodeType":"ExpressionStatement","src":"23464:33:0"}]},"id":1421,"nodeType":"IfStatement","src":"23362:147:0","trueBody":{"id":1414,"nodeType":"Block","src":"23382:61:0","statements":[{"expression":{"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1409,"name":"privateSaleTotalSaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"23397:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1410,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23422:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23426:5:0","memberName":"value","nodeType":"MemberAccess","src":"23422:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23397:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1413,"nodeType":"ExpressionStatement","src":"23397:34:0"}]}},{"assignments":[1423,null],"declarations":[{"constant":false,"id":1423,"mutability":"mutable","name":"sent","nameLocation":"23525:4:0","nodeType":"VariableDeclaration","scope":1453,"src":"23520:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1422,"name":"bool","nodeType":"ElementaryTypeName","src":"23520:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1432,"initialValue":{"arguments":[{"hexValue":"","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23566:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1424,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"23535:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23535:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23543:4:0","memberName":"call","nodeType":"MemberAccess","src":"23535:12:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":1427,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23555:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23559:5:0","memberName":"value","nodeType":"MemberAccess","src":"23555:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"23535:30:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23535:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"23519:50:0"},{"expression":{"arguments":[{"id":1434,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"23588:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f2073656e64204574686572","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23594:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""},"value":"Failed to send Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""}],"id":1433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23580:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23580:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1437,"nodeType":"ExpressionStatement","src":"23580:37:0"},{"expression":{"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1438,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"23628:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1441,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1439,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"23640:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23640:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23628:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1442,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"23657:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23628:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1444,"nodeType":"ExpressionStatement","src":"23628:35:0"},{"expression":{"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1445,"name":"userDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"23674:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1448,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1446,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"23688:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23688:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23674:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":1449,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23705:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23709:5:0","memberName":"value","nodeType":"MemberAccess","src":"23705:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23674:40:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1452,"nodeType":"ExpressionStatement","src":"23674:40:0"}]},"functionSelector":"29ec7eed","id":1454,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1344,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"22736:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}}],"id":1345,"kind":"modifierInvocation","modifierName":{"id":1343,"name":"isWhiteListedAddress","nameLocations":["22715:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":1230,"src":"22715:20:0"},"nodeType":"ModifierInvocation","src":"22715:27:0"}],"name":"buy","nameLocation":"22654:3:0","nodeType":"FunctionDefinition","parameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"proof","nameLocation":"22687:5:0","nodeType":"VariableDeclaration","scope":1454,"src":"22668:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22668:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1340,"nodeType":"ArrayTypeName","src":"22668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"22657:42:0"},"returnParameters":{"id":1346,"nodeType":"ParameterList","parameters":[],"src":"22743:0:0"},"scope":1529,"src":"22645:1077:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":1495,"nodeType":"Block","src":"23765:259:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1458,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"23784:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1461,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1459,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"23796:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23796:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23784:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23813:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23784:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c656173652062757920746f6b656e2e","id":1464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23816:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908","typeString":"literal_string \"Please buy token.\""},"value":"Please buy token."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908","typeString":"literal_string \"Please buy token.\""}],"id":1457,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23776:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23776:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1466,"nodeType":"ExpressionStatement","src":"23776:60:0"},{"expression":{"arguments":[{"expression":{"id":1471,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23878:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23882:6:0","memberName":"sender","nodeType":"MemberAccess","src":"23878:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1473,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"23890:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1476,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1474,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"23902:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23902:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23890:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1468,"name":"rewardAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"23854:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1467,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"23847:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$84_$","typeString":"type(contract IERC20)"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23847:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$84","typeString":"contract IERC20"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23869:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":72,"src":"23847:30:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23847:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1478,"nodeType":"ExpressionStatement","src":"23847:69:0"},{"expression":{"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1479,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"23927:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1482,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1480,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"23939:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23939:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23927:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23955:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23927:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1485,"nodeType":"ExpressionStatement","src":"23927:29:0"},{"eventCall":{"arguments":[{"expression":{"id":1487,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23978:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23982:6:0","memberName":"sender","nodeType":"MemberAccess","src":"23978:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1489,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"23990:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1492,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1490,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"24002:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24002:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23990:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1486,"name":"Claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"23972:5:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23972:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1494,"nodeType":"EmitStatement","src":"23967:49:0"}]},"functionSelector":"afd18916","id":1496,"implemented":true,"kind":"function","modifiers":[],"name":"claimRewardToken","nameLocation":"23739:16:0","nodeType":"FunctionDefinition","parameters":{"id":1455,"nodeType":"ParameterList","parameters":[],"src":"23755:2:0"},"returnParameters":{"id":1456,"nodeType":"ParameterList","parameters":[],"src":"23765:0:0"},"scope":1529,"src":"23730:294:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1509,"nodeType":"Block","src":"24135:57:0","statements":[{"expression":{"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1503,"name":"claimAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"24146:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1504,"name":"userRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"24160:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1506,"indexExpression":{"id":1505,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"24172:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24160:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24146:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1508,"nodeType":"ExpressionStatement","src":"24146:38:0"}]},"functionSelector":"dde070e8","id":1510,"implemented":true,"kind":"function","modifiers":[],"name":"getClaimAmount","nameLocation":"24041:14:0","nodeType":"FunctionDefinition","parameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1498,"mutability":"mutable","name":"userAddress","nameLocation":"24074:11:0","nodeType":"VariableDeclaration","scope":1510,"src":"24066:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1497,"name":"address","nodeType":"ElementaryTypeName","src":"24066:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"24055:37:0"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"claimAmount","nameLocation":"24122:11:0","nodeType":"VariableDeclaration","scope":1510,"src":"24114:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"24114:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24113:21:0"},"scope":1529,"src":"24032:160:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1519,"nodeType":"Block","src":"24256:37:0","statements":[{"expression":{"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1515,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"24267:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1516,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"24275:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24267:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1518,"nodeType":"ExpressionStatement","src":"24267:18:0"}]},"functionSelector":"98d5fdca","id":1520,"implemented":true,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"24209:8:0","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[],"src":"24217:2:0"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"price","nameLocation":"24249:5:0","nodeType":"VariableDeclaration","scope":1520,"src":"24241:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"24241:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24240:15:0"},"scope":1529,"src":"24200:93:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1523,"nodeType":"Block","src":"24328:2:0","statements":[]},"id":1524,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1521,"nodeType":"ParameterList","parameters":[],"src":"24308:2:0"},"returnParameters":{"id":1522,"nodeType":"ParameterList","parameters":[],"src":"24328:0:0"},"scope":1529,"src":"24301:29:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1527,"nodeType":"Block","src":"24366:2:0","statements":[]},"id":1528,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1525,"nodeType":"ParameterList","parameters":[],"src":"24346:2:0"},"returnParameters":{"id":1526,"nodeType":"ParameterList","parameters":[],"src":"24366:0:0"},"scope":1529,"src":"24338:30:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1530,"src":"19433:4938:0","usedErrors":[]}],"src":"39:24334:0"},"id":0}},"contracts":{"contracts/IDO.sol":{"Claimable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"saleIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stopSale","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_445":{"entryPoint":null,"id":445,"parameterSlots":0,"returnSlots":0},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080604052600060015534801561001557600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061053f806100666000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100bb578063e36b0b37146100d6578063f2fde38b146100de578063fe96973a146100f157600080fd5b80631698755f146100825780636ec012e714610097578063715018a6146100b3575b600080fd5b61009561009036600461044d565b610104565b005b6100a060015481565b6040519081526020015b60405180910390f35b6100956101ce565b6000546040516001600160a01b0390911681526020016100aa565b610095610242565b6100956100ec366004610477565b610273565b6100956100ff366004610499565b6102a9565b6000546001600160a01b031633146101375760405162461bcd60e51b815260040161012e906104b2565b60405180910390fd5b816001600160a01b031663a9059cbb6101586000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c991906104e7565b505050565b6000546001600160a01b031633146101f85760405162461bcd60e51b815260040161012e906104b2565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461026c5760405162461bcd60e51b815260040161012e906104b2565b6003600155565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161012e906104b2565b6102a681610371565b50565b6000546001600160a01b031633146102d35760405162461bcd60e51b815260040161012e906104b2565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610320576040519150601f19603f3d011682016040523d82523d6000602084013e610325565b606091505b505090508061036d5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161012e565b5050565b6001600160a01b0381166103d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161012e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461044857600080fd5b919050565b6000806040838503121561046057600080fd5b61046983610431565b946020939093013593505050565b60006020828403121561048957600080fd5b61049282610431565b9392505050565b6000602082840312156104ab57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156104f957600080fd5b8151801515811461049257600080fdfea2646970667358221220aff7edb0aeefbe583cf39056419410f49930549368f498c7687123250036175d64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0x53F DUP1 PUSH2 0x66 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xBB JUMPI DUP1 PUSH4 0xE36B0B37 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0xF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1698755F EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x6EC012E7 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x44D JUMP JUMPDEST PUSH2 0x104 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x1CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAA JUMP JUMPDEST PUSH2 0x95 PUSH2 0x242 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x477 JUMP JUMPDEST PUSH2 0x273 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x137 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x158 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x4E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x26C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x29D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2A6 DUP2 PUSH2 0x371 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x325 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x12E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x12E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x469 DUP4 PUSH2 0x431 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x492 DUP3 PUSH2 0x431 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0xF7 0xED 0xB0 0xAE 0xEF 0xBE PC EXTCODECOPY RETURN SWAP1 JUMP COINBASE SWAP5 LT DELEGATECALL SWAP10 ADDRESS SLOAD SWAP4 PUSH9 0xF498C7687123250036 OR 0x5D PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"9368:746:0:-:0;;;9493:1;9469:25;;9368:746;;;;;;;;;-1:-1:-1;8480:17:0;8523:18;;-1:-1:-1;;;;;;8523:18:0;1332:10;8523:18;;;;;8557:43;;1332:10;;;;8557:43;;8480:17;;8557:43;8469:139;9368:746;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_523":{"entryPoint":881,"id":523,"parameterSlots":1,"returnSlots":0},"@claimETH_581":{"entryPoint":681,"id":581,"parameterSlots":1,"returnSlots":0},"@claimToken_558":{"entryPoint":260,"id":558,"parameterSlots":2,"returnSlots":0},"@owner_453":{"entryPoint":null,"id":453,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_486":{"entryPoint":462,"id":486,"parameterSlots":0,"returnSlots":0},"@saleIndex_529":{"entryPoint":null,"id":529,"parameterSlots":0,"returnSlots":0},"@stopSale_539":{"entryPoint":578,"id":539,"parameterSlots":0,"returnSlots":0},"@transferOwnership_498":{"entryPoint":627,"id":498,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":1073,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1143,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1101,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1255,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1177,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1202,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3102:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:1","statements":[{"nodeType":"YulAssignment","src":"73:29:1","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:1"},"nodeType":"YulFunctionCall","src":"82:20:1"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:1"}]},{"body":{"nodeType":"YulBlock","src":"165:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:1"},"nodeType":"YulFunctionCall","src":"167:12:1"},"nodeType":"YulExpressionStatement","src":"167:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:1"},"nodeType":"YulFunctionCall","src":"146:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:1"},"nodeType":"YulFunctionCall","src":"142:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:1"},"nodeType":"YulFunctionCall","src":"131:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:1"},"nodeType":"YulFunctionCall","src":"121:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:1"},"nodeType":"YulFunctionCall","src":"114:50:1"},"nodeType":"YulIf","src":"111:70:1"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:1","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:1","type":""}],"src":"14:173:1"},{"body":{"nodeType":"YulBlock","src":"279:167:1","statements":[{"body":{"nodeType":"YulBlock","src":"325:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:1"},"nodeType":"YulFunctionCall","src":"327:12:1"},"nodeType":"YulExpressionStatement","src":"327:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:1"},"nodeType":"YulFunctionCall","src":"296:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:1"},"nodeType":"YulFunctionCall","src":"292:32:1"},"nodeType":"YulIf","src":"289:52:1"},{"nodeType":"YulAssignment","src":"350:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"360:18:1"},"nodeType":"YulFunctionCall","src":"360:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"350:6:1"}]},{"nodeType":"YulAssignment","src":"398:42:1","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:1"},"nodeType":"YulFunctionCall","src":"421:18:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:1"},"nodeType":"YulFunctionCall","src":"408:32:1"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"398:6:1"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"237:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"248:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"260:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"268:6:1","type":""}],"src":"192:254:1"},{"body":{"nodeType":"YulBlock","src":"552:76:1","statements":[{"nodeType":"YulAssignment","src":"562:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"574:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"585:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"570:3:1"},"nodeType":"YulFunctionCall","src":"570:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"562:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"604:9:1"},{"name":"value0","nodeType":"YulIdentifier","src":"615:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:1"},"nodeType":"YulFunctionCall","src":"597:25:1"},"nodeType":"YulExpressionStatement","src":"597:25:1"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"521:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"532:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"543:4:1","type":""}],"src":"451:177:1"},{"body":{"nodeType":"YulBlock","src":"734:102:1","statements":[{"nodeType":"YulAssignment","src":"744:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"756:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"767:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"752:3:1"},"nodeType":"YulFunctionCall","src":"752:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"744:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"801:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"817:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"822:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"813:3:1"},"nodeType":"YulFunctionCall","src":"813:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"826:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"809:3:1"},"nodeType":"YulFunctionCall","src":"809:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"797:3:1"},"nodeType":"YulFunctionCall","src":"797:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"779:6:1"},"nodeType":"YulFunctionCall","src":"779:51:1"},"nodeType":"YulExpressionStatement","src":"779:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"703:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"714:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"725:4:1","type":""}],"src":"633:203:1"},{"body":{"nodeType":"YulBlock","src":"911:116:1","statements":[{"body":{"nodeType":"YulBlock","src":"957:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"959:6:1"},"nodeType":"YulFunctionCall","src":"959:12:1"},"nodeType":"YulExpressionStatement","src":"959:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"932:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"941:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"928:3:1"},"nodeType":"YulFunctionCall","src":"928:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"924:3:1"},"nodeType":"YulFunctionCall","src":"924:32:1"},"nodeType":"YulIf","src":"921:52:1"},{"nodeType":"YulAssignment","src":"982:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1011:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"992:18:1"},"nodeType":"YulFunctionCall","src":"992:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"982:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"877:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"888:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"900:6:1","type":""}],"src":"841:186:1"},{"body":{"nodeType":"YulBlock","src":"1102:110:1","statements":[{"body":{"nodeType":"YulBlock","src":"1148:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1157:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1160:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1150:6:1"},"nodeType":"YulFunctionCall","src":"1150:12:1"},"nodeType":"YulExpressionStatement","src":"1150:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1123:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"1132:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1119:3:1"},"nodeType":"YulFunctionCall","src":"1119:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"1144:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1115:3:1"},"nodeType":"YulFunctionCall","src":"1115:32:1"},"nodeType":"YulIf","src":"1112:52:1"},{"nodeType":"YulAssignment","src":"1173:33:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1196:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1183:12:1"},"nodeType":"YulFunctionCall","src":"1183:23:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1173:6:1"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1068:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1079:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1091:6:1","type":""}],"src":"1032:180:1"},{"body":{"nodeType":"YulBlock","src":"1391:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1408:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1419:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1401:6:1"},"nodeType":"YulFunctionCall","src":"1401:21:1"},"nodeType":"YulExpressionStatement","src":"1401:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1442:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1453:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1438:3:1"},"nodeType":"YulFunctionCall","src":"1438:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"1458:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1431:6:1"},"nodeType":"YulFunctionCall","src":"1431:30:1"},"nodeType":"YulExpressionStatement","src":"1431:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1481:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1492:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1477:3:1"},"nodeType":"YulFunctionCall","src":"1477:18:1"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1497:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1470:6:1"},"nodeType":"YulFunctionCall","src":"1470:62:1"},"nodeType":"YulExpressionStatement","src":"1470:62:1"},{"nodeType":"YulAssignment","src":"1541:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1553:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1564:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1549:3:1"},"nodeType":"YulFunctionCall","src":"1549:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1541:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1368:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1382:4:1","type":""}],"src":"1217:356:1"},{"body":{"nodeType":"YulBlock","src":"1707:145:1","statements":[{"nodeType":"YulAssignment","src":"1717:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1729:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1740:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1725:3:1"},"nodeType":"YulFunctionCall","src":"1725:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1717:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1759:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1774:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1790:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1795:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1786:3:1"},"nodeType":"YulFunctionCall","src":"1786:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"1799:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1782:3:1"},"nodeType":"YulFunctionCall","src":"1782:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1770:3:1"},"nodeType":"YulFunctionCall","src":"1770:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:1"},"nodeType":"YulFunctionCall","src":"1752:51:1"},"nodeType":"YulExpressionStatement","src":"1752:51:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1823:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1834:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1819:3:1"},"nodeType":"YulFunctionCall","src":"1819:18:1"},{"name":"value1","nodeType":"YulIdentifier","src":"1839:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1812:6:1"},"nodeType":"YulFunctionCall","src":"1812:34:1"},"nodeType":"YulExpressionStatement","src":"1812:34:1"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1668:9:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1679:6:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1687:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1698:4:1","type":""}],"src":"1578:274:1"},{"body":{"nodeType":"YulBlock","src":"1935:199:1","statements":[{"body":{"nodeType":"YulBlock","src":"1981:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1990:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1993:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1983:6:1"},"nodeType":"YulFunctionCall","src":"1983:12:1"},"nodeType":"YulExpressionStatement","src":"1983:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1956:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"1965:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1952:3:1"},"nodeType":"YulFunctionCall","src":"1952:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"1977:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1948:3:1"},"nodeType":"YulFunctionCall","src":"1948:32:1"},"nodeType":"YulIf","src":"1945:52:1"},{"nodeType":"YulVariableDeclaration","src":"2006:29:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2025:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2019:5:1"},"nodeType":"YulFunctionCall","src":"2019:16:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2010:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"2088:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2097:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2100:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2090:6:1"},"nodeType":"YulFunctionCall","src":"2090:12:1"},"nodeType":"YulExpressionStatement","src":"2090:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2057:5:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2078:5:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2071:6:1"},"nodeType":"YulFunctionCall","src":"2071:13:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2064:6:1"},"nodeType":"YulFunctionCall","src":"2064:21:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2054:2:1"},"nodeType":"YulFunctionCall","src":"2054:32:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2047:6:1"},"nodeType":"YulFunctionCall","src":"2047:40:1"},"nodeType":"YulIf","src":"2044:60:1"},{"nodeType":"YulAssignment","src":"2113:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"2123:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2113:6:1"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1901:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1912:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1924:6:1","type":""}],"src":"1857:277:1"},{"body":{"nodeType":"YulBlock","src":"2330:14:1","statements":[{"nodeType":"YulAssignment","src":"2332:10:1","value":{"name":"pos","nodeType":"YulIdentifier","src":"2339:3:1"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2332:3:1"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2314:3:1","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2322:3:1","type":""}],"src":"2139:205:1"},{"body":{"nodeType":"YulBlock","src":"2523:170:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2540:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2551:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2533:6:1"},"nodeType":"YulFunctionCall","src":"2533:21:1"},"nodeType":"YulExpressionStatement","src":"2533:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2574:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2585:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2570:3:1"},"nodeType":"YulFunctionCall","src":"2570:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2590:2:1","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2563:6:1"},"nodeType":"YulFunctionCall","src":"2563:30:1"},"nodeType":"YulExpressionStatement","src":"2563:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2613:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2624:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2609:3:1"},"nodeType":"YulFunctionCall","src":"2609:18:1"},{"hexValue":"4661696c656420746f2073656e64204574686572","kind":"string","nodeType":"YulLiteral","src":"2629:22:1","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2602:6:1"},"nodeType":"YulFunctionCall","src":"2602:50:1"},"nodeType":"YulExpressionStatement","src":"2602:50:1"},{"nodeType":"YulAssignment","src":"2661:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2673:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2684:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2669:3:1"},"nodeType":"YulFunctionCall","src":"2669:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2661:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2500:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2514:4:1","type":""}],"src":"2349:344:1"},{"body":{"nodeType":"YulBlock","src":"2872:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2889:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2900:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2882:6:1"},"nodeType":"YulFunctionCall","src":"2882:21:1"},"nodeType":"YulExpressionStatement","src":"2882:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2923:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2934:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2919:3:1"},"nodeType":"YulFunctionCall","src":"2919:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2939:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2912:6:1"},"nodeType":"YulFunctionCall","src":"2912:30:1"},"nodeType":"YulExpressionStatement","src":"2912:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2962:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2973:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2958:3:1"},"nodeType":"YulFunctionCall","src":"2958:18:1"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"2978:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2951:6:1"},"nodeType":"YulFunctionCall","src":"2951:62:1"},"nodeType":"YulExpressionStatement","src":"2951:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3033:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3044:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3029:3:1"},"nodeType":"YulFunctionCall","src":"3029:18:1"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"3049:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3022:6:1"},"nodeType":"YulFunctionCall","src":"3022:36:1"},"nodeType":"YulExpressionStatement","src":"3022:36:1"},{"nodeType":"YulAssignment","src":"3067:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3079:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3090:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3075:3:1"},"nodeType":"YulFunctionCall","src":"3075:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3067:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2849:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2863:4:1","type":""}],"src":"2698:402:1"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100bb578063e36b0b37146100d6578063f2fde38b146100de578063fe96973a146100f157600080fd5b80631698755f146100825780636ec012e714610097578063715018a6146100b3575b600080fd5b61009561009036600461044d565b610104565b005b6100a060015481565b6040519081526020015b60405180910390f35b6100956101ce565b6000546040516001600160a01b0390911681526020016100aa565b610095610242565b6100956100ec366004610477565b610273565b6100956100ff366004610499565b6102a9565b6000546001600160a01b031633146101375760405162461bcd60e51b815260040161012e906104b2565b60405180910390fd5b816001600160a01b031663a9059cbb6101586000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c991906104e7565b505050565b6000546001600160a01b031633146101f85760405162461bcd60e51b815260040161012e906104b2565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461026c5760405162461bcd60e51b815260040161012e906104b2565b6003600155565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161012e906104b2565b6102a681610371565b50565b6000546001600160a01b031633146102d35760405162461bcd60e51b815260040161012e906104b2565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610320576040519150601f19603f3d011682016040523d82523d6000602084013e610325565b606091505b505090508061036d5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161012e565b5050565b6001600160a01b0381166103d65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161012e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461044857600080fd5b919050565b6000806040838503121561046057600080fd5b61046983610431565b946020939093013593505050565b60006020828403121561048957600080fd5b61049282610431565b9392505050565b6000602082840312156104ab57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156104f957600080fd5b8151801515811461049257600080fdfea2646970667358221220aff7edb0aeefbe583cf39056419410f49930549368f498c7687123250036175d64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xBB JUMPI DUP1 PUSH4 0xE36B0B37 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0xF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1698755F EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x6EC012E7 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x44D JUMP JUMPDEST PUSH2 0x104 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x1CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAA JUMP JUMPDEST PUSH2 0x95 PUSH2 0x242 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x477 JUMP JUMPDEST PUSH2 0x273 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x137 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x158 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x4E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x26C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x29D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2A6 DUP2 PUSH2 0x371 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12E SWAP1 PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x325 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x12E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x12E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x469 DUP4 PUSH2 0x431 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x492 DUP3 PUSH2 0x431 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0xF7 0xED 0xB0 0xAE 0xEF 0xBE PC EXTCODECOPY RETURN SWAP1 JUMP COINBASE SWAP5 LT DELEGATECALL SWAP10 ADDRESS SLOAD SWAP4 PUSH9 0xF498C7687123250036 OR 0x5D PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"9368:746:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9726:167;;;;;;:::i;:::-;;:::i;:::-;;9469:25;;;;;;;;;597::1;;;585:2;570:18;9469:25:0;;;;;;;;8830:140;;;:::i;8616:79::-;8654:7;8681:6;8616:79;;-1:-1:-1;;;;;8681:6:0;;;779:51:1;;767:2;752:18;8616:79:0;633:203:1;9543:71:0;;;:::i;8978:109::-;;;;;;:::i;:::-;;:::i;9944:167::-;;;;;;:::i;:::-;;:::i;9726:::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;;;;;;;;;9846:12:::1;-1:-1:-1::0;;;;;9839:29:0::1;;9869:7;8654::::0;8681:6;-1:-1:-1;;;;;8681:6:0;;8616:79;9869:7:::1;9839:46;::::0;-1:-1:-1;;;;;;9839:46:0::1;::::0;;;;;;-1:-1:-1;;;;;1770:32:1;;;9839:46:0::1;::::0;::::1;1752:51:1::0;1819:18;;;1812:34;;;1725:18;;9839:46:0::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9726:167:::0;;:::o;8830:140::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;8929:1:::1;8913:6:::0;;8892:40:::1;::::0;-1:-1:-1;;;;;8913:6:0;;::::1;::::0;8892:40:::1;::::0;8929:1;;8892:40:::1;8960:1;8943:19:::0;;-1:-1:-1;;;;;;8943:19:0::1;::::0;;8830:140::o;9543:71::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;9605:1:::1;9593:9;:13:::0;9543:71::o;8978:109::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;9051:28:::1;9070:8;9051:18;:28::i;:::-;8978:109:::0;:::o;9944:167::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;10009:9:::1;8681:6:::0;;10024:31:::1;::::0;-1:-1:-1;;;;;8681:6:0;;;;10044;;10009:9;10024:31;10009:9;10024:31;10044:6;8681;10024:31:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10008:47;;;10074:4;10066:37;;;::::0;-1:-1:-1;;;10066:37:0;;2551:2:1;10066:37:0::1;::::0;::::1;2533:21:1::0;2590:2;2570:18;;;2563:30;-1:-1:-1;;;2609:18:1;;;2602:50;2669:18;;10066:37:0::1;2349:344:1::0;10066:37:0::1;9997:114;9944:167:::0;:::o;9095:266::-;-1:-1:-1;;;;;9183:22:0;;9161:110;;;;-1:-1:-1;;;9161:110:0;;2900:2:1;9161:110:0;;;2882:21:1;2939:2;2919:18;;;2912:30;2978:34;2958:18;;;2951:62;-1:-1:-1;;;3029:18:1;;;3022:36;3075:19;;9161:110:0;2698:402:1;9161:110:0;9308:6;;;9287:38;;-1:-1:-1;;;;;9287:38:0;;;;9308:6;;;9287:38;;;9336:6;:17;;-1:-1:-1;;;;;;9336:17:0;-1:-1:-1;;;;;9336:17:0;;;;;;;;;;9095:266::o;14:173:1:-;82:20;;-1:-1:-1;;;;;131:31:1;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:1:o;841:186::-;900:6;953:2;941:9;932:7;928:23;924:32;921:52;;;969:1;966;959:12;921:52;992:29;1011:9;992:29;:::i;:::-;982:39;841:186;-1:-1:-1;;;841:186:1:o;1032:180::-;1091:6;1144:2;1132:9;1123:7;1119:23;1115:32;1112:52;;;1160:1;1157;1150:12;1112:52;-1:-1:-1;1183:23:1;;1032:180;-1:-1:-1;1032:180:1:o;1217:356::-;1419:2;1401:21;;;1438:18;;;1431:30;1497:34;1492:2;1477:18;;1470:62;1564:2;1549:18;;1217:356::o;1857:277::-;1924:6;1977:2;1965:9;1956:7;1952:23;1948:32;1945:52;;;1993:1;1990;1983:12;1945:52;2025:9;2019:16;2078:5;2071:13;2064:21;2057:5;2054:32;2044:60;;2100:1;2097;2090:12"},"gasEstimates":{"creation":{"codeDepositCost":"268600","executionCost":"31085","totalCost":"299685"},"external":{"claimETH(uint256)":"infinite","claimToken(address,uint256)":"infinite","owner()":"2301","renounceOwnership()":"30210","saleIndex()":"2307","stopSale()":"24412","transferOwnership(address)":"30473"}},"methodIdentifiers":{"claimETH(uint256)":"fe96973a","claimToken(address,uint256)":"1698755f","owner()":"8da5cb5b","renounceOwnership()":"715018a6","saleIndex()":"6ec012e7","stopSale()":"e36b0b37","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"Claimable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\\r\\n    uint public saleIndex = 0;\\r\\n\\r\\n    /*\\r\\n     * @dev stop sale\\r\\n     */\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleIndex = 3;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw reward token or usdt\\r\\n     * @param tokenAddress : Token address\\r\\n     */\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw ETH\\r\\n     */\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {verify}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function verifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProofCalldata(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processProof}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\r\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerify(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {multiProofVerify}\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\r\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\r\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\r\\n     * respectively.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\r\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\r\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProof(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\r\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\r\\n    }\\r\\n\\r\\n    function _efficientHash(\\r\\n        bytes32 a,\\r\\n        bytes32 b\\r\\n    ) private pure returns (bytes32 value) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    bytes32 public rootHash;\\r\\n    // private sale hardcap 53 eth\\r\\n    // 0.01 eth to 10eth\\r\\n    uint256 privateSaleHardcap = 53 * 1e18;\\r\\n    uint256 minETHAmount = 1e16;\\r\\n    uint256 maxETHAmount = 1e19;\\r\\n\\r\\n    // public sale hardcap 65 eth\\r\\n    uint256 publicSaleHardcap = 65 * 1e18;\\r\\n\\r\\n    // token price 1 token   = tokenPrice ETH\\r\\n    uint256 tokenPrice;\\r\\n\\r\\n    uint256 public privateSaleTotalSaled = 0;\\r\\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\\r\\n    uint256 public publicSaleTotalSaled = 0;\\r\\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\\r\\n\\r\\n    address rewardAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n\\r\\n    constructor(address _rewardAddress, bytes32 _rootHash) {\\r\\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\\r\\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\\r\\n        require(\\r\\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\\r\\n                saleIndex == 2,\\r\\n            \\\"Not WhiteListed Address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isValidProof(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) private view returns (bool) {\\r\\n        return MerkleProof.verify(proof, rootHash, leaf);\\r\\n    }\\r\\n\\r\\n    // -------- Owner Functions ----------\\r\\n\\r\\n    /*\\r\\n     * @dev reset token price\\r\\n     * @Param _price: set price with\\r\\n     */\\r\\n    function resetPrice(uint256 _price) public onlyOwner {\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev start sale\\r\\n     * @dev 1: private sale,2:public sale\\r\\n     * @param _saleIndex : sale index\\r\\n     */\\r\\n    function startSale(uint _saleIndex) external onlyOwner {\\r\\n        saleIndex = _saleIndex;\\r\\n        if (saleIndex == 1) {\\r\\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        } else if (saleIndex == 2) {\\r\\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- owner functions end ----------------\\r\\n\\r\\n    /*\\r\\n     * @dev calcuate token admoutn from eth\\r\\n     * @Param _ethAmount: eth amount\\r\\n     */\\r\\n    function calcTokenAmount(\\r\\n        uint256 _ethAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price for only public sale\\r\\n        if (\\r\\n            saleIndex == 2 &&\\r\\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\\r\\n        ) {\\r\\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\\r\\n                publicSaleAllocation\\r\\n            );\\r\\n            resetPrice(tokenPrice);\\r\\n        }\\r\\n        amount = (_ethAmount).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev buy token from eth\\r\\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\\r\\n     * @dev on private sale Check for hardcap\\r\\n     */\\r\\n    function buy(\\r\\n        bytes32[] calldata proof\\r\\n    ) public payable isWhiteListedAddress(proof) {\\r\\n        require(saleIndex > 0 && saleIndex < 3, \\\"Not allowed to buy now.\\\");\\r\\n        if (saleIndex == 1) {\\r\\n            require(\\r\\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\\r\\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\\r\\n                \\\"Amount is allowed 0.01 eth to 10 eth for only listed address.\\\"\\r\\n            );\\r\\n            require(\\r\\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\\r\\n                \\\"Cannot buy this amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amount = calcTokenAmount(msg.value);\\r\\n        if (saleIndex == 1) {\\r\\n            privateSaleTotalSaled += msg.value;\\r\\n        } else {\\r\\n            publicSaleTotalSaled += msg.value;\\r\\n        }\\r\\n        (bool sent, ) = owner().call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 price) {\\r\\n        price = tokenPrice;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x72dba382491d825347f95ecdb0fc1bdd516a85883eca82372a84ef7deeee143d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/IDO.sol:Claimable","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":529,"contract":"contracts/IDO.sol:Claimable","label":"saleIndex","offset":0,"slot":"1","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"Context":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220a223b6f51326964d39d4353431406655b1dac1f8cb8b6a6b5c772c478c937c4b64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0x23 0xB6 CREATE2 SGT 0x26 SWAP7 0x4D CODECOPY 0xD4 CALLDATALOAD CALLVALUE BALANCE BLOCKHASH PUSH7 0x55B1DAC1F8CB8B PUSH11 0x6B5C772C478C937C4B6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"1080:506:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220a223b6f51326964d39d4353431406655b1dac1f8cb8b6a6b5c772c478c937c4b64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0x23 0xB6 CREATE2 SGT 0x26 SWAP7 0x4D CODECOPY 0xD4 CALLDATALOAD CALLVALUE BALANCE BLOCKHASH PUSH7 0x55B1DAC1F8CB8B PUSH11 0x6B5C772C478C937C4B6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"1080:506:0:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\\r\\n    uint public saleIndex = 0;\\r\\n\\r\\n    /*\\r\\n     * @dev stop sale\\r\\n     */\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleIndex = 3;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw reward token or usdt\\r\\n     * @param tokenAddress : Token address\\r\\n     */\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw ETH\\r\\n     */\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {verify}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function verifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProofCalldata(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processProof}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\r\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerify(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {multiProofVerify}\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\r\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\r\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\r\\n     * respectively.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\r\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\r\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProof(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\r\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\r\\n    }\\r\\n\\r\\n    function _efficientHash(\\r\\n        bytes32 a,\\r\\n        bytes32 b\\r\\n    ) private pure returns (bytes32 value) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    bytes32 public rootHash;\\r\\n    // private sale hardcap 53 eth\\r\\n    // 0.01 eth to 10eth\\r\\n    uint256 privateSaleHardcap = 53 * 1e18;\\r\\n    uint256 minETHAmount = 1e16;\\r\\n    uint256 maxETHAmount = 1e19;\\r\\n\\r\\n    // public sale hardcap 65 eth\\r\\n    uint256 publicSaleHardcap = 65 * 1e18;\\r\\n\\r\\n    // token price 1 token   = tokenPrice ETH\\r\\n    uint256 tokenPrice;\\r\\n\\r\\n    uint256 public privateSaleTotalSaled = 0;\\r\\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\\r\\n    uint256 public publicSaleTotalSaled = 0;\\r\\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\\r\\n\\r\\n    address rewardAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n\\r\\n    constructor(address _rewardAddress, bytes32 _rootHash) {\\r\\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\\r\\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\\r\\n        require(\\r\\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\\r\\n                saleIndex == 2,\\r\\n            \\\"Not WhiteListed Address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isValidProof(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) private view returns (bool) {\\r\\n        return MerkleProof.verify(proof, rootHash, leaf);\\r\\n    }\\r\\n\\r\\n    // -------- Owner Functions ----------\\r\\n\\r\\n    /*\\r\\n     * @dev reset token price\\r\\n     * @Param _price: set price with\\r\\n     */\\r\\n    function resetPrice(uint256 _price) public onlyOwner {\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev start sale\\r\\n     * @dev 1: private sale,2:public sale\\r\\n     * @param _saleIndex : sale index\\r\\n     */\\r\\n    function startSale(uint _saleIndex) external onlyOwner {\\r\\n        saleIndex = _saleIndex;\\r\\n        if (saleIndex == 1) {\\r\\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        } else if (saleIndex == 2) {\\r\\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- owner functions end ----------------\\r\\n\\r\\n    /*\\r\\n     * @dev calcuate token admoutn from eth\\r\\n     * @Param _ethAmount: eth amount\\r\\n     */\\r\\n    function calcTokenAmount(\\r\\n        uint256 _ethAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price for only public sale\\r\\n        if (\\r\\n            saleIndex == 2 &&\\r\\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\\r\\n        ) {\\r\\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\\r\\n                publicSaleAllocation\\r\\n            );\\r\\n            resetPrice(tokenPrice);\\r\\n        }\\r\\n        amount = (_ethAmount).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev buy token from eth\\r\\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\\r\\n     * @dev on private sale Check for hardcap\\r\\n     */\\r\\n    function buy(\\r\\n        bytes32[] calldata proof\\r\\n    ) public payable isWhiteListedAddress(proof) {\\r\\n        require(saleIndex > 0 && saleIndex < 3, \\\"Not allowed to buy now.\\\");\\r\\n        if (saleIndex == 1) {\\r\\n            require(\\r\\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\\r\\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\\r\\n                \\\"Amount is allowed 0.01 eth to 10 eth for only listed address.\\\"\\r\\n            );\\r\\n            require(\\r\\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\\r\\n                \\\"Cannot buy this amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amount = calcTokenAmount(msg.value);\\r\\n        if (saleIndex == 1) {\\r\\n            privateSaleTotalSaled += msg.value;\\r\\n        } else {\\r\\n            publicSaleTotalSaled += msg.value;\\r\\n        }\\r\\n        (bool sent, ) = owner().call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 price) {\\r\\n        price = tokenPrice;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x72dba382491d825347f95ecdb0fc1bdd516a85883eca82372a84ef7deeee143d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IDO":{"abi":[{"inputs":[{"internalType":"address","name":"_rewardAddress","type":"address"},{"internalType":"bytes32","name":"_rootHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Buy","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"buy","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ethAmount","type":"uint256"}],"name":"calcTokenAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimRewardToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getClaimAmount","outputs":[{"internalType":"uint256","name":"claimAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"privateSaleAllocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"privateSaleTotalSaled","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"publicSaleAllocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"publicSaleTotalSaled","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"resetPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rootHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"saleIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_rootHash","type":"bytes32"}],"name":"setRootHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_saleIndex","type":"uint256"}],"name":"startSale","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stopSale","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userDeposited","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1193":{"entryPoint":null,"id":1193,"parameterSlots":2,"returnSlots":0},"@_445":{"entryPoint":null,"id":445,"parameterSlots":0,"returnSlots":0},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@div_323":{"entryPoint":267,"id":323,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes32_fromMemory":{"entryPoint":286,"id":null,"parameterSlots":2,"returnSlots":2},"checked_div_t_uint256":{"entryPoint":344,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:589:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"112:253:1","statements":[{"body":{"nodeType":"YulBlock","src":"158:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"167:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"170:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"160:6:1"},"nodeType":"YulFunctionCall","src":"160:12:1"},"nodeType":"YulExpressionStatement","src":"160:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"133:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"142:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"129:3:1"},"nodeType":"YulFunctionCall","src":"129:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"154:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"125:3:1"},"nodeType":"YulFunctionCall","src":"125:32:1"},"nodeType":"YulIf","src":"122:52:1"},{"nodeType":"YulVariableDeclaration","src":"183:29:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"202:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"196:5:1"},"nodeType":"YulFunctionCall","src":"196:16:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"187:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"275:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"284:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"287:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"277:6:1"},"nodeType":"YulFunctionCall","src":"277:12:1"},"nodeType":"YulExpressionStatement","src":"277:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"234:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"245:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"260:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"265:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"256:3:1"},"nodeType":"YulFunctionCall","src":"256:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"269:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"252:3:1"},"nodeType":"YulFunctionCall","src":"252:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"241:3:1"},"nodeType":"YulFunctionCall","src":"241:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"231:2:1"},"nodeType":"YulFunctionCall","src":"231:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"224:6:1"},"nodeType":"YulFunctionCall","src":"224:50:1"},"nodeType":"YulIf","src":"221:70:1"},{"nodeType":"YulAssignment","src":"300:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"310:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"300:6:1"}]},{"nodeType":"YulAssignment","src":"324:35:1","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"344:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"355:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"340:3:1"},"nodeType":"YulFunctionCall","src":"340:18:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"334:5:1"},"nodeType":"YulFunctionCall","src":"334:25:1"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"324:6:1"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"70:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"81:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"93:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"101:6:1","type":""}],"src":"14:351:1"},{"body":{"nodeType":"YulBlock","src":"416:171:1","statements":[{"body":{"nodeType":"YulBlock","src":"447:111:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"468:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"475:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"480:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"471:3:1"},"nodeType":"YulFunctionCall","src":"471:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"461:6:1"},"nodeType":"YulFunctionCall","src":"461:31:1"},"nodeType":"YulExpressionStatement","src":"461:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"512:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"515:4:1","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"505:6:1"},"nodeType":"YulFunctionCall","src":"505:15:1"},"nodeType":"YulExpressionStatement","src":"505:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"540:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"543:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"533:6:1"},"nodeType":"YulFunctionCall","src":"533:15:1"},"nodeType":"YulExpressionStatement","src":"533:15:1"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"436:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"429:6:1"},"nodeType":"YulFunctionCall","src":"429:9:1"},"nodeType":"YulIf","src":"426:132:1"},{"nodeType":"YulAssignment","src":"567:14:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"576:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"579:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"572:3:1"},"nodeType":"YulFunctionCall","src":"572:9:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"567:1:1"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"401:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"404:1:1","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"410:1:1","type":""}],"src":"370:217:1"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_addresst_bytes32_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405260006001556802df85d331a7b40000600355662386f26fc10000600455678ac7230489e800006005556803860e639d8064000060065560006008556504944d62ee006009556000600a5565047e2ef1f800600b5534801561006457600080fd5b506040516110bb3803806110bb8339810160408190526100839161011e565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506100df60095460035461010b60201b610b8c1790919060201c565b600755600c80546001600160a01b0319166001600160a01b03939093169290921790915560025561017a565b60006101178284610158565b9392505050565b6000806040838503121561013157600080fd5b82516001600160a01b038116811461014857600080fd5b6020939093015192949293505050565b60008261017557634e487b7160e01b600052601260045260246000fd5b500490565b610f32806101896000396000f3fe60806040526004361061012d5760003560e01c80638092be4a116100a5578063dde070e81161006c578063dde070e81461030b578063de8e81ed14610341578063e36b0b3714610361578063e7a6ac5514610376578063f2fde38b1461038c578063fe96973a146103ac57005b80638092be4a146102765780638da5cb5b146102a357806398d5fdca146102cb578063afd18916146102e0578063c8aad250146102f557005b80632d7eae66116100f45780632d7eae66146101df57806334ad1f32146101ff5780636ec012e714610215578063715018a61461022b57806378442876146102405780637b7902dd1461025657005b80630660f1e8146101365780630e3ab61d146101765780631698755f146101965780631d80009a146101b657806329ec7eed146101cc57005b3661013457005b005b34801561014257600080fd5b50610163610151366004610d58565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561018257600080fd5b50610134610191366004610d73565b6103cc565b3480156101a257600080fd5b506101346101b1366004610d8c565b61043c565b3480156101c257600080fd5b5061016360025481565b6101346101da366004610db6565b6104fd565b3480156101eb57600080fd5b506101346101fa366004610d73565b61084d565b34801561020b57600080fd5b50610163600b5481565b34801561022157600080fd5b5061016360015481565b34801561023757600080fd5b5061013461087c565b34801561024c57600080fd5b5061016360085481565b34801561026257600080fd5b50610163610271366004610d73565b6108f0565b34801561028257600080fd5b50610163610291366004610d58565b600e6020526000908152604090205481565b3480156102af57600080fd5b506000546040516001600160a01b03909116815260200161016d565b3480156102d757600080fd5b50600754610163565b3480156102ec57600080fd5b50610134610953565b34801561030157600080fd5b5061016360095481565b34801561031757600080fd5b50610163610326366004610d58565b6001600160a01b03166000908152600d602052604090205490565b34801561034d57600080fd5b5061013461035c366004610d73565b610a31565b34801561036d57600080fd5b50610134610a60565b34801561038257600080fd5b50610163600a5481565b34801561039857600080fd5b506101346103a7366004610d58565b610a91565b3480156103b857600080fd5b506101346103c7366004610d73565b610ac4565b6000546001600160a01b031633146103ff5760405162461bcd60e51b81526004016103f690610e2b565b60405180910390fd5b60018181558190036104205760095460035461041a91610b8c565b60075550565b60015460020361043957600b5460065461041a91610b8c565b50565b6000546001600160a01b031633146104665760405162461bcd60e51b81526004016103f690610e2b565b816001600160a01b031663a9059cbb6104876000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f89190610e60565b505050565b6040516bffffffffffffffffffffffff193360601b16602082015282908290610542908390839060340160405160208183030381529060405280519060200120610b9f565b8061054f57506001546002145b61059b5760405162461bcd60e51b815260206004820152601760248201527f4e6f742057686974654c6973746564204164647265737300000000000000000060448201526064016103f6565b60006001541180156105af57506003600154105b6105fb5760405162461bcd60e51b815260206004820152601760248201527f4e6f7420616c6c6f77656420746f20627579206e6f772e00000000000000000060448201526064016103f6565b60015460010361071757336000908152600e6020526040902054610620903490610e98565b6005541015801561064d5750600454336000908152600e602052604090205461064a903490610e98565b10155b6106bf5760405162461bcd60e51b815260206004820152603d60248201527f416d6f756e7420697320616c6c6f77656420302e30312065746820746f20313060448201527f2065746820666f72206f6e6c79206c697374656420616464726573732e00000060648201526084016103f6565b346008546106cd9190610e98565b60035410156107175760405162461bcd60e51b815260206004820152601660248201527510d85b9b9bdd08189d5e481d1a1a5cc8185b5bdd5b9d60521b60448201526064016103f6565b6000610722346108f0565b905060015460010361074b5734600860008282546107409190610e98565b909155506107639050565b34600a600082825461075d9190610e98565b90915550505b600080546040516001600160a01b039091169034908381818185875af1925050503d80600081146107b0576040519150601f19603f3d011682016040523d82523d6000602084013e6107b5565b606091505b50509050806107fd5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103f6565b336000908152600d60205260408120805484929061081c908490610e98565b9091555050336000908152600e602052604081208054349290610840908490610e98565b9091555050505050505050565b6000546001600160a01b031633146108775760405162461bcd60e51b81526004016103f690610e2b565b600255565b6000546001600160a01b031633146108a65760405162461bcd60e51b81526004016103f690610e2b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006001546002148015610912575060065482600a546109109190610e98565b115b1561093f57610931600b5483600a5461092b9190610e98565b90610b8c565b600781905561093f90610a31565b60075461094d908390610b8c565b92915050565b33600052600d602052600c54336000818152600d60205260409081902054905163a9059cbb60e01b8152600481019290925260248201526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190610e60565b50336000818152600d602090815260408083208390558051938452908301919091527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a1565b6000546001600160a01b03163314610a5b5760405162461bcd60e51b81526004016103f690610e2b565b600755565b6000546001600160a01b03163314610a8a5760405162461bcd60e51b81526004016103f690610e2b565b6003600155565b6000546001600160a01b03163314610abb5760405162461bcd60e51b81526004016103f690610e2b565b61043981610bea565b6000546001600160a01b03163314610aee5760405162461bcd60e51b81526004016103f690610e2b565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610b3b576040519150601f19603f3d011682016040523d82523d6000602084013e610b40565b606091505b5050905080610b885760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103f6565b5050565b6000610b988284610eab565b9392505050565b6000610be2848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150859050610caa565b949350505050565b6001600160a01b038116610c4f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f6565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082610cb78584610cc0565b14949350505050565b600081815b8451811015610d0557610cf182868381518110610ce457610ce4610ecd565b6020026020010151610d0d565b915080610cfd81610ee3565b915050610cc5565b509392505050565b6000818310610d29576000828152602084905260409020610b98565b6000838152602083905260409020610b98565b80356001600160a01b0381168114610d5357600080fd5b919050565b600060208284031215610d6a57600080fd5b610b9882610d3c565b600060208284031215610d8557600080fd5b5035919050565b60008060408385031215610d9f57600080fd5b610da883610d3c565b946020939093013593505050565b60008060208385031215610dc957600080fd5b823567ffffffffffffffff80821115610de157600080fd5b818501915085601f830112610df557600080fd5b813581811115610e0457600080fd5b8660208260051b8501011115610e1957600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610e7257600080fd5b81518015158114610b9857600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561094d5761094d610e82565b600082610ec857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610ef557610ef5610e82565b506001019056fea2646970667358221220e5deae4b837dbb786c0d7b1e7823031fc68431b503adbb0d85274b51a37818f964736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x1 SSTORE PUSH9 0x2DF85D331A7B40000 PUSH1 0x3 SSTORE PUSH7 0x2386F26FC10000 PUSH1 0x4 SSTORE PUSH8 0x8AC7230489E80000 PUSH1 0x5 SSTORE PUSH9 0x3860E639D80640000 PUSH1 0x6 SSTORE PUSH1 0x0 PUSH1 0x8 SSTORE PUSH6 0x4944D62EE00 PUSH1 0x9 SSTORE PUSH1 0x0 PUSH1 0xA SSTORE PUSH6 0x47E2EF1F800 PUSH1 0xB SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x10BB CODESIZE SUB DUP1 PUSH2 0x10BB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x83 SWAP2 PUSH2 0x11E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0xDF PUSH1 0x9 SLOAD PUSH1 0x3 SLOAD PUSH2 0x10B PUSH1 0x20 SHL PUSH2 0xB8C OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 SSTORE PUSH2 0x17A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117 DUP3 DUP5 PUSH2 0x158 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x148 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x175 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH2 0xF32 DUP1 PUSH2 0x189 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8092BE4A GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xDDE070E8 GT PUSH2 0x6C JUMPI DUP1 PUSH4 0xDDE070E8 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0xDE8E81ED EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xE36B0B37 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0xE7A6AC55 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x3AC JUMPI STOP JUMPDEST DUP1 PUSH4 0x8092BE4A EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A3 JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x2CB JUMPI DUP1 PUSH4 0xAFD18916 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0xC8AAD250 EQ PUSH2 0x2F5 JUMPI STOP JUMPDEST DUP1 PUSH4 0x2D7EAE66 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x2D7EAE66 EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0x34AD1F32 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x6EC012E7 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x78442876 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x7B7902DD EQ PUSH2 0x256 JUMPI STOP JUMPDEST DUP1 PUSH4 0x660F1E8 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0xE3AB61D EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x1698755F EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x1D80009A EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x29EC7EED EQ PUSH2 0x1CC JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x134 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8C JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0xDB6 JUMP JUMPDEST PUSH2 0x4FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0x84D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x87C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x271 CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0x8F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x163 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x953 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x35C CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0xA31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0xA60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x3A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH2 0xA91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SSTORE DUP2 SWAP1 SUB PUSH2 0x420 JUMPI PUSH1 0x9 SLOAD PUSH1 0x3 SLOAD PUSH2 0x41A SWAP2 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x7 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SUB PUSH2 0x439 JUMPI PUSH1 0xB SLOAD PUSH1 0x6 SLOAD PUSH2 0x41A SWAP2 PUSH2 0xB8C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x487 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F8 SWAP2 SWAP1 PUSH2 0xE60 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x542 SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xB9F JUMP JUMPDEST DUP1 PUSH2 0x54F JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x2 EQ JUMPDEST PUSH2 0x59B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742057686974654C69737465642041646472657373000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD GT DUP1 ISZERO PUSH2 0x5AF JUMPI POP PUSH1 0x3 PUSH1 0x1 SLOAD LT JUMPDEST PUSH2 0x5FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616C6C6F77656420746F20627579206E6F772E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 SUB PUSH2 0x717 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x620 SWAP1 CALLVALUE SWAP1 PUSH2 0xE98 JUMP JUMPDEST PUSH1 0x5 SLOAD LT ISZERO DUP1 ISZERO PUSH2 0x64D JUMPI POP PUSH1 0x4 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x64A SWAP1 CALLVALUE SWAP1 PUSH2 0xE98 JUMP JUMPDEST LT ISZERO JUMPDEST PUSH2 0x6BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E7420697320616C6C6F77656420302E30312065746820746F203130 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2065746820666F72206F6E6C79206C697374656420616464726573732E000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F6 JUMP JUMPDEST CALLVALUE PUSH1 0x8 SLOAD PUSH2 0x6CD SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST PUSH1 0x3 SLOAD LT ISZERO PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10D85B9B9BDD08189D5E481D1A1A5CC8185B5BDD5B9D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x722 CALLVALUE PUSH2 0x8F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SLOAD PUSH1 0x1 SUB PUSH2 0x74B JUMPI CALLVALUE PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x740 SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x763 SWAP1 POP JUMP JUMPDEST CALLVALUE PUSH1 0xA PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x75D SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x81C SWAP1 DUP5 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x840 SWAP1 DUP5 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x877 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD PUSH1 0x2 EQ DUP1 ISZERO PUSH2 0x912 JUMPI POP PUSH1 0x6 SLOAD DUP3 PUSH1 0xA SLOAD PUSH2 0x910 SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x93F JUMPI PUSH2 0x931 PUSH1 0xB SLOAD DUP4 PUSH1 0xA SLOAD PUSH2 0x92B SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x93F SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x94D SWAP1 DUP4 SWAP1 PUSH2 0xB8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0xC SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E2 SWAP2 SWAP1 PUSH2 0xE60 JUMP JUMPDEST POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH2 0x439 DUP2 PUSH2 0xBEA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xB88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB98 DUP3 DUP5 PUSH2 0xEAB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBE2 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP6 SWAP1 POP PUSH2 0xCAA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCB7 DUP6 DUP5 PUSH2 0xCC0 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD05 JUMPI PUSH2 0xCF1 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCE4 JUMPI PUSH2 0xCE4 PUSH2 0xECD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD0D JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xCFD DUP2 PUSH2 0xEE3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xCC5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xD29 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB98 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB98 DUP3 PUSH2 0xD3C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA8 DUP4 PUSH2 0xD3C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xE19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x94D JUMPI PUSH2 0x94D PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xEC8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xEF5 JUMPI PUSH2 0xEF5 PUSH2 0xE82 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0xDE 0xAE 0x4B DUP4 PUSH30 0xBB786C0D7B1E7823031FC68431B503ADBB0D85274B51A37818F964736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"19433:4938:0:-:0;;;9493:1;9469:25;;19710:9;19681:38;;19749:4;19726:27;;19783:4;19760:27;;19859:9;19831:37;;19990:1;19951:40;;20037:13;19998:52;;20095:1;20057:39;;20141:13;20103:51;;20303:265;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8480:17;8523:18;;-1:-1:-1;;;;;;8523:18:0;1332:10;8523:18;;;;;8557:43;;1332:10;;;;8557:43;;8480:17;;8557:43;8469:139;20443:45;20466:21;;20443:18;;:22;;;;;;:45;;;;:::i;:::-;20430:10;:58;20499:13;:30;;-1:-1:-1;;;;;;20499:30:0;-1:-1:-1;;;;;20499:30:0;;;;;;;;;;;20540:8;:20;19433:4938;;5202:98;5260:7;5287:5;5291:1;5287;:5;:::i;:::-;5280:12;5202:98;-1:-1:-1;;;5202:98:0:o;14:351:1:-;93:6;101;154:2;142:9;133:7;129:23;125:32;122:52;;;170:1;167;160:12;122:52;196:16;;-1:-1:-1;;;;;241:31:1;;231:42;;221:70;;287:1;284;277:12;221:70;355:2;340:18;;;;334:25;310:5;;334:25;;-1:-1:-1;;;14:351:1:o;370:217::-;410:1;436;426:132;;480:10;475:3;471:20;468:1;461:31;515:4;512:1;505:15;543:4;540:1;533:15;426:132;-1:-1:-1;572:9:1;;370:217::o;:::-;19433:4938:0;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_1524":{"entryPoint":null,"id":1524,"parameterSlots":0,"returnSlots":0},"@_1528":{"entryPoint":null,"id":1528,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1106":{"entryPoint":null,"id":1106,"parameterSlots":2,"returnSlots":1},"@_hashPair_1095":{"entryPoint":3341,"id":1095,"parameterSlots":2,"returnSlots":1},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_523":{"entryPoint":3050,"id":523,"parameterSlots":1,"returnSlots":0},"@buy_1454":{"entryPoint":1277,"id":1454,"parameterSlots":2,"returnSlots":0},"@calcTokenAmount_1338":{"entryPoint":2288,"id":1338,"parameterSlots":1,"returnSlots":1},"@claimETH_581":{"entryPoint":2756,"id":581,"parameterSlots":1,"returnSlots":0},"@claimRewardToken_1496":{"entryPoint":2387,"id":1496,"parameterSlots":0,"returnSlots":0},"@claimToken_558":{"entryPoint":1084,"id":558,"parameterSlots":2,"returnSlots":0},"@div_323":{"entryPoint":2956,"id":323,"parameterSlots":2,"returnSlots":1},"@getClaimAmount_1510":{"entryPoint":null,"id":1510,"parameterSlots":1,"returnSlots":1},"@getPrice_1520":{"entryPoint":null,"id":1520,"parameterSlots":0,"returnSlots":1},"@isValidProof_1248":{"entryPoint":2975,"id":1248,"parameterSlots":3,"returnSlots":1},"@owner_453":{"entryPoint":null,"id":453,"parameterSlots":0,"returnSlots":1},"@privateSaleAllocation_1152":{"entryPoint":null,"id":1152,"parameterSlots":0,"returnSlots":0},"@privateSaleTotalSaled_1147":{"entryPoint":null,"id":1147,"parameterSlots":0,"returnSlots":0},"@processProof_664":{"entryPoint":3264,"id":664,"parameterSlots":2,"returnSlots":1},"@publicSaleAllocation_1160":{"entryPoint":null,"id":1160,"parameterSlots":0,"returnSlots":0},"@publicSaleTotalSaled_1155":{"entryPoint":null,"id":1155,"parameterSlots":0,"returnSlots":0},"@renounceOwnership_486":{"entryPoint":2172,"id":486,"parameterSlots":0,"returnSlots":0},"@resetPrice_1260":{"entryPoint":2609,"id":1260,"parameterSlots":1,"returnSlots":0},"@rootHash_1126":{"entryPoint":null,"id":1126,"parameterSlots":0,"returnSlots":0},"@saleIndex_529":{"entryPoint":null,"id":529,"parameterSlots":0,"returnSlots":0},"@setRootHash_1205":{"entryPoint":2125,"id":1205,"parameterSlots":1,"returnSlots":0},"@startSale_1296":{"entryPoint":972,"id":1296,"parameterSlots":1,"returnSlots":0},"@stopSale_539":{"entryPoint":2656,"id":539,"parameterSlots":0,"returnSlots":0},"@transferOwnership_498":{"entryPoint":2705,"id":498,"parameterSlots":1,"returnSlots":0},"@userDeposited_1170":{"entryPoint":null,"id":1170,"parameterSlots":0,"returnSlots":0},"@userRewards_1166":{"entryPoint":null,"id":1166,"parameterSlots":0,"returnSlots":0},"@verify_603":{"entryPoint":3242,"id":603,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":3388,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3416,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3468,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":3510,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3680,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3443,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_16c109910cafd6ff652c7cb9875c0f7cd5443a276afa59c2b386970293b5c3eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_17d67e55e25f57674b2d371b54180938132d879cd196f78ebd4f3efe2c739261__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_81274023e9e4c209df2c2d69177718e21483068871738c658d8b8df45d491d50__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3627,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f79de05fb6abf551b5172d1c164f6a040a23dc262ef976fac7601d71815718ea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3736,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3755,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3811,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3714,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3789,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6910:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:1","statements":[{"nodeType":"YulAssignment","src":"73:29:1","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:1"},"nodeType":"YulFunctionCall","src":"82:20:1"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:1"}]},{"body":{"nodeType":"YulBlock","src":"165:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:1"},"nodeType":"YulFunctionCall","src":"167:12:1"},"nodeType":"YulExpressionStatement","src":"167:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:1"},"nodeType":"YulFunctionCall","src":"146:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:1"},"nodeType":"YulFunctionCall","src":"142:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:1"},"nodeType":"YulFunctionCall","src":"131:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:1"},"nodeType":"YulFunctionCall","src":"121:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:1"},"nodeType":"YulFunctionCall","src":"114:50:1"},"nodeType":"YulIf","src":"111:70:1"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:1","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:1","type":""}],"src":"14:173:1"},{"body":{"nodeType":"YulBlock","src":"262:116:1","statements":[{"body":{"nodeType":"YulBlock","src":"308:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:1"},"nodeType":"YulFunctionCall","src":"310:12:1"},"nodeType":"YulExpressionStatement","src":"310:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"283:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"292:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"279:3:1"},"nodeType":"YulFunctionCall","src":"279:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"304:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:1"},"nodeType":"YulFunctionCall","src":"275:32:1"},"nodeType":"YulIf","src":"272:52:1"},{"nodeType":"YulAssignment","src":"333:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"343:18:1"},"nodeType":"YulFunctionCall","src":"343:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"333:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"228:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"239:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"251:6:1","type":""}],"src":"192:186:1"},{"body":{"nodeType":"YulBlock","src":"484:76:1","statements":[{"nodeType":"YulAssignment","src":"494:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"506:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"517:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:1"},"nodeType":"YulFunctionCall","src":"502:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"494:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"536:9:1"},{"name":"value0","nodeType":"YulIdentifier","src":"547:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"529:6:1"},"nodeType":"YulFunctionCall","src":"529:25:1"},"nodeType":"YulExpressionStatement","src":"529:25:1"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"453:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"464:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"475:4:1","type":""}],"src":"383:177:1"},{"body":{"nodeType":"YulBlock","src":"635:110:1","statements":[{"body":{"nodeType":"YulBlock","src":"681:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"690:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"693:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"683:6:1"},"nodeType":"YulFunctionCall","src":"683:12:1"},"nodeType":"YulExpressionStatement","src":"683:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"656:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"665:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"652:3:1"},"nodeType":"YulFunctionCall","src":"652:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"677:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"648:3:1"},"nodeType":"YulFunctionCall","src":"648:32:1"},"nodeType":"YulIf","src":"645:52:1"},{"nodeType":"YulAssignment","src":"706:33:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"729:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"716:12:1"},"nodeType":"YulFunctionCall","src":"716:23:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"706:6:1"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"601:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"612:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"624:6:1","type":""}],"src":"565:180:1"},{"body":{"nodeType":"YulBlock","src":"837:167:1","statements":[{"body":{"nodeType":"YulBlock","src":"883:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"892:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"895:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"885:6:1"},"nodeType":"YulFunctionCall","src":"885:12:1"},"nodeType":"YulExpressionStatement","src":"885:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"858:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"867:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"854:3:1"},"nodeType":"YulFunctionCall","src":"854:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"879:2:1","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"850:3:1"},"nodeType":"YulFunctionCall","src":"850:32:1"},"nodeType":"YulIf","src":"847:52:1"},{"nodeType":"YulAssignment","src":"908:39:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"937:9:1"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"918:18:1"},"nodeType":"YulFunctionCall","src":"918:29:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"908:6:1"}]},{"nodeType":"YulAssignment","src":"956:42:1","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"983:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"994:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"979:3:1"},"nodeType":"YulFunctionCall","src":"979:18:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"966:12:1"},"nodeType":"YulFunctionCall","src":"966:32:1"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"956:6:1"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"795:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"806:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"818:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"826:6:1","type":""}],"src":"750:254:1"},{"body":{"nodeType":"YulBlock","src":"1110:76:1","statements":[{"nodeType":"YulAssignment","src":"1120:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1132:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1143:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1128:3:1"},"nodeType":"YulFunctionCall","src":"1128:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1120:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1162:9:1"},{"name":"value0","nodeType":"YulIdentifier","src":"1173:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1155:6:1"},"nodeType":"YulFunctionCall","src":"1155:25:1"},"nodeType":"YulExpressionStatement","src":"1155:25:1"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1079:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1090:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1101:4:1","type":""}],"src":"1009:177:1"},{"body":{"nodeType":"YulBlock","src":"1296:510:1","statements":[{"body":{"nodeType":"YulBlock","src":"1342:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1351:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1354:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1344:6:1"},"nodeType":"YulFunctionCall","src":"1344:12:1"},"nodeType":"YulExpressionStatement","src":"1344:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1317:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"1326:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1313:3:1"},"nodeType":"YulFunctionCall","src":"1313:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"1338:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1309:3:1"},"nodeType":"YulFunctionCall","src":"1309:32:1"},"nodeType":"YulIf","src":"1306:52:1"},{"nodeType":"YulVariableDeclaration","src":"1367:37:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1394:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1381:12:1"},"nodeType":"YulFunctionCall","src":"1381:23:1"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1371:6:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1413:28:1","value":{"kind":"number","nodeType":"YulLiteral","src":"1423:18:1","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1417:2:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"1468:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1477:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1480:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1470:6:1"},"nodeType":"YulFunctionCall","src":"1470:12:1"},"nodeType":"YulExpressionStatement","src":"1470:12:1"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1456:6:1"},{"name":"_1","nodeType":"YulIdentifier","src":"1464:2:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1453:2:1"},"nodeType":"YulFunctionCall","src":"1453:14:1"},"nodeType":"YulIf","src":"1450:34:1"},{"nodeType":"YulVariableDeclaration","src":"1493:32:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:1"},{"name":"offset","nodeType":"YulIdentifier","src":"1518:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1503:3:1"},"nodeType":"YulFunctionCall","src":"1503:22:1"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1497:2:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"1573:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1582:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1585:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1575:6:1"},"nodeType":"YulFunctionCall","src":"1575:12:1"},"nodeType":"YulExpressionStatement","src":"1575:12:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1552:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"1556:4:1","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1548:3:1"},"nodeType":"YulFunctionCall","src":"1548:13:1"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1563:7:1"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1544:3:1"},"nodeType":"YulFunctionCall","src":"1544:27:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1537:6:1"},"nodeType":"YulFunctionCall","src":"1537:35:1"},"nodeType":"YulIf","src":"1534:55:1"},{"nodeType":"YulVariableDeclaration","src":"1598:30:1","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1625:2:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1612:12:1"},"nodeType":"YulFunctionCall","src":"1612:16:1"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"1655:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1664:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1667:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1657:6:1"},"nodeType":"YulFunctionCall","src":"1657:12:1"},"nodeType":"YulExpressionStatement","src":"1657:12:1"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1643:6:1"},{"name":"_1","nodeType":"YulIdentifier","src":"1651:2:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1640:2:1"},"nodeType":"YulFunctionCall","src":"1640:14:1"},"nodeType":"YulIf","src":"1637:34:1"},{"body":{"nodeType":"YulBlock","src":"1729:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1738:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1741:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1731:6:1"},"nodeType":"YulFunctionCall","src":"1731:12:1"},"nodeType":"YulExpressionStatement","src":"1731:12:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1694:2:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1702:1:1","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1705:6:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1698:3:1"},"nodeType":"YulFunctionCall","src":"1698:14:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1690:3:1"},"nodeType":"YulFunctionCall","src":"1690:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"1715:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1686:3:1"},"nodeType":"YulFunctionCall","src":"1686:32:1"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1720:7:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1683:2:1"},"nodeType":"YulFunctionCall","src":"1683:45:1"},"nodeType":"YulIf","src":"1680:65:1"},{"nodeType":"YulAssignment","src":"1754:21:1","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1768:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"1772:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1764:3:1"},"nodeType":"YulFunctionCall","src":"1764:11:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1754:6:1"}]},{"nodeType":"YulAssignment","src":"1784:16:1","value":{"name":"length","nodeType":"YulIdentifier","src":"1794:6:1"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1784:6:1"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1254:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1265:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1277:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1285:6:1","type":""}],"src":"1191:615:1"},{"body":{"nodeType":"YulBlock","src":"1881:110:1","statements":[{"body":{"nodeType":"YulBlock","src":"1927:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1936:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1939:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1929:6:1"},"nodeType":"YulFunctionCall","src":"1929:12:1"},"nodeType":"YulExpressionStatement","src":"1929:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1902:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"1911:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1898:3:1"},"nodeType":"YulFunctionCall","src":"1898:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"1923:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1894:3:1"},"nodeType":"YulFunctionCall","src":"1894:32:1"},"nodeType":"YulIf","src":"1891:52:1"},{"nodeType":"YulAssignment","src":"1952:33:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1975:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1962:12:1"},"nodeType":"YulFunctionCall","src":"1962:23:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1952:6:1"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1847:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1858:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1870:6:1","type":""}],"src":"1811:180:1"},{"body":{"nodeType":"YulBlock","src":"2097:102:1","statements":[{"nodeType":"YulAssignment","src":"2107:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2119:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2130:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2115:3:1"},"nodeType":"YulFunctionCall","src":"2115:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2107:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2149:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2164:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2180:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2185:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2176:3:1"},"nodeType":"YulFunctionCall","src":"2176:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"2189:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2172:3:1"},"nodeType":"YulFunctionCall","src":"2172:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2160:3:1"},"nodeType":"YulFunctionCall","src":"2160:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2142:6:1"},"nodeType":"YulFunctionCall","src":"2142:51:1"},"nodeType":"YulExpressionStatement","src":"2142:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2066:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2077:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2088:4:1","type":""}],"src":"1996:203:1"},{"body":{"nodeType":"YulBlock","src":"2378:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2395:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2406:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2388:6:1"},"nodeType":"YulFunctionCall","src":"2388:21:1"},"nodeType":"YulExpressionStatement","src":"2388:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2429:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2440:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2425:3:1"},"nodeType":"YulFunctionCall","src":"2425:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2445:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2418:6:1"},"nodeType":"YulFunctionCall","src":"2418:30:1"},"nodeType":"YulExpressionStatement","src":"2418:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2468:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2479:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2464:3:1"},"nodeType":"YulFunctionCall","src":"2464:18:1"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"2484:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2457:6:1"},"nodeType":"YulFunctionCall","src":"2457:62:1"},"nodeType":"YulExpressionStatement","src":"2457:62:1"},{"nodeType":"YulAssignment","src":"2528:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2540:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2551:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2536:3:1"},"nodeType":"YulFunctionCall","src":"2536:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2528:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2355:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2369:4:1","type":""}],"src":"2204:356:1"},{"body":{"nodeType":"YulBlock","src":"2694:145:1","statements":[{"nodeType":"YulAssignment","src":"2704:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2727:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:1"},"nodeType":"YulFunctionCall","src":"2712:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2704:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2746:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2761:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2777:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2782:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2773:3:1"},"nodeType":"YulFunctionCall","src":"2773:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"2786:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2769:3:1"},"nodeType":"YulFunctionCall","src":"2769:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2757:3:1"},"nodeType":"YulFunctionCall","src":"2757:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2739:6:1"},"nodeType":"YulFunctionCall","src":"2739:51:1"},"nodeType":"YulExpressionStatement","src":"2739:51:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2810:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2821:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2806:3:1"},"nodeType":"YulFunctionCall","src":"2806:18:1"},{"name":"value1","nodeType":"YulIdentifier","src":"2826:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2799:6:1"},"nodeType":"YulFunctionCall","src":"2799:34:1"},"nodeType":"YulExpressionStatement","src":"2799:34:1"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2655:9:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2666:6:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2674:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2685:4:1","type":""}],"src":"2565:274:1"},{"body":{"nodeType":"YulBlock","src":"2922:199:1","statements":[{"body":{"nodeType":"YulBlock","src":"2968:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2977:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2980:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2970:6:1"},"nodeType":"YulFunctionCall","src":"2970:12:1"},"nodeType":"YulExpressionStatement","src":"2970:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2943:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"2952:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2939:3:1"},"nodeType":"YulFunctionCall","src":"2939:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"2964:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2935:3:1"},"nodeType":"YulFunctionCall","src":"2935:32:1"},"nodeType":"YulIf","src":"2932:52:1"},{"nodeType":"YulVariableDeclaration","src":"2993:29:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3012:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3006:5:1"},"nodeType":"YulFunctionCall","src":"3006:16:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2997:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"3075:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3084:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3087:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3077:6:1"},"nodeType":"YulFunctionCall","src":"3077:12:1"},"nodeType":"YulExpressionStatement","src":"3077:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3044:5:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3065:5:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3058:6:1"},"nodeType":"YulFunctionCall","src":"3058:13:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3051:6:1"},"nodeType":"YulFunctionCall","src":"3051:21:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3041:2:1"},"nodeType":"YulFunctionCall","src":"3041:32:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3034:6:1"},"nodeType":"YulFunctionCall","src":"3034:40:1"},"nodeType":"YulIf","src":"3031:60:1"},{"nodeType":"YulAssignment","src":"3100:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"3110:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3100:6:1"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2888:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2899:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2911:6:1","type":""}],"src":"2844:277:1"},{"body":{"nodeType":"YulBlock","src":"3245:110:1","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3262:3:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3275:2:1","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"3279:6:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3271:3:1"},"nodeType":"YulFunctionCall","src":"3271:15:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:26:1","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3288:3:1"},"nodeType":"YulFunctionCall","src":"3288:31:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3267:3:1"},"nodeType":"YulFunctionCall","src":"3267:53:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3255:6:1"},"nodeType":"YulFunctionCall","src":"3255:66:1"},"nodeType":"YulExpressionStatement","src":"3255:66:1"},{"nodeType":"YulAssignment","src":"3330:19:1","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3341:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3346:2:1","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3337:3:1"},"nodeType":"YulFunctionCall","src":"3337:12:1"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3330:3:1"}]}]},"name":"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3221:3:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3226:6:1","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3237:3:1","type":""}],"src":"3126:229:1"},{"body":{"nodeType":"YulBlock","src":"3534:173:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3551:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3562:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3544:6:1"},"nodeType":"YulFunctionCall","src":"3544:21:1"},"nodeType":"YulExpressionStatement","src":"3544:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3585:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3596:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3581:3:1"},"nodeType":"YulFunctionCall","src":"3581:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3601:2:1","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3574:6:1"},"nodeType":"YulFunctionCall","src":"3574:30:1"},"nodeType":"YulExpressionStatement","src":"3574:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3624:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3635:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3620:3:1"},"nodeType":"YulFunctionCall","src":"3620:18:1"},{"hexValue":"4e6f742057686974654c69737465642041646472657373","kind":"string","nodeType":"YulLiteral","src":"3640:25:1","type":"","value":"Not WhiteListed Address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3613:6:1"},"nodeType":"YulFunctionCall","src":"3613:53:1"},"nodeType":"YulExpressionStatement","src":"3613:53:1"},{"nodeType":"YulAssignment","src":"3675:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3687:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3698:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3683:3:1"},"nodeType":"YulFunctionCall","src":"3683:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3675:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_81274023e9e4c209df2c2d69177718e21483068871738c658d8b8df45d491d50__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3511:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3525:4:1","type":""}],"src":"3360:347:1"},{"body":{"nodeType":"YulBlock","src":"3886:173:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3903:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3914:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3896:6:1"},"nodeType":"YulFunctionCall","src":"3896:21:1"},"nodeType":"YulExpressionStatement","src":"3896:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3937:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3948:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3933:3:1"},"nodeType":"YulFunctionCall","src":"3933:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3953:2:1","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3926:6:1"},"nodeType":"YulFunctionCall","src":"3926:30:1"},"nodeType":"YulExpressionStatement","src":"3926:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3976:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3987:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3972:3:1"},"nodeType":"YulFunctionCall","src":"3972:18:1"},{"hexValue":"4e6f7420616c6c6f77656420746f20627579206e6f772e","kind":"string","nodeType":"YulLiteral","src":"3992:25:1","type":"","value":"Not allowed to buy now."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3965:6:1"},"nodeType":"YulFunctionCall","src":"3965:53:1"},"nodeType":"YulExpressionStatement","src":"3965:53:1"},{"nodeType":"YulAssignment","src":"4027:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4039:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4050:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4035:3:1"},"nodeType":"YulFunctionCall","src":"4035:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4027:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_17d67e55e25f57674b2d371b54180938132d879cd196f78ebd4f3efe2c739261__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3863:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3877:4:1","type":""}],"src":"3712:347:1"},{"body":{"nodeType":"YulBlock","src":"4096:95:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4113:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4120:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4125:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4116:3:1"},"nodeType":"YulFunctionCall","src":"4116:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4106:6:1"},"nodeType":"YulFunctionCall","src":"4106:31:1"},"nodeType":"YulExpressionStatement","src":"4106:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4153:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4156:4:1","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4146:6:1"},"nodeType":"YulFunctionCall","src":"4146:15:1"},"nodeType":"YulExpressionStatement","src":"4146:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4177:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4180:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4170:6:1"},"nodeType":"YulFunctionCall","src":"4170:15:1"},"nodeType":"YulExpressionStatement","src":"4170:15:1"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4064:127:1"},{"body":{"nodeType":"YulBlock","src":"4244:77:1","statements":[{"nodeType":"YulAssignment","src":"4254:16:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4265:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"4268:1:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4261:3:1"},"nodeType":"YulFunctionCall","src":"4261:9:1"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4254:3:1"}]},{"body":{"nodeType":"YulBlock","src":"4293:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4295:16:1"},"nodeType":"YulFunctionCall","src":"4295:18:1"},"nodeType":"YulExpressionStatement","src":"4295:18:1"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4285:1:1"},{"name":"sum","nodeType":"YulIdentifier","src":"4288:3:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4282:2:1"},"nodeType":"YulFunctionCall","src":"4282:10:1"},"nodeType":"YulIf","src":"4279:36:1"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4227:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"4230:1:1","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"4236:3:1","type":""}],"src":"4196:125:1"},{"body":{"nodeType":"YulBlock","src":"4500:251:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4517:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4528:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4510:6:1"},"nodeType":"YulFunctionCall","src":"4510:21:1"},"nodeType":"YulExpressionStatement","src":"4510:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4551:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4562:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4547:3:1"},"nodeType":"YulFunctionCall","src":"4547:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"4567:2:1","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4540:6:1"},"nodeType":"YulFunctionCall","src":"4540:30:1"},"nodeType":"YulExpressionStatement","src":"4540:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4590:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4601:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4586:3:1"},"nodeType":"YulFunctionCall","src":"4586:18:1"},{"hexValue":"416d6f756e7420697320616c6c6f77656420302e30312065746820746f203130","kind":"string","nodeType":"YulLiteral","src":"4606:34:1","type":"","value":"Amount is allowed 0.01 eth to 10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4579:6:1"},"nodeType":"YulFunctionCall","src":"4579:62:1"},"nodeType":"YulExpressionStatement","src":"4579:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4661:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4672:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4657:3:1"},"nodeType":"YulFunctionCall","src":"4657:18:1"},{"hexValue":"2065746820666f72206f6e6c79206c697374656420616464726573732e","kind":"string","nodeType":"YulLiteral","src":"4677:31:1","type":"","value":" eth for only listed address."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4650:6:1"},"nodeType":"YulFunctionCall","src":"4650:59:1"},"nodeType":"YulExpressionStatement","src":"4650:59:1"},{"nodeType":"YulAssignment","src":"4718:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4730:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4741:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4726:3:1"},"nodeType":"YulFunctionCall","src":"4726:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4718:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_16c109910cafd6ff652c7cb9875c0f7cd5443a276afa59c2b386970293b5c3eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4477:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4491:4:1","type":""}],"src":"4326:425:1"},{"body":{"nodeType":"YulBlock","src":"4930:172:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4947:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4958:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4940:6:1"},"nodeType":"YulFunctionCall","src":"4940:21:1"},"nodeType":"YulExpressionStatement","src":"4940:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4981:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4992:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4977:3:1"},"nodeType":"YulFunctionCall","src":"4977:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"4997:2:1","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4970:6:1"},"nodeType":"YulFunctionCall","src":"4970:30:1"},"nodeType":"YulExpressionStatement","src":"4970:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5031:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5016:3:1"},"nodeType":"YulFunctionCall","src":"5016:18:1"},{"hexValue":"43616e6e6f7420627579207468697320616d6f756e74","kind":"string","nodeType":"YulLiteral","src":"5036:24:1","type":"","value":"Cannot buy this amount"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5009:6:1"},"nodeType":"YulFunctionCall","src":"5009:52:1"},"nodeType":"YulExpressionStatement","src":"5009:52:1"},{"nodeType":"YulAssignment","src":"5070:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5082:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5093:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5078:3:1"},"nodeType":"YulFunctionCall","src":"5078:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5070:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_f79de05fb6abf551b5172d1c164f6a040a23dc262ef976fac7601d71815718ea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4907:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4921:4:1","type":""}],"src":"4756:346:1"},{"body":{"nodeType":"YulBlock","src":"5298:14:1","statements":[{"nodeType":"YulAssignment","src":"5300:10:1","value":{"name":"pos","nodeType":"YulIdentifier","src":"5307:3:1"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5300:3:1"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5282:3:1","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5290:3:1","type":""}],"src":"5107:205:1"},{"body":{"nodeType":"YulBlock","src":"5491:170:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5508:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5519:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5501:6:1"},"nodeType":"YulFunctionCall","src":"5501:21:1"},"nodeType":"YulExpressionStatement","src":"5501:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5542:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5553:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5538:3:1"},"nodeType":"YulFunctionCall","src":"5538:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"5558:2:1","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5531:6:1"},"nodeType":"YulFunctionCall","src":"5531:30:1"},"nodeType":"YulExpressionStatement","src":"5531:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5581:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5592:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5577:3:1"},"nodeType":"YulFunctionCall","src":"5577:18:1"},{"hexValue":"4661696c656420746f2073656e64204574686572","kind":"string","nodeType":"YulLiteral","src":"5597:22:1","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5570:6:1"},"nodeType":"YulFunctionCall","src":"5570:50:1"},"nodeType":"YulExpressionStatement","src":"5570:50:1"},{"nodeType":"YulAssignment","src":"5629:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5641:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5652:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5637:3:1"},"nodeType":"YulFunctionCall","src":"5637:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5629:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5468:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5482:4:1","type":""}],"src":"5317:344:1"},{"body":{"nodeType":"YulBlock","src":"5840:167:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5857:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5868:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5850:6:1"},"nodeType":"YulFunctionCall","src":"5850:21:1"},"nodeType":"YulExpressionStatement","src":"5850:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5891:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5902:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5887:3:1"},"nodeType":"YulFunctionCall","src":"5887:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"5907:2:1","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5880:6:1"},"nodeType":"YulFunctionCall","src":"5880:30:1"},"nodeType":"YulExpressionStatement","src":"5880:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5930:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5941:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5926:3:1"},"nodeType":"YulFunctionCall","src":"5926:18:1"},{"hexValue":"506c656173652062757920746f6b656e2e","kind":"string","nodeType":"YulLiteral","src":"5946:19:1","type":"","value":"Please buy token."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5919:6:1"},"nodeType":"YulFunctionCall","src":"5919:47:1"},"nodeType":"YulExpressionStatement","src":"5919:47:1"},{"nodeType":"YulAssignment","src":"5975:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5987:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"5998:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5983:3:1"},"nodeType":"YulFunctionCall","src":"5983:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5975:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5817:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5831:4:1","type":""}],"src":"5666:341:1"},{"body":{"nodeType":"YulBlock","src":"6058:171:1","statements":[{"body":{"nodeType":"YulBlock","src":"6089:111:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6110:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6117:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6122:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6113:3:1"},"nodeType":"YulFunctionCall","src":"6113:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6103:6:1"},"nodeType":"YulFunctionCall","src":"6103:31:1"},"nodeType":"YulExpressionStatement","src":"6103:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6154:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6157:4:1","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6147:6:1"},"nodeType":"YulFunctionCall","src":"6147:15:1"},"nodeType":"YulExpressionStatement","src":"6147:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6182:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6185:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6175:6:1"},"nodeType":"YulFunctionCall","src":"6175:15:1"},"nodeType":"YulExpressionStatement","src":"6175:15:1"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6078:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6071:6:1"},"nodeType":"YulFunctionCall","src":"6071:9:1"},"nodeType":"YulIf","src":"6068:132:1"},{"nodeType":"YulAssignment","src":"6209:14:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6218:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"6221:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6214:3:1"},"nodeType":"YulFunctionCall","src":"6214:9:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6209:1:1"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6043:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"6046:1:1","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"6052:1:1","type":""}],"src":"6012:217:1"},{"body":{"nodeType":"YulBlock","src":"6408:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6425:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"6436:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6418:6:1"},"nodeType":"YulFunctionCall","src":"6418:21:1"},"nodeType":"YulExpressionStatement","src":"6418:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6459:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"6470:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6455:3:1"},"nodeType":"YulFunctionCall","src":"6455:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"6475:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6448:6:1"},"nodeType":"YulFunctionCall","src":"6448:30:1"},"nodeType":"YulExpressionStatement","src":"6448:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6498:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"6509:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6494:3:1"},"nodeType":"YulFunctionCall","src":"6494:18:1"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"6514:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6487:6:1"},"nodeType":"YulFunctionCall","src":"6487:62:1"},"nodeType":"YulExpressionStatement","src":"6487:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6569:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"6580:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6565:3:1"},"nodeType":"YulFunctionCall","src":"6565:18:1"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"6585:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6558:6:1"},"nodeType":"YulFunctionCall","src":"6558:36:1"},"nodeType":"YulExpressionStatement","src":"6558:36:1"},{"nodeType":"YulAssignment","src":"6603:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6615:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"6626:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6611:3:1"},"nodeType":"YulFunctionCall","src":"6611:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6603:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6385:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6399:4:1","type":""}],"src":"6234:402:1"},{"body":{"nodeType":"YulBlock","src":"6673:95:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6690:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6697:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6702:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6693:3:1"},"nodeType":"YulFunctionCall","src":"6693:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6683:6:1"},"nodeType":"YulFunctionCall","src":"6683:31:1"},"nodeType":"YulExpressionStatement","src":"6683:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6730:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6733:4:1","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6723:6:1"},"nodeType":"YulFunctionCall","src":"6723:15:1"},"nodeType":"YulExpressionStatement","src":"6723:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6754:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6757:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6747:6:1"},"nodeType":"YulFunctionCall","src":"6747:15:1"},"nodeType":"YulExpressionStatement","src":"6747:15:1"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6641:127:1"},{"body":{"nodeType":"YulBlock","src":"6820:88:1","statements":[{"body":{"nodeType":"YulBlock","src":"6851:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6853:16:1"},"nodeType":"YulFunctionCall","src":"6853:18:1"},"nodeType":"YulExpressionStatement","src":"6853:18:1"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6836:5:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6847:1:1","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6843:3:1"},"nodeType":"YulFunctionCall","src":"6843:6:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6833:2:1"},"nodeType":"YulFunctionCall","src":"6833:17:1"},"nodeType":"YulIf","src":"6830:43:1"},{"nodeType":"YulAssignment","src":"6882:20:1","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6893:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"6900:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6889:3:1"},"nodeType":"YulFunctionCall","src":"6889:13:1"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6882:3:1"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6802:5:1","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6812:3:1","type":""}],"src":"6773:135:1"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 20)\n    }\n    function abi_encode_tuple_t_stringliteral_81274023e9e4c209df2c2d69177718e21483068871738c658d8b8df45d491d50__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Not WhiteListed Address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_17d67e55e25f57674b2d371b54180938132d879cd196f78ebd4f3efe2c739261__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Not allowed to buy now.\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_16c109910cafd6ff652c7cb9875c0f7cd5443a276afa59c2b386970293b5c3eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"Amount is allowed 0.01 eth to 10\")\n        mstore(add(headStart, 96), \" eth for only listed address.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f79de05fb6abf551b5172d1c164f6a040a23dc262ef976fac7601d71815718ea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Cannot buy this amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a877888a7961bab57e32ecce77d2df09f5f6ab109b3e07e97e7958a5ff7c4908__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Please buy token.\")\n        tail := add(headStart, 96)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061012d5760003560e01c80638092be4a116100a5578063dde070e81161006c578063dde070e81461030b578063de8e81ed14610341578063e36b0b3714610361578063e7a6ac5514610376578063f2fde38b1461038c578063fe96973a146103ac57005b80638092be4a146102765780638da5cb5b146102a357806398d5fdca146102cb578063afd18916146102e0578063c8aad250146102f557005b80632d7eae66116100f45780632d7eae66146101df57806334ad1f32146101ff5780636ec012e714610215578063715018a61461022b57806378442876146102405780637b7902dd1461025657005b80630660f1e8146101365780630e3ab61d146101765780631698755f146101965780631d80009a146101b657806329ec7eed146101cc57005b3661013457005b005b34801561014257600080fd5b50610163610151366004610d58565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561018257600080fd5b50610134610191366004610d73565b6103cc565b3480156101a257600080fd5b506101346101b1366004610d8c565b61043c565b3480156101c257600080fd5b5061016360025481565b6101346101da366004610db6565b6104fd565b3480156101eb57600080fd5b506101346101fa366004610d73565b61084d565b34801561020b57600080fd5b50610163600b5481565b34801561022157600080fd5b5061016360015481565b34801561023757600080fd5b5061013461087c565b34801561024c57600080fd5b5061016360085481565b34801561026257600080fd5b50610163610271366004610d73565b6108f0565b34801561028257600080fd5b50610163610291366004610d58565b600e6020526000908152604090205481565b3480156102af57600080fd5b506000546040516001600160a01b03909116815260200161016d565b3480156102d757600080fd5b50600754610163565b3480156102ec57600080fd5b50610134610953565b34801561030157600080fd5b5061016360095481565b34801561031757600080fd5b50610163610326366004610d58565b6001600160a01b03166000908152600d602052604090205490565b34801561034d57600080fd5b5061013461035c366004610d73565b610a31565b34801561036d57600080fd5b50610134610a60565b34801561038257600080fd5b50610163600a5481565b34801561039857600080fd5b506101346103a7366004610d58565b610a91565b3480156103b857600080fd5b506101346103c7366004610d73565b610ac4565b6000546001600160a01b031633146103ff5760405162461bcd60e51b81526004016103f690610e2b565b60405180910390fd5b60018181558190036104205760095460035461041a91610b8c565b60075550565b60015460020361043957600b5460065461041a91610b8c565b50565b6000546001600160a01b031633146104665760405162461bcd60e51b81526004016103f690610e2b565b816001600160a01b031663a9059cbb6104876000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f89190610e60565b505050565b6040516bffffffffffffffffffffffff193360601b16602082015282908290610542908390839060340160405160208183030381529060405280519060200120610b9f565b8061054f57506001546002145b61059b5760405162461bcd60e51b815260206004820152601760248201527f4e6f742057686974654c6973746564204164647265737300000000000000000060448201526064016103f6565b60006001541180156105af57506003600154105b6105fb5760405162461bcd60e51b815260206004820152601760248201527f4e6f7420616c6c6f77656420746f20627579206e6f772e00000000000000000060448201526064016103f6565b60015460010361071757336000908152600e6020526040902054610620903490610e98565b6005541015801561064d5750600454336000908152600e602052604090205461064a903490610e98565b10155b6106bf5760405162461bcd60e51b815260206004820152603d60248201527f416d6f756e7420697320616c6c6f77656420302e30312065746820746f20313060448201527f2065746820666f72206f6e6c79206c697374656420616464726573732e00000060648201526084016103f6565b346008546106cd9190610e98565b60035410156107175760405162461bcd60e51b815260206004820152601660248201527510d85b9b9bdd08189d5e481d1a1a5cc8185b5bdd5b9d60521b60448201526064016103f6565b6000610722346108f0565b905060015460010361074b5734600860008282546107409190610e98565b909155506107639050565b34600a600082825461075d9190610e98565b90915550505b600080546040516001600160a01b039091169034908381818185875af1925050503d80600081146107b0576040519150601f19603f3d011682016040523d82523d6000602084013e6107b5565b606091505b50509050806107fd5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103f6565b336000908152600d60205260408120805484929061081c908490610e98565b9091555050336000908152600e602052604081208054349290610840908490610e98565b9091555050505050505050565b6000546001600160a01b031633146108775760405162461bcd60e51b81526004016103f690610e2b565b600255565b6000546001600160a01b031633146108a65760405162461bcd60e51b81526004016103f690610e2b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006001546002148015610912575060065482600a546109109190610e98565b115b1561093f57610931600b5483600a5461092b9190610e98565b90610b8c565b600781905561093f90610a31565b60075461094d908390610b8c565b92915050565b33600052600d602052600c54336000818152600d60205260409081902054905163a9059cbb60e01b8152600481019290925260248201526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190610e60565b50336000818152600d602090815260408083208390558051938452908301919091527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a1565b6000546001600160a01b03163314610a5b5760405162461bcd60e51b81526004016103f690610e2b565b600755565b6000546001600160a01b03163314610a8a5760405162461bcd60e51b81526004016103f690610e2b565b6003600155565b6000546001600160a01b03163314610abb5760405162461bcd60e51b81526004016103f690610e2b565b61043981610bea565b6000546001600160a01b03163314610aee5760405162461bcd60e51b81526004016103f690610e2b565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610b3b576040519150601f19603f3d011682016040523d82523d6000602084013e610b40565b606091505b5050905080610b885760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103f6565b5050565b6000610b988284610eab565b9392505050565b6000610be2848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150859050610caa565b949350505050565b6001600160a01b038116610c4f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f6565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082610cb78584610cc0565b14949350505050565b600081815b8451811015610d0557610cf182868381518110610ce457610ce4610ecd565b6020026020010151610d0d565b915080610cfd81610ee3565b915050610cc5565b509392505050565b6000818310610d29576000828152602084905260409020610b98565b6000838152602083905260409020610b98565b80356001600160a01b0381168114610d5357600080fd5b919050565b600060208284031215610d6a57600080fd5b610b9882610d3c565b600060208284031215610d8557600080fd5b5035919050565b60008060408385031215610d9f57600080fd5b610da883610d3c565b946020939093013593505050565b60008060208385031215610dc957600080fd5b823567ffffffffffffffff80821115610de157600080fd5b818501915085601f830112610df557600080fd5b813581811115610e0457600080fd5b8660208260051b8501011115610e1957600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610e7257600080fd5b81518015158114610b9857600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561094d5761094d610e82565b600082610ec857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201610ef557610ef5610e82565b506001019056fea2646970667358221220e5deae4b837dbb786c0d7b1e7823031fc68431b503adbb0d85274b51a37818f964736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8092BE4A GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xDDE070E8 GT PUSH2 0x6C JUMPI DUP1 PUSH4 0xDDE070E8 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0xDE8E81ED EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xE36B0B37 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0xE7A6AC55 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x3AC JUMPI STOP JUMPDEST DUP1 PUSH4 0x8092BE4A EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A3 JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x2CB JUMPI DUP1 PUSH4 0xAFD18916 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0xC8AAD250 EQ PUSH2 0x2F5 JUMPI STOP JUMPDEST DUP1 PUSH4 0x2D7EAE66 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x2D7EAE66 EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0x34AD1F32 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x6EC012E7 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x78442876 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x7B7902DD EQ PUSH2 0x256 JUMPI STOP JUMPDEST DUP1 PUSH4 0x660F1E8 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0xE3AB61D EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x1698755F EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x1D80009A EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x29EC7EED EQ PUSH2 0x1CC JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x134 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8C JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0xDB6 JUMP JUMPDEST PUSH2 0x4FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0x84D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x87C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x271 CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0x8F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x163 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x953 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x35C CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0xA31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0xA60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x163 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x3A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD58 JUMP JUMPDEST PUSH2 0xA91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0xAC4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SSTORE DUP2 SWAP1 SUB PUSH2 0x420 JUMPI PUSH1 0x9 SLOAD PUSH1 0x3 SLOAD PUSH2 0x41A SWAP2 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x7 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SUB PUSH2 0x439 JUMPI PUSH1 0xB SLOAD PUSH1 0x6 SLOAD PUSH2 0x41A SWAP2 PUSH2 0xB8C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x487 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F8 SWAP2 SWAP1 PUSH2 0xE60 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x542 SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xB9F JUMP JUMPDEST DUP1 PUSH2 0x54F JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x2 EQ JUMPDEST PUSH2 0x59B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742057686974654C69737465642041646472657373000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD GT DUP1 ISZERO PUSH2 0x5AF JUMPI POP PUSH1 0x3 PUSH1 0x1 SLOAD LT JUMPDEST PUSH2 0x5FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616C6C6F77656420746F20627579206E6F772E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 SUB PUSH2 0x717 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x620 SWAP1 CALLVALUE SWAP1 PUSH2 0xE98 JUMP JUMPDEST PUSH1 0x5 SLOAD LT ISZERO DUP1 ISZERO PUSH2 0x64D JUMPI POP PUSH1 0x4 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x64A SWAP1 CALLVALUE SWAP1 PUSH2 0xE98 JUMP JUMPDEST LT ISZERO JUMPDEST PUSH2 0x6BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E7420697320616C6C6F77656420302E30312065746820746F203130 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2065746820666F72206F6E6C79206C697374656420616464726573732E000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F6 JUMP JUMPDEST CALLVALUE PUSH1 0x8 SLOAD PUSH2 0x6CD SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST PUSH1 0x3 SLOAD LT ISZERO PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10D85B9B9BDD08189D5E481D1A1A5CC8185B5BDD5B9D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x722 CALLVALUE PUSH2 0x8F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SLOAD PUSH1 0x1 SUB PUSH2 0x74B JUMPI CALLVALUE PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x740 SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x763 SWAP1 POP JUMP JUMPDEST CALLVALUE PUSH1 0xA PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x75D SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x81C SWAP1 DUP5 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x840 SWAP1 DUP5 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x877 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD PUSH1 0x2 EQ DUP1 ISZERO PUSH2 0x912 JUMPI POP PUSH1 0x6 SLOAD DUP3 PUSH1 0xA SLOAD PUSH2 0x910 SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x93F JUMPI PUSH2 0x931 PUSH1 0xB SLOAD DUP4 PUSH1 0xA SLOAD PUSH2 0x92B SWAP2 SWAP1 PUSH2 0xE98 JUMP JUMPDEST SWAP1 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH2 0x93F SWAP1 PUSH2 0xA31 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x94D SWAP1 DUP4 SWAP1 PUSH2 0xB8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0xC SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E2 SWAP2 SWAP1 PUSH2 0xE60 JUMP JUMPDEST POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x47CEE97CB7ACD717B3C0AA1435D004CD5B3C8C57D70DBCEB4E4458BBD60E39D4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x3 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH2 0x439 DUP2 PUSH2 0xBEA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F6 SWAP1 PUSH2 0xE2B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xB88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB98 DUP3 DUP5 PUSH2 0xEAB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBE2 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD SWAP2 POP DUP6 SWAP1 POP PUSH2 0xCAA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCB7 DUP6 DUP5 PUSH2 0xCC0 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD05 JUMPI PUSH2 0xCF1 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCE4 JUMPI PUSH2 0xCE4 PUSH2 0xECD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD0D JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xCFD DUP2 PUSH2 0xEE3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xCC5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xD29 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB98 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB98 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB98 DUP3 PUSH2 0xD3C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA8 DUP4 PUSH2 0xD3C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xE19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x94D JUMPI PUSH2 0x94D PUSH2 0xE82 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xEC8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xEF5 JUMPI PUSH2 0xEF5 PUSH2 0xE82 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0xDE 0xAE 0x4B DUP4 PUSH30 0xBB786C0D7B1E7823031FC68431B503ADBB0D85274B51A37818F964736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"19433:4938:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20193:46;;;;;;;;;;-1:-1:-1;20193:46:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;529:25:1;;;517:2;502:18;20193:46:0;;;;;;;;21489:320;;;;;;;;;;-1:-1:-1;21489:320:0;;;;;:::i;:::-;;:::i;9726:167::-;;;;;;;;;;-1:-1:-1;9726:167:0;;;;;:::i;:::-;;:::i;19589:23::-;;;;;;;;;;;;;;;;22645:1077;;;;;;:::i;:::-;;:::i;20576:98::-;;;;;;;;;;-1:-1:-1;20576:98:0;;;;;:::i;:::-;;:::i;20103:51::-;;;;;;;;;;;;;;;;9469:25;;;;;;;;;;;;;;;;8830:140;;;;;;;;;;;;;:::i;19951:40::-;;;;;;;;;;;;;;;;21975:494;;;;;;;;;;-1:-1:-1;21975:494:0;;;;;:::i;:::-;;:::i;20246:48::-;;;;;;;;;;-1:-1:-1;20246:48:0;;;;;:::i;:::-;;;;;;;;;;;;;;8616:79;;;;;;;;;;-1:-1:-1;8654:7:0;8681:6;8616:79;;-1:-1:-1;;;;;8681:6:0;;;2142:51:1;;2130:2;2115:18;8616:79:0;1996:203:1;24200:93:0;;;;;;;;;;-1:-1:-1;24275:10:0;;24200:93;;23730:294;;;;;;;;;;;;;:::i;19998:52::-;;;;;;;;;;;;;;;;24032:160;;;;;;;;;;-1:-1:-1;24032:160:0;;;;;:::i;:::-;-1:-1:-1;;;;;24160:24:0;24114:19;24160:24;;;:11;:24;;;;;;;24032:160;21267:91;;;;;;;;;;-1:-1:-1;21267:91:0;;;;;:::i;:::-;;:::i;9543:71::-;;;;;;;;;;;;;:::i;20057:39::-;;;;;;;;;;;;;;;;8978:109;;;;;;;;;;-1:-1:-1;8978:109:0;;;;;:::i;:::-;;:::i;9944:167::-;;;;;;;;;;-1:-1:-1;9944:167:0;;;;;:::i;:::-;;:::i;21489:320::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;;;;;;;;;21555:9:::1;:22:::0;;;21592:14;;;21588:214:::1;;21659:21;::::0;21636:18:::1;::::0;:45:::1;::::0;:22:::1;:45::i;:::-;21623:10;:58:::0;21489:320;:::o;21588:214::-:1;21703:9;;21716:1;21703:14:::0;21699:103:::1;;21769:20;::::0;21747:17:::1;::::0;:43:::1;::::0;:21:::1;:43::i;21699:103::-;21489:320:::0;:::o;9726:167::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;9846:12:::1;-1:-1:-1::0;;;;;9839:29:0::1;;9869:7;8654::::0;8681:6;-1:-1:-1;;;;;8681:6:0;;8616:79;9869:7:::1;9839:46;::::0;-1:-1:-1;;;;;;9839:46:0::1;::::0;;;;;;-1:-1:-1;;;;;2757:32:1;;;9839:46:0::1;::::0;::::1;2739:51:1::0;2806:18;;;2799:34;;;2712:18;;9839:46:0::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9726:167:::0;;:::o;22645:1077::-;20801:28;;-1:-1:-1;;20818:10:0;3275:2:1;3271:15;3267:53;20801:28:0;;;3255:66:1;22736:5:0;;;;20771:60;;22736:5;;;;3337:12:1;;20801:28:0;;;;;;;;;;;;20791:39;;;;;;20771:12;:60::i;:::-;:95;;;;20852:9;;20865:1;20852:14;20771:95;20749:168;;;;-1:-1:-1;;;20749:168:0;;3562:2:1;20749:168:0;;;3544:21:1;3601:2;3581:18;;;3574:30;3640:25;3620:18;;;3613:53;3683:18;;20749:168:0;3360:347:1;20749:168:0;22774:1:::1;22762:9;;:13;:30;;;;;22791:1;22779:9;;:13;22762:30;22754:66;;;::::0;-1:-1:-1;;;22754:66:0;;3914:2:1;22754:66:0::1;::::0;::::1;3896:21:1::0;3953:2;3933:18;;;3926:30;3992:25;3972:18;;;3965:53;4035:18;;22754:66:0::1;3712:347:1::0;22754:66:0::1;22835:9;;22848:1;22835:14:::0;22831:465:::1;;1332:10:::0;22909:27:::1;::::0;;;:13:::1;:27;::::0;;;;;:39:::1;::::0;22939:9:::1;::::0;22909:39:::1;:::i;:::-;22892:12;;:57;;:139;;;;-1:-1:-1::0;23019:12:0::1;::::0;1332:10;22975:27:::1;::::0;;;:13:::1;:27;::::0;;;;;:39:::1;::::0;23005:9:::1;::::0;22975:39:::1;:::i;:::-;22974:57;;22892:139;22866:262;;;::::0;-1:-1:-1;;;22866:262:0;;4528:2:1;22866:262:0::1;::::0;::::1;4510:21:1::0;4567:2;4547:18;;;4540:30;4606:34;4586:18;;;4579:62;4677:31;4657:18;;;4650:59;4726:19;;22866:262:0::1;4326:425:1::0;22866:262:0::1;23216:9;23192:21;;:33;;;;:::i;:::-;23169:18;;:57;;23143:141;;;::::0;-1:-1:-1;;;23143:141:0;;4958:2:1;23143:141:0::1;::::0;::::1;4940:21:1::0;4997:2;4977:18;;;4970:30;-1:-1:-1;;;5016:18:1;;;5009:52;5078:18;;23143:141:0::1;4756:346:1::0;23143:141:0::1;23308:14;23325:26;23341:9;23325:15;:26::i;:::-;23308:43;;23366:9;;23379:1;23366:14:::0;23362:147:::1;;23422:9;23397:21;;:34;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;23362:147:0::1;::::0;-1:-1:-1;23362:147:0::1;;23488:9;23464:20;;:33;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;23362:147:0::1;23520:9;8681:6:::0;;23535:34:::1;::::0;-1:-1:-1;;;;;8681:6:0;;;;23555:9:::1;::::0;23520;23535:34;23520:9;23535:34;23555:9;8681:6;23535:34:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23519:50;;;23588:4;23580:37;;;::::0;-1:-1:-1;;;23580:37:0;;5519:2:1;23580:37:0::1;::::0;::::1;5501:21:1::0;5558:2;5538:18;;;5531:30;-1:-1:-1;;;5577:18:1;;;5570:50;5637:18;;23580:37:0::1;5317:344:1::0;23580:37:0::1;1332:10:::0;23628:25:::1;::::0;;;:11:::1;:25;::::0;;;;:35;;23657:6;;23628:25;:35:::1;::::0;23657:6;;23628:35:::1;:::i;:::-;::::0;;;-1:-1:-1;;1332:10:0;23674:27:::1;::::0;;;:13:::1;:27;::::0;;;;:40;;23705:9:::1;::::0;23674:27;:40:::1;::::0;23705:9;;23674:40:::1;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;;22645:1077:0:o;20576:98::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;20646:8:::1;:20:::0;20576:98::o;8830:140::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;8929:1:::1;8913:6:::0;;8892:40:::1;::::0;-1:-1:-1;;;;;8913:6:0;;::::1;::::0;8892:40:::1;::::0;8929:1;;8892:40:::1;8960:1;8943:19:::0;;-1:-1:-1;;;;;;8943:19:0::1;::::0;;8830:140::o;21975:494::-;22052:14;22146:9;;22159:1;22146:14;:86;;;;;22215:17;;22201:10;22178:20;;:33;;;;:::i;:::-;22177:55;22146:86;22128:286;;;22272:93;22330:20;;22296:10;22273:20;;:33;;;;:::i;:::-;22272:39;;:93::i;:::-;22259:10;:106;;;22380:22;;:10;:22::i;:::-;22450:10;;22433:28;;22434:10;;22433:16;:28::i;:::-;22424:37;21975:494;-1:-1:-1;;21975:494:0:o;23730:294::-;1332:10;23813:1;23784:25;:11;:25;;23854:13;;23878:10;23854:13;23890:25;;;:11;:25;;;;;;;;23847:69;;-1:-1:-1;;;23847:69:0;;;;;2739:51:1;;;;2806:18;;;2799:34;-1:-1:-1;;;;;23854:13:0;;;;23847:30;;2712:18:1;;23847:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1332:10:0;23955:1;23927:25;;;:11;:25;;;;;;;;:29;;;23972:44;;2739:51:1;;;2806:18;;;2799:34;;;;23972:44:0;;2712:18:1;23972:44:0;;;;;;;23730:294::o;21267:91::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;21331:10:::1;:19:::0;21267:91::o;9543:71::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;9605:1:::1;9593:9;:13:::0;9543:71::o;8978:109::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;9051:28:::1;9070:8;9051:18;:28::i;9944:167::-:0;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;;;;;;:::i;:::-;10009:9:::1;8681:6:::0;;10024:31:::1;::::0;-1:-1:-1;;;;;8681:6:0;;;;10044;;10009:9;10024:31;10009:9;10024:31;10044:6;8681;10024:31:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10008:47;;;10074:4;10066:37;;;::::0;-1:-1:-1;;;10066:37:0;;5519:2:1;10066:37:0::1;::::0;::::1;5501:21:1::0;5558:2;5538:18;;;5531:30;-1:-1:-1;;;5577:18:1;;;5570:50;5637:18;;10066:37:0::1;5317:344:1::0;10066:37:0::1;9997:114;9944:167:::0;:::o;5202:98::-;5260:7;5287:5;5291:1;5287;:5;:::i;:::-;5280:12;5202:98;-1:-1:-1;;;5202:98:0:o;20945:182::-;21054:4;21078:41;21097:5;;21078:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;21104:8:0;;;-1:-1:-1;21114:4:0;;-1:-1:-1;21078:18:0;:41::i;:::-;21071:48;20945:182;-1:-1:-1;;;;20945:182:0:o;9095:266::-;-1:-1:-1;;;;;9183:22:0;;9161:110;;;;-1:-1:-1;;;9161:110:0;;6436:2:1;9161:110:0;;;6418:21:1;6475:2;6455:18;;;6448:30;6514:34;6494:18;;;6487:62;-1:-1:-1;;;6565:18:1;;;6558:36;6611:19;;9161:110:0;6234:402:1;9161:110:0;9308:6;;;9287:38;;-1:-1:-1;;;;;9287:38:0;;;;9308:6;;;9287:38;;;9336:6;:17;;-1:-1:-1;;;;;;9336:17:0;-1:-1:-1;;;;;9336:17:0;;;;;;;;;;9095:266::o;10479:190::-;10604:4;10657;10628:25;10641:5;10648:4;10628:12;:25::i;:::-;:33;;10479:190;-1:-1:-1;;;;10479:190:0:o;11346:321::-;11454:7;11497:4;11454:7;11512:118;11536:5;:12;11532:1;:16;11512:118;;;11585:33;11595:12;11609:5;11615:1;11609:8;;;;;;;;:::i;:::-;;;;;;;11585:9;:33::i;:::-;11570:48;-1:-1:-1;11550:3:0;;;;:::i;:::-;;;;11512:118;;;-1:-1:-1;11647:12:0;11346:321;-1:-1:-1;;;11346:321:0:o;18976:149::-;19039:7;19070:1;19066;:5;:51;;19226:13;19320:15;;;19356:4;19349:15;;;19403:4;19387:21;;19066:51;;;19226:13;19320:15;;;19356:4;19349:15;;;19403:4;19387:21;;19074:20;19133:293;14:173:1;82:20;;-1:-1:-1;;;;;131:31:1;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;565:180::-;624:6;677:2;665:9;656:7;652:23;648:32;645:52;;;693:1;690;683:12;645:52;-1:-1:-1;716:23:1;;565:180;-1:-1:-1;565:180:1:o;750:254::-;818:6;826;879:2;867:9;858:7;854:23;850:32;847:52;;;895:1;892;885:12;847:52;918:29;937:9;918:29;:::i;:::-;908:39;994:2;979:18;;;;966:32;;-1:-1:-1;;;750:254:1:o;1191:615::-;1277:6;1285;1338:2;1326:9;1317:7;1313:23;1309:32;1306:52;;;1354:1;1351;1344:12;1306:52;1394:9;1381:23;1423:18;1464:2;1456:6;1453:14;1450:34;;;1480:1;1477;1470:12;1450:34;1518:6;1507:9;1503:22;1493:32;;1563:7;1556:4;1552:2;1548:13;1544:27;1534:55;;1585:1;1582;1575:12;1534:55;1625:2;1612:16;1651:2;1643:6;1640:14;1637:34;;;1667:1;1664;1657:12;1637:34;1720:7;1715:2;1705:6;1702:1;1698:14;1694:2;1690:23;1686:32;1683:45;1680:65;;;1741:1;1738;1731:12;1680:65;1772:2;1764:11;;;;;1794:6;;-1:-1:-1;1191:615:1;;-1:-1:-1;;;;1191:615:1:o;2204:356::-;2406:2;2388:21;;;2425:18;;;2418:30;2484:34;2479:2;2464:18;;2457:62;2551:2;2536:18;;2204:356::o;2844:277::-;2911:6;2964:2;2952:9;2943:7;2939:23;2935:32;2932:52;;;2980:1;2977;2970:12;2932:52;3012:9;3006:16;3065:5;3058:13;3051:21;3044:5;3041:32;3031:60;;3087:1;3084;3077:12;4064:127;4125:10;4120:3;4116:20;4113:1;4106:31;4156:4;4153:1;4146:15;4180:4;4177:1;4170:15;4196:125;4261:9;;;4282:10;;;4279:36;;;4295:18;;:::i;6012:217::-;6052:1;6078;6068:132;;6122:10;6117:3;6113:20;6110:1;6103:31;6157:4;6154:1;6147:15;6185:4;6182:1;6175:15;6068:132;-1:-1:-1;6214:9:1;;6012:217::o;6641:127::-;6702:10;6697:3;6693:20;6690:1;6683:31;6733:4;6730:1;6723:15;6757:4;6754:1;6747:15;6773:135;6812:3;6833:17;;;6830:43;;6853:18;;:::i;:::-;-1:-1:-1;6900:1:1;6889:13;;6773:135::o"},"gasEstimates":{"creation":{"codeDepositCost":"778000","executionCost":"infinite","totalCost":"infinite"},"external":{"":"207","buy(bytes32[])":"infinite","calcTokenAmount(uint256)":"infinite","claimETH(uint256)":"infinite","claimRewardToken()":"infinite","claimToken(address,uint256)":"infinite","getClaimAmount(address)":"2548","getPrice()":"2348","owner()":"2346","privateSaleAllocation()":"2395","privateSaleTotalSaled()":"2395","publicSaleAllocation()":"2329","publicSaleTotalSaled()":"2372","renounceOwnership()":"30254","resetPrice(uint256)":"24508","rootHash()":"2374","saleIndex()":"2351","setRootHash(bytes32)":"24487","startSale(uint256)":"53074","stopSale()":"24456","transferOwnership(address)":"30539","userDeposited(address)":"2531","userRewards(address)":"2532"},"internal":{"isValidProof(bytes32[] calldata,bytes32)":"infinite"}},"methodIdentifiers":{"buy(bytes32[])":"29ec7eed","calcTokenAmount(uint256)":"7b7902dd","claimETH(uint256)":"fe96973a","claimRewardToken()":"afd18916","claimToken(address,uint256)":"1698755f","getClaimAmount(address)":"dde070e8","getPrice()":"98d5fdca","owner()":"8da5cb5b","privateSaleAllocation()":"c8aad250","privateSaleTotalSaled()":"78442876","publicSaleAllocation()":"34ad1f32","publicSaleTotalSaled()":"e7a6ac55","renounceOwnership()":"715018a6","resetPrice(uint256)":"de8e81ed","rootHash()":"1d80009a","saleIndex()":"6ec012e7","setRootHash(bytes32)":"2d7eae66","startSale(uint256)":"0e3ab61d","stopSale()":"e36b0b37","transferOwnership(address)":"f2fde38b","userDeposited(address)":"8092be4a","userRewards(address)":"0660f1e8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"calcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleTotalSaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleTotalSaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"resetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"setRootHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleIndex\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"IDO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\\r\\n    uint public saleIndex = 0;\\r\\n\\r\\n    /*\\r\\n     * @dev stop sale\\r\\n     */\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleIndex = 3;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw reward token or usdt\\r\\n     * @param tokenAddress : Token address\\r\\n     */\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw ETH\\r\\n     */\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {verify}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function verifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProofCalldata(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processProof}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\r\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerify(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {multiProofVerify}\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\r\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\r\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\r\\n     * respectively.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\r\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\r\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProof(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\r\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\r\\n    }\\r\\n\\r\\n    function _efficientHash(\\r\\n        bytes32 a,\\r\\n        bytes32 b\\r\\n    ) private pure returns (bytes32 value) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    bytes32 public rootHash;\\r\\n    // private sale hardcap 53 eth\\r\\n    // 0.01 eth to 10eth\\r\\n    uint256 privateSaleHardcap = 53 * 1e18;\\r\\n    uint256 minETHAmount = 1e16;\\r\\n    uint256 maxETHAmount = 1e19;\\r\\n\\r\\n    // public sale hardcap 65 eth\\r\\n    uint256 publicSaleHardcap = 65 * 1e18;\\r\\n\\r\\n    // token price 1 token   = tokenPrice ETH\\r\\n    uint256 tokenPrice;\\r\\n\\r\\n    uint256 public privateSaleTotalSaled = 0;\\r\\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\\r\\n    uint256 public publicSaleTotalSaled = 0;\\r\\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\\r\\n\\r\\n    address rewardAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n\\r\\n    constructor(address _rewardAddress, bytes32 _rootHash) {\\r\\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\\r\\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\\r\\n        require(\\r\\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\\r\\n                saleIndex == 2,\\r\\n            \\\"Not WhiteListed Address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isValidProof(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) private view returns (bool) {\\r\\n        return MerkleProof.verify(proof, rootHash, leaf);\\r\\n    }\\r\\n\\r\\n    // -------- Owner Functions ----------\\r\\n\\r\\n    /*\\r\\n     * @dev reset token price\\r\\n     * @Param _price: set price with\\r\\n     */\\r\\n    function resetPrice(uint256 _price) public onlyOwner {\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev start sale\\r\\n     * @dev 1: private sale,2:public sale\\r\\n     * @param _saleIndex : sale index\\r\\n     */\\r\\n    function startSale(uint _saleIndex) external onlyOwner {\\r\\n        saleIndex = _saleIndex;\\r\\n        if (saleIndex == 1) {\\r\\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        } else if (saleIndex == 2) {\\r\\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- owner functions end ----------------\\r\\n\\r\\n    /*\\r\\n     * @dev calcuate token admoutn from eth\\r\\n     * @Param _ethAmount: eth amount\\r\\n     */\\r\\n    function calcTokenAmount(\\r\\n        uint256 _ethAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price for only public sale\\r\\n        if (\\r\\n            saleIndex == 2 &&\\r\\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\\r\\n        ) {\\r\\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\\r\\n                publicSaleAllocation\\r\\n            );\\r\\n            resetPrice(tokenPrice);\\r\\n        }\\r\\n        amount = (_ethAmount).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev buy token from eth\\r\\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\\r\\n     * @dev on private sale Check for hardcap\\r\\n     */\\r\\n    function buy(\\r\\n        bytes32[] calldata proof\\r\\n    ) public payable isWhiteListedAddress(proof) {\\r\\n        require(saleIndex > 0 && saleIndex < 3, \\\"Not allowed to buy now.\\\");\\r\\n        if (saleIndex == 1) {\\r\\n            require(\\r\\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\\r\\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\\r\\n                \\\"Amount is allowed 0.01 eth to 10 eth for only listed address.\\\"\\r\\n            );\\r\\n            require(\\r\\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\\r\\n                \\\"Cannot buy this amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amount = calcTokenAmount(msg.value);\\r\\n        if (saleIndex == 1) {\\r\\n            privateSaleTotalSaled += msg.value;\\r\\n        } else {\\r\\n            publicSaleTotalSaled += msg.value;\\r\\n        }\\r\\n        (bool sent, ) = owner().call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 price) {\\r\\n        price = tokenPrice;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x72dba382491d825347f95ecdb0fc1bdd516a85883eca82372a84ef7deeee143d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/IDO.sol:IDO","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":529,"contract":"contracts/IDO.sol:IDO","label":"saleIndex","offset":0,"slot":"1","type":"t_uint256"},{"astId":1126,"contract":"contracts/IDO.sol:IDO","label":"rootHash","offset":0,"slot":"2","type":"t_bytes32"},{"astId":1131,"contract":"contracts/IDO.sol:IDO","label":"privateSaleHardcap","offset":0,"slot":"3","type":"t_uint256"},{"astId":1134,"contract":"contracts/IDO.sol:IDO","label":"minETHAmount","offset":0,"slot":"4","type":"t_uint256"},{"astId":1137,"contract":"contracts/IDO.sol:IDO","label":"maxETHAmount","offset":0,"slot":"5","type":"t_uint256"},{"astId":1142,"contract":"contracts/IDO.sol:IDO","label":"publicSaleHardcap","offset":0,"slot":"6","type":"t_uint256"},{"astId":1144,"contract":"contracts/IDO.sol:IDO","label":"tokenPrice","offset":0,"slot":"7","type":"t_uint256"},{"astId":1147,"contract":"contracts/IDO.sol:IDO","label":"privateSaleTotalSaled","offset":0,"slot":"8","type":"t_uint256"},{"astId":1152,"contract":"contracts/IDO.sol:IDO","label":"privateSaleAllocation","offset":0,"slot":"9","type":"t_uint256"},{"astId":1155,"contract":"contracts/IDO.sol:IDO","label":"publicSaleTotalSaled","offset":0,"slot":"10","type":"t_uint256"},{"astId":1160,"contract":"contracts/IDO.sol:IDO","label":"publicSaleAllocation","offset":0,"slot":"11","type":"t_uint256"},{"astId":1162,"contract":"contracts/IDO.sol:IDO","label":"rewardAddress","offset":0,"slot":"12","type":"t_address"},{"astId":1166,"contract":"contracts/IDO.sol:IDO","label":"userRewards","offset":0,"slot":"13","type":"t_mapping(t_address,t_uint256)"},{"astId":1170,"contract":"contracts/IDO.sol:IDO","label":"userDeposited","offset":0,"slot":"14","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\\r\\n    uint public saleIndex = 0;\\r\\n\\r\\n    /*\\r\\n     * @dev stop sale\\r\\n     */\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleIndex = 3;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw reward token or usdt\\r\\n     * @param tokenAddress : Token address\\r\\n     */\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw ETH\\r\\n     */\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {verify}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function verifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProofCalldata(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processProof}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\r\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerify(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {multiProofVerify}\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\r\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\r\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\r\\n     * respectively.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\r\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\r\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProof(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\r\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\r\\n    }\\r\\n\\r\\n    function _efficientHash(\\r\\n        bytes32 a,\\r\\n        bytes32 b\\r\\n    ) private pure returns (bytes32 value) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    bytes32 public rootHash;\\r\\n    // private sale hardcap 53 eth\\r\\n    // 0.01 eth to 10eth\\r\\n    uint256 privateSaleHardcap = 53 * 1e18;\\r\\n    uint256 minETHAmount = 1e16;\\r\\n    uint256 maxETHAmount = 1e19;\\r\\n\\r\\n    // public sale hardcap 65 eth\\r\\n    uint256 publicSaleHardcap = 65 * 1e18;\\r\\n\\r\\n    // token price 1 token   = tokenPrice ETH\\r\\n    uint256 tokenPrice;\\r\\n\\r\\n    uint256 public privateSaleTotalSaled = 0;\\r\\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\\r\\n    uint256 public publicSaleTotalSaled = 0;\\r\\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\\r\\n\\r\\n    address rewardAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n\\r\\n    constructor(address _rewardAddress, bytes32 _rootHash) {\\r\\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\\r\\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\\r\\n        require(\\r\\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\\r\\n                saleIndex == 2,\\r\\n            \\\"Not WhiteListed Address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isValidProof(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) private view returns (bool) {\\r\\n        return MerkleProof.verify(proof, rootHash, leaf);\\r\\n    }\\r\\n\\r\\n    // -------- Owner Functions ----------\\r\\n\\r\\n    /*\\r\\n     * @dev reset token price\\r\\n     * @Param _price: set price with\\r\\n     */\\r\\n    function resetPrice(uint256 _price) public onlyOwner {\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev start sale\\r\\n     * @dev 1: private sale,2:public sale\\r\\n     * @param _saleIndex : sale index\\r\\n     */\\r\\n    function startSale(uint _saleIndex) external onlyOwner {\\r\\n        saleIndex = _saleIndex;\\r\\n        if (saleIndex == 1) {\\r\\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        } else if (saleIndex == 2) {\\r\\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- owner functions end ----------------\\r\\n\\r\\n    /*\\r\\n     * @dev calcuate token admoutn from eth\\r\\n     * @Param _ethAmount: eth amount\\r\\n     */\\r\\n    function calcTokenAmount(\\r\\n        uint256 _ethAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price for only public sale\\r\\n        if (\\r\\n            saleIndex == 2 &&\\r\\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\\r\\n        ) {\\r\\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\\r\\n                publicSaleAllocation\\r\\n            );\\r\\n            resetPrice(tokenPrice);\\r\\n        }\\r\\n        amount = (_ethAmount).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev buy token from eth\\r\\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\\r\\n     * @dev on private sale Check for hardcap\\r\\n     */\\r\\n    function buy(\\r\\n        bytes32[] calldata proof\\r\\n    ) public payable isWhiteListedAddress(proof) {\\r\\n        require(saleIndex > 0 && saleIndex < 3, \\\"Not allowed to buy now.\\\");\\r\\n        if (saleIndex == 1) {\\r\\n            require(\\r\\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\\r\\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\\r\\n                \\\"Amount is allowed 0.01 eth to 10 eth for only listed address.\\\"\\r\\n            );\\r\\n            require(\\r\\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\\r\\n                \\\"Cannot buy this amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amount = calcTokenAmount(msg.value);\\r\\n        if (saleIndex == 1) {\\r\\n            privateSaleTotalSaled += msg.value;\\r\\n        } else {\\r\\n            publicSaleTotalSaled += msg.value;\\r\\n        }\\r\\n        (bool sent, ) = owner().call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 price) {\\r\\n        price = tokenPrice;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x72dba382491d825347f95ecdb0fc1bdd516a85883eca82372a84ef7deeee143d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"MerkleProof":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206e3c114d57d93e4f10c0da6ff01a122468db0b86eeac02eef746778e97af6fd964736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0x3C114D57D93E4F10C0DA6FF01A1224 PUSH9 0xDB0B86EEAC02EEF746 PUSH24 0x8E97AF6FD964736F6C634300081200330000000000000000 ","sourceMap":"10118:9311:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;10118:9311:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206e3c114d57d93e4f10c0da6ff01a122468db0b86eeac02eef746778e97af6fd964736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0x3C114D57D93E4F10C0DA6FF01A1224 PUSH9 0xDB0B86EEAC02EEF746 PUSH24 0x8E97AF6FD964736F6C634300081200330000000000000000 ","sourceMap":"10118:9311:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\\r\\n    uint public saleIndex = 0;\\r\\n\\r\\n    /*\\r\\n     * @dev stop sale\\r\\n     */\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleIndex = 3;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw reward token or usdt\\r\\n     * @param tokenAddress : Token address\\r\\n     */\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw ETH\\r\\n     */\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {verify}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function verifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProofCalldata(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processProof}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\r\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerify(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {multiProofVerify}\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\r\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\r\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\r\\n     * respectively.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\r\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\r\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProof(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\r\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\r\\n    }\\r\\n\\r\\n    function _efficientHash(\\r\\n        bytes32 a,\\r\\n        bytes32 b\\r\\n    ) private pure returns (bytes32 value) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    bytes32 public rootHash;\\r\\n    // private sale hardcap 53 eth\\r\\n    // 0.01 eth to 10eth\\r\\n    uint256 privateSaleHardcap = 53 * 1e18;\\r\\n    uint256 minETHAmount = 1e16;\\r\\n    uint256 maxETHAmount = 1e19;\\r\\n\\r\\n    // public sale hardcap 65 eth\\r\\n    uint256 publicSaleHardcap = 65 * 1e18;\\r\\n\\r\\n    // token price 1 token   = tokenPrice ETH\\r\\n    uint256 tokenPrice;\\r\\n\\r\\n    uint256 public privateSaleTotalSaled = 0;\\r\\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\\r\\n    uint256 public publicSaleTotalSaled = 0;\\r\\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\\r\\n\\r\\n    address rewardAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n\\r\\n    constructor(address _rewardAddress, bytes32 _rootHash) {\\r\\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\\r\\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\\r\\n        require(\\r\\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\\r\\n                saleIndex == 2,\\r\\n            \\\"Not WhiteListed Address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isValidProof(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) private view returns (bool) {\\r\\n        return MerkleProof.verify(proof, rootHash, leaf);\\r\\n    }\\r\\n\\r\\n    // -------- Owner Functions ----------\\r\\n\\r\\n    /*\\r\\n     * @dev reset token price\\r\\n     * @Param _price: set price with\\r\\n     */\\r\\n    function resetPrice(uint256 _price) public onlyOwner {\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev start sale\\r\\n     * @dev 1: private sale,2:public sale\\r\\n     * @param _saleIndex : sale index\\r\\n     */\\r\\n    function startSale(uint _saleIndex) external onlyOwner {\\r\\n        saleIndex = _saleIndex;\\r\\n        if (saleIndex == 1) {\\r\\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        } else if (saleIndex == 2) {\\r\\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- owner functions end ----------------\\r\\n\\r\\n    /*\\r\\n     * @dev calcuate token admoutn from eth\\r\\n     * @Param _ethAmount: eth amount\\r\\n     */\\r\\n    function calcTokenAmount(\\r\\n        uint256 _ethAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price for only public sale\\r\\n        if (\\r\\n            saleIndex == 2 &&\\r\\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\\r\\n        ) {\\r\\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\\r\\n                publicSaleAllocation\\r\\n            );\\r\\n            resetPrice(tokenPrice);\\r\\n        }\\r\\n        amount = (_ethAmount).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev buy token from eth\\r\\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\\r\\n     * @dev on private sale Check for hardcap\\r\\n     */\\r\\n    function buy(\\r\\n        bytes32[] calldata proof\\r\\n    ) public payable isWhiteListedAddress(proof) {\\r\\n        require(saleIndex > 0 && saleIndex < 3, \\\"Not allowed to buy now.\\\");\\r\\n        if (saleIndex == 1) {\\r\\n            require(\\r\\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\\r\\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\\r\\n                \\\"Amount is allowed 0.01 eth to 10 eth for only listed address.\\\"\\r\\n            );\\r\\n            require(\\r\\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\\r\\n                \\\"Cannot buy this amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amount = calcTokenAmount(msg.value);\\r\\n        if (saleIndex == 1) {\\r\\n            privateSaleTotalSaled += msg.value;\\r\\n        } else {\\r\\n            publicSaleTotalSaled += msg.value;\\r\\n        }\\r\\n        (bool sent, ) = owner().call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 price) {\\r\\n        price = tokenPrice;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x72dba382491d825347f95ecdb0fc1bdd516a85883eca82372a84ef7deeee143d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Ownable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_445":{"entryPoint":null,"id":445,"parameterSlots":0,"returnSlots":0},"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506102b7806100616000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610251565b61012b565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146101855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b61018e81610191565b50565b6001600160a01b0381166101f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561026357600080fd5b81356001600160a01b038116811461027a57600080fd5b939250505056fea2646970667358221220e439ba19fe14ddac80acf8dff2cfb23604250b471d8590c226c84e2eed66ced464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0x2B7 DUP1 PUSH2 0x61 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0x191 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 CODECOPY 0xBA NOT INVALID EQ 0xDD 0xAC DUP1 0xAC 0xF8 0xDF CALLCODE 0xCF 0xB2 CALLDATASIZE DIV 0x25 SIGNEXTEND SELFBALANCE SAR DUP6 SWAP1 0xC2 0x26 0xC8 0x4E 0x2E 0xED PUSH7 0xCED464736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"8272:1092:0:-:0;;;8455:153;;;;;;;;;-1:-1:-1;8480:17:0;8523:18;;-1:-1:-1;;;;;;8523:18:0;1332:10;8523:18;;;;;8557:43;;1332:10;;;;8557:43;;8480:17;;8557:43;8469:139;8272:1092;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_93":{"entryPoint":null,"id":93,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_523":{"entryPoint":401,"id":523,"parameterSlots":1,"returnSlots":0},"@owner_453":{"entryPoint":null,"id":453,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_486":{"entryPoint":130,"id":486,"parameterSlots":0,"returnSlots":0},"@transferOwnership_498":{"entryPoint":299,"id":498,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":593,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1278:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:102:1","statements":[{"nodeType":"YulAssignment","src":"125:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:1"},"nodeType":"YulFunctionCall","src":"133:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"203:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"194:3:1"},"nodeType":"YulFunctionCall","src":"194:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"207:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"190:3:1"},"nodeType":"YulFunctionCall","src":"190:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:1"},"nodeType":"YulFunctionCall","src":"178:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:1"},"nodeType":"YulFunctionCall","src":"160:51:1"},"nodeType":"YulExpressionStatement","src":"160:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:1","type":""}],"src":"14:203:1"},{"body":{"nodeType":"YulBlock","src":"292:216:1","statements":[{"body":{"nodeType":"YulBlock","src":"338:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"347:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"350:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"340:6:1"},"nodeType":"YulFunctionCall","src":"340:12:1"},"nodeType":"YulExpressionStatement","src":"340:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"313:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"322:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"309:3:1"},"nodeType":"YulFunctionCall","src":"309:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"334:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"305:3:1"},"nodeType":"YulFunctionCall","src":"305:32:1"},"nodeType":"YulIf","src":"302:52:1"},{"nodeType":"YulVariableDeclaration","src":"363:36:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"389:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"376:12:1"},"nodeType":"YulFunctionCall","src":"376:23:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"367:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:16:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"474:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"464:6:1"},"nodeType":"YulFunctionCall","src":"464:12:1"},"nodeType":"YulExpressionStatement","src":"464:12:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"421:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"432:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"452:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"443:3:1"},"nodeType":"YulFunctionCall","src":"443:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"456:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"439:3:1"},"nodeType":"YulFunctionCall","src":"439:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"428:3:1"},"nodeType":"YulFunctionCall","src":"428:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"418:2:1"},"nodeType":"YulFunctionCall","src":"418:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"411:6:1"},"nodeType":"YulFunctionCall","src":"411:50:1"},"nodeType":"YulIf","src":"408:70:1"},{"nodeType":"YulAssignment","src":"487:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"497:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"487:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"258:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"269:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"281:6:1","type":""}],"src":"222:286:1"},{"body":{"nodeType":"YulBlock","src":"687:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"704:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"715:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"697:6:1"},"nodeType":"YulFunctionCall","src":"697:21:1"},"nodeType":"YulExpressionStatement","src":"697:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"738:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"749:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:1"},"nodeType":"YulFunctionCall","src":"734:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"754:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:1"},"nodeType":"YulFunctionCall","src":"727:30:1"},"nodeType":"YulExpressionStatement","src":"727:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"777:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"788:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"773:3:1"},"nodeType":"YulFunctionCall","src":"773:18:1"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"793:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:1"},"nodeType":"YulFunctionCall","src":"766:62:1"},"nodeType":"YulExpressionStatement","src":"766:62:1"},{"nodeType":"YulAssignment","src":"837:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"849:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"860:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"845:3:1"},"nodeType":"YulFunctionCall","src":"845:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"837:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"664:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"678:4:1","type":""}],"src":"513:356:1"},{"body":{"nodeType":"YulBlock","src":"1048:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1065:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1076:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1058:6:1"},"nodeType":"YulFunctionCall","src":"1058:21:1"},"nodeType":"YulExpressionStatement","src":"1058:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1099:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1110:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1095:3:1"},"nodeType":"YulFunctionCall","src":"1095:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"1115:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1088:6:1"},"nodeType":"YulFunctionCall","src":"1088:30:1"},"nodeType":"YulExpressionStatement","src":"1088:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1138:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1149:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1134:3:1"},"nodeType":"YulFunctionCall","src":"1134:18:1"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"1154:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:1"},"nodeType":"YulFunctionCall","src":"1127:62:1"},"nodeType":"YulExpressionStatement","src":"1127:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1209:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1220:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1205:3:1"},"nodeType":"YulFunctionCall","src":"1205:18:1"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"1225:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1198:6:1"},"nodeType":"YulFunctionCall","src":"1198:36:1"},"nodeType":"YulExpressionStatement","src":"1198:36:1"},{"nodeType":"YulAssignment","src":"1243:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1255:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1266:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1251:3:1"},"nodeType":"YulFunctionCall","src":"1251:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1243:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1025:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1039:4:1","type":""}],"src":"874:402:1"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610251565b61012b565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146101855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b61018e81610191565b50565b6001600160a01b0381166101f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561026357600080fd5b81356001600160a01b038116811461027a57600080fd5b939250505056fea2646970667358221220e439ba19fe14ddac80acf8dff2cfb23604250b471d8590c226c84e2eed66ced464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0x191 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 CODECOPY 0xBA NOT INVALID EQ 0xDD 0xAC DUP1 0xAC 0xF8 0xDF CALLCODE 0xCF 0xB2 CALLDATASIZE DIV 0x25 SIGNEXTEND SELFBALANCE SAR DUP6 SWAP1 0xC2 0x26 0xC8 0x4E 0x2E 0xED PUSH7 0xCED464736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"8272:1092:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8830:140;;;:::i;:::-;;8616:79;8654:7;8681:6;8616:79;;;-1:-1:-1;;;;;8681:6:0;;;160:51:1;;8616:79:0;;;;;148:2:1;8616:79:0;;;8978:109;;;;;;:::i;:::-;;:::i;8830:140::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;715:2:1;8735:67:0;;;697:21:1;;;734:18;;;727:30;793:34;773:18;;;766:62;845:18;;8735:67:0;;;;;;;;;8929:1:::1;8913:6:::0;;8892:40:::1;::::0;-1:-1:-1;;;;;8913:6:0;;::::1;::::0;8892:40:::1;::::0;8929:1;;8892:40:::1;8960:1;8943:19:::0;;-1:-1:-1;;;;;;8943:19:0::1;::::0;;8830:140::o;8978:109::-;8743:6;;-1:-1:-1;;;;;8743:6:0;1332:10;8743:22;8735:67;;;;-1:-1:-1;;;8735:67:0;;715:2:1;8735:67:0;;;697:21:1;;;734:18;;;727:30;793:34;773:18;;;766:62;845:18;;8735:67:0;513:356:1;8735:67:0;9051:28:::1;9070:8;9051:18;:28::i;:::-;8978:109:::0;:::o;9095:266::-;-1:-1:-1;;;;;9183:22:0;;9161:110;;;;-1:-1:-1;;;9161:110:0;;1076:2:1;9161:110:0;;;1058:21:1;1115:2;1095:18;;;1088:30;1154:34;1134:18;;;1127:62;-1:-1:-1;;;1205:18:1;;;1198:36;1251:19;;9161:110:0;874:402:1;9161:110:0;9308:6;;;9287:38;;-1:-1:-1;;;;;9287:38:0;;;;9308:6;;;9287:38;;;9336:6;:17;;-1:-1:-1;;;;;;9336:17:0;-1:-1:-1;;;;;9336:17:0;;;;;;;;;;9095:266::o;222:286:1:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:1;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:1:o"},"gasEstimates":{"creation":{"codeDepositCost":"139000","executionCost":"25956","totalCost":"164956"},"external":{"owner()":"2292","renounceOwnership()":"30143","transferOwnership(address)":"30416"},"internal":{"_transferOwnership(address)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\\r\\n    uint public saleIndex = 0;\\r\\n\\r\\n    /*\\r\\n     * @dev stop sale\\r\\n     */\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleIndex = 3;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw reward token or usdt\\r\\n     * @param tokenAddress : Token address\\r\\n     */\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw ETH\\r\\n     */\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {verify}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function verifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProofCalldata(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processProof}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\r\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerify(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {multiProofVerify}\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\r\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\r\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\r\\n     * respectively.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\r\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\r\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProof(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\r\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\r\\n    }\\r\\n\\r\\n    function _efficientHash(\\r\\n        bytes32 a,\\r\\n        bytes32 b\\r\\n    ) private pure returns (bytes32 value) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    bytes32 public rootHash;\\r\\n    // private sale hardcap 53 eth\\r\\n    // 0.01 eth to 10eth\\r\\n    uint256 privateSaleHardcap = 53 * 1e18;\\r\\n    uint256 minETHAmount = 1e16;\\r\\n    uint256 maxETHAmount = 1e19;\\r\\n\\r\\n    // public sale hardcap 65 eth\\r\\n    uint256 publicSaleHardcap = 65 * 1e18;\\r\\n\\r\\n    // token price 1 token   = tokenPrice ETH\\r\\n    uint256 tokenPrice;\\r\\n\\r\\n    uint256 public privateSaleTotalSaled = 0;\\r\\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\\r\\n    uint256 public publicSaleTotalSaled = 0;\\r\\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\\r\\n\\r\\n    address rewardAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n\\r\\n    constructor(address _rewardAddress, bytes32 _rootHash) {\\r\\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\\r\\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\\r\\n        require(\\r\\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\\r\\n                saleIndex == 2,\\r\\n            \\\"Not WhiteListed Address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isValidProof(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) private view returns (bool) {\\r\\n        return MerkleProof.verify(proof, rootHash, leaf);\\r\\n    }\\r\\n\\r\\n    // -------- Owner Functions ----------\\r\\n\\r\\n    /*\\r\\n     * @dev reset token price\\r\\n     * @Param _price: set price with\\r\\n     */\\r\\n    function resetPrice(uint256 _price) public onlyOwner {\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev start sale\\r\\n     * @dev 1: private sale,2:public sale\\r\\n     * @param _saleIndex : sale index\\r\\n     */\\r\\n    function startSale(uint _saleIndex) external onlyOwner {\\r\\n        saleIndex = _saleIndex;\\r\\n        if (saleIndex == 1) {\\r\\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        } else if (saleIndex == 2) {\\r\\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- owner functions end ----------------\\r\\n\\r\\n    /*\\r\\n     * @dev calcuate token admoutn from eth\\r\\n     * @Param _ethAmount: eth amount\\r\\n     */\\r\\n    function calcTokenAmount(\\r\\n        uint256 _ethAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price for only public sale\\r\\n        if (\\r\\n            saleIndex == 2 &&\\r\\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\\r\\n        ) {\\r\\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\\r\\n                publicSaleAllocation\\r\\n            );\\r\\n            resetPrice(tokenPrice);\\r\\n        }\\r\\n        amount = (_ethAmount).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev buy token from eth\\r\\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\\r\\n     * @dev on private sale Check for hardcap\\r\\n     */\\r\\n    function buy(\\r\\n        bytes32[] calldata proof\\r\\n    ) public payable isWhiteListedAddress(proof) {\\r\\n        require(saleIndex > 0 && saleIndex < 3, \\\"Not allowed to buy now.\\\");\\r\\n        if (saleIndex == 1) {\\r\\n            require(\\r\\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\\r\\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\\r\\n                \\\"Amount is allowed 0.01 eth to 10 eth for only listed address.\\\"\\r\\n            );\\r\\n            require(\\r\\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\\r\\n                \\\"Cannot buy this amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amount = calcTokenAmount(msg.value);\\r\\n        if (saleIndex == 1) {\\r\\n            privateSaleTotalSaled += msg.value;\\r\\n        } else {\\r\\n            publicSaleTotalSaled += msg.value;\\r\\n        }\\r\\n        (bool sent, ) = owner().call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 price) {\\r\\n        price = tokenPrice;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x72dba382491d825347f95ecdb0fc1bdd516a85883eca82372a84ef7deeee143d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/IDO.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0cba20e4b767d8b31cc8fd92f32bb115bd29c8d50fcdf17fb3f11e1f363b87964736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xCB LOG2 0xE 0x4B PUSH23 0x7D8B31CC8FD92F32BB115BD29C8D50FCDF17FB3F11E1F3 PUSH4 0xB8796473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"1590:6636:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1590:6636:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0cba20e4b767d8b31cc8fd92f32bb115bd29c8d50fcdf17fb3f11e1f363b87964736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xCB LOG2 0xE 0x4B PUSH23 0x7D8B31CC8FD92F32BB115BD29C8D50FCDF17FB3F11E1F3 PUSH4 0xB8796473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"1590:6636:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IDO.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Claimable is Ownable {\\r\\n    // 0: Pending 1: private sale 2: public sale 3 : stop sale\\r\\n    uint public saleIndex = 0;\\r\\n\\r\\n    /*\\r\\n     * @dev stop sale\\r\\n     */\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleIndex = 3;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw reward token or usdt\\r\\n     * @param tokenAddress : Token address\\r\\n     */\\r\\n    function claimToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev withdraw ETH\\r\\n     */\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {verify}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function verifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProofCalldata(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processProof}\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            computedHash = _hashPair(computedHash, proof[i]);\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\r\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerify(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {multiProofVerify}\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function multiProofVerifyCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32 root,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bool) {\\r\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\r\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\r\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\r\\n     * respectively.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\r\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\r\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProof(\\r\\n        bytes32[] memory proof,\\r\\n        bool[] memory proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calldata version of {processMultiProof}.\\r\\n     *\\r\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\r\\n     *\\r\\n     * _Available since v4.7._\\r\\n     */\\r\\n    function processMultiProofCalldata(\\r\\n        bytes32[] calldata proof,\\r\\n        bool[] calldata proofFlags,\\r\\n        bytes32[] memory leaves\\r\\n    ) internal pure returns (bytes32 merkleRoot) {\\r\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\r\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\r\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\r\\n        // the merkle tree.\\r\\n        uint256 leavesLen = leaves.length;\\r\\n        uint256 proofLen = proof.length;\\r\\n        uint256 totalHashes = proofFlags.length;\\r\\n\\r\\n        // Check proof validity.\\r\\n        require(\\r\\n            leavesLen + proofLen - 1 == totalHashes,\\r\\n            \\\"MerkleProof: invalid multiproof\\\"\\r\\n        );\\r\\n\\r\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\r\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\r\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\r\\n        uint256 leafPos = 0;\\r\\n        uint256 hashPos = 0;\\r\\n        uint256 proofPos = 0;\\r\\n        // At each step, we compute the next hash using two values:\\r\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\r\\n        //   get the next hash.\\r\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\r\\n        //   `proof` array.\\r\\n        for (uint256 i = 0; i < totalHashes; i++) {\\r\\n            bytes32 a = leafPos < leavesLen\\r\\n                ? leaves[leafPos++]\\r\\n                : hashes[hashPos++];\\r\\n            bytes32 b = proofFlags[i]\\r\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\r\\n                : proof[proofPos++];\\r\\n            hashes[i] = _hashPair(a, b);\\r\\n        }\\r\\n\\r\\n        if (totalHashes > 0) {\\r\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\r\\n            unchecked {\\r\\n                return hashes[totalHashes - 1];\\r\\n            }\\r\\n        } else if (leavesLen > 0) {\\r\\n            return leaves[0];\\r\\n        } else {\\r\\n            return proof[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\r\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\r\\n    }\\r\\n\\r\\n    function _efficientHash(\\r\\n        bytes32 a,\\r\\n        bytes32 b\\r\\n    ) private pure returns (bytes32 value) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract IDO is Claimable {\\r\\n    using SafeMath for uint256;\\r\\n    event Buy(address to, uint256 amount);\\r\\n    event Claim(address to, uint256 amount);\\r\\n    bytes32 public rootHash;\\r\\n    // private sale hardcap 53 eth\\r\\n    // 0.01 eth to 10eth\\r\\n    uint256 privateSaleHardcap = 53 * 1e18;\\r\\n    uint256 minETHAmount = 1e16;\\r\\n    uint256 maxETHAmount = 1e19;\\r\\n\\r\\n    // public sale hardcap 65 eth\\r\\n    uint256 publicSaleHardcap = 65 * 1e18;\\r\\n\\r\\n    // token price 1 token   = tokenPrice ETH\\r\\n    uint256 tokenPrice;\\r\\n\\r\\n    uint256 public privateSaleTotalSaled = 0;\\r\\n    uint256 public privateSaleAllocation = 5035000 * 1e6;\\r\\n    uint256 public publicSaleTotalSaled = 0;\\r\\n    uint256 public publicSaleAllocation = 4940000 * 1e6;\\r\\n\\r\\n    address rewardAddress;\\r\\n\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userDeposited;\\r\\n\\r\\n    constructor(address _rewardAddress, bytes32 _rootHash) {\\r\\n        // 1 token  = 53e18/5000000 * 1e6 =  10,600,000 wei\\r\\n        tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        rewardAddress = _rewardAddress;\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    function setRootHash(bytes32 _rootHash) external onlyOwner {\\r\\n        rootHash = _rootHash;\\r\\n    }\\r\\n\\r\\n    modifier isWhiteListedAddress(bytes32[] calldata proof) {\\r\\n        require(\\r\\n            isValidProof(proof, keccak256(abi.encodePacked(msg.sender))) ||\\r\\n                saleIndex == 2,\\r\\n            \\\"Not WhiteListed Address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isValidProof(\\r\\n        bytes32[] calldata proof,\\r\\n        bytes32 leaf\\r\\n    ) private view returns (bool) {\\r\\n        return MerkleProof.verify(proof, rootHash, leaf);\\r\\n    }\\r\\n\\r\\n    // -------- Owner Functions ----------\\r\\n\\r\\n    /*\\r\\n     * @dev reset token price\\r\\n     * @Param _price: set price with\\r\\n     */\\r\\n    function resetPrice(uint256 _price) public onlyOwner {\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev start sale\\r\\n     * @dev 1: private sale,2:public sale\\r\\n     * @param _saleIndex : sale index\\r\\n     */\\r\\n    function startSale(uint _saleIndex) external onlyOwner {\\r\\n        saleIndex = _saleIndex;\\r\\n        if (saleIndex == 1) {\\r\\n            tokenPrice = privateSaleHardcap.div(privateSaleAllocation);\\r\\n        } else if (saleIndex == 2) {\\r\\n            tokenPrice = publicSaleHardcap.div(publicSaleAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------- owner functions end ----------------\\r\\n\\r\\n    /*\\r\\n     * @dev calcuate token admoutn from eth\\r\\n     * @Param _ethAmount: eth amount\\r\\n     */\\r\\n    function calcTokenAmount(\\r\\n        uint256 _ethAmount\\r\\n    ) public returns (uint256 amount) {\\r\\n        // calculate price for only public sale\\r\\n        if (\\r\\n            saleIndex == 2 &&\\r\\n            (publicSaleTotalSaled + _ethAmount) > publicSaleHardcap\\r\\n        ) {\\r\\n            tokenPrice = (publicSaleTotalSaled + _ethAmount).div(\\r\\n                publicSaleAllocation\\r\\n            );\\r\\n            resetPrice(tokenPrice);\\r\\n        }\\r\\n        amount = (_ethAmount).div(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev buy token from eth\\r\\n     * @dev on private sale 0.01 - 10 eth for only whitelist addresses\\r\\n     * @dev on private sale Check for hardcap\\r\\n     */\\r\\n    function buy(\\r\\n        bytes32[] calldata proof\\r\\n    ) public payable isWhiteListedAddress(proof) {\\r\\n        require(saleIndex > 0 && saleIndex < 3, \\\"Not allowed to buy now.\\\");\\r\\n        if (saleIndex == 1) {\\r\\n            require(\\r\\n                maxETHAmount >= (userDeposited[_msgSender()] + msg.value) &&\\r\\n                    (userDeposited[_msgSender()] + msg.value) >= minETHAmount,\\r\\n                \\\"Amount is allowed 0.01 eth to 10 eth for only listed address.\\\"\\r\\n            );\\r\\n            require(\\r\\n                privateSaleHardcap >= (privateSaleTotalSaled + msg.value),\\r\\n                \\\"Cannot buy this amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amount = calcTokenAmount(msg.value);\\r\\n        if (saleIndex == 1) {\\r\\n            privateSaleTotalSaled += msg.value;\\r\\n        } else {\\r\\n            publicSaleTotalSaled += msg.value;\\r\\n        }\\r\\n        (bool sent, ) = owner().call{value: msg.value}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        userRewards[_msgSender()] += amount;\\r\\n        userDeposited[_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    function claimRewardToken() public {\\r\\n        require(userRewards[_msgSender()] >= 0, \\\"Please buy token.\\\");\\r\\n        IERC20(rewardAddress).transfer(msg.sender, userRewards[_msgSender()]);\\r\\n        userRewards[_msgSender()] = 0;\\r\\n        emit Claim(msg.sender, userRewards[_msgSender()]);\\r\\n    }\\r\\n\\r\\n    function getClaimAmount(\\r\\n        address userAddress\\r\\n    ) public view returns (uint256 claimAmount) {\\r\\n        claimAmount = userRewards[userAddress];\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256 price) {\\r\\n        price = tokenPrice;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x72dba382491d825347f95ecdb0fc1bdd516a85883eca82372a84ef7deeee143d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}